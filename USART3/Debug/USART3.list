
USART3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a8  080043a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043a8  080043a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043a8  080043a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08004420  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004420  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d147  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002485  00000000  00000000  0002d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002f668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  000303a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac51  00000000  00000000  00030fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f158  00000000  00000000  0004bc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a109  00000000  00000000  0005ad89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4e92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  000f4ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08004298 	.word	0x08004298

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08004298 	.word	0x08004298

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DMA_Init+0x48>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <MX_DMA_Init+0x48>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DMA_Init+0x48>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200c      	movs	r0, #12
 8000a28:	f000 fd49 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a2c:	200c      	movs	r0, #12
 8000a2e:	f000 fd62 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	200d      	movs	r0, #13
 8000a38:	f000 fd41 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a3c:	200d      	movs	r0, #13
 8000a3e:	f000 fd5a 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <StartModule>:
#include "stm32f1xx_hal.h"
#include "stm32f1xx_it.h"

//启动超声波模块
void StartModule(void) // T1中断用来扫描数码管和计800MS启动模块
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port, HC_SR04_Trig_Pin, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <StartModule+0x24>)
 8000a5a:	f001 f9c4 	bl	8001de6 <HAL_GPIO_WritePin>
  HAL_Delay(10); // 10ms延时
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f000 fc32 	bl	80012c8 <HAL_Delay>
  HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port, HC_SR04_Trig_Pin, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2110      	movs	r1, #16
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <StartModule+0x24>)
 8000a6a:	f001 f9bc 	bl	8001de6 <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40011000 	.word	0x40011000

08000a78 <GetStatus>:

//获得ECHO引脚状态
int GetStatus(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(HC_SR04_Echo_GPIO_Port, HC_SR04_Echo_Pin);
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <GetStatus+0x14>)
 8000a80:	f001 f99a 	bl	8001db8 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40011000 	.word	0x40011000

08000a90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000aaa:	f043 0320 	orr.w	r3, r3, #32
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0320 	and.w	r3, r3, #32
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_GPIO_Init+0xbc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port, HC_SR04_Trig_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2110      	movs	r1, #16
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_GPIO_Init+0xc0>)
 8000b0a:	f001 f96c 	bl	8001de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC_SR04_Trig_Pin;
 8000b0e:	2310      	movs	r3, #16
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HC_SR04_Trig_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <MX_GPIO_Init+0xc0>)
 8000b26:	f000 ffb3 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC_SR04_Echo_Pin;
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HC_SR04_Echo_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_GPIO_Init+0xc0>)
 8000b3e:	f000 ffa7 	bl	8001a90 <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40011000 	.word	0x40011000

08000b54 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t dta = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000b5e:	f000 fb51 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f82b 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f7ff ff93 	bl	8000a90 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b6a:	f000 fa49 	bl	8001000 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000b6e:	f7ff ff49 	bl	8000a04 <MX_DMA_Init>
  MX_TIM2_Init();
 8000b72:	f000 f98b 	bl	8000e8c <MX_TIM2_Init>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // printf("\n\r welcome to www.waveshere.com !!!\n\r");
    StartModule(); //启动超声波模块
 8000b76:	f7ff ff6b 	bl	8000a50 <StartModule>
    printf("超声波模块已启动\r\n");
 8000b7a:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <main+0x60>)
 8000b7c:	f002 fc3c 	bl	80033f8 <puts>
    while (!GetStatus())
 8000b80:	bf00      	nop
 8000b82:	f7ff ff79 	bl	8000a78 <GetStatus>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0fa      	beq.n	8000b82 <main+0x2e>
      ; //当ECHO返回0，等待
    start();
 8000b8c:	f000 f9ee 	bl	8000f6c <start>
    while (GetStatus())
 8000b90:	bf00      	nop
 8000b92:	f7ff ff71 	bl	8000a78 <GetStatus>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1fa      	bne.n	8000b92 <main+0x3e>
      ; //当ECHO为1计数并等待
    dta = get_num();
 8000b9c:	f000 f9f4 	bl	8000f88 <get_num>
 8000ba0:	6078      	str	r0, [r7, #4]
    printf("测试距离为：%d mm\r\n", dta);
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <main+0x64>)
 8000ba6:	f002 fba1 	bl	80032ec <iprintf>
    HAL_Delay(100); // 1000MS
 8000baa:	2064      	movs	r0, #100	; 0x64
 8000bac:	f000 fb8c 	bl	80012c8 <HAL_Delay>
  while (1) {
 8000bb0:	e7e1      	b.n	8000b76 <main+0x22>
 8000bb2:	bf00      	nop
 8000bb4:	080042b0 	.word	0x080042b0
 8000bb8:	080042cc 	.word	0x080042cc

08000bbc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b090      	sub	sp, #64	; 0x40
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	2228      	movs	r2, #40	; 0x28
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fb86 	bl	80032dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 f907 	bl	8001e18 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x58>
    Error_Handler();
 8000c10:	f000 f819 	bl	8000c46 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000c14:	230f      	movs	r3, #15
 8000c16:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fb72 	bl	8002318 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x82>
    Error_Handler();
 8000c3a:	f000 f804 	bl	8000c46 <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3740      	adds	r7, #64	; 0x40
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4a:	b672      	cpsid	i
}
 8000c4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000c4e:	e7fe      	b.n	8000c4e <Error_Handler+0x8>

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_MspInit+0x5c>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <HAL_MspInit+0x5c>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_MspInit+0x5c>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x5c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_MspInit+0x5c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x5c>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_MspInit+0x60>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_MspInit+0x60>)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfa:	f000 fac9 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <DMA1_Channel2_IRQHandler+0x10>)
 8000d0a:	f000 fc85 	bl	8001618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000168 	.word	0x20000168

08000d18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <DMA1_Channel3_IRQHandler+0x10>)
 8000d1e:	f000 fc7b 	bl	8001618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000e0 	.word	0x200000e0

08000d2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM2_IRQHandler+0x10>)
 8000d32:	f001 fd69 	bl	8002808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000098 	.word	0x20000098

08000d40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
	}

return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f9fd 	bl	8001194 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
	}
	return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd8:	605a      	str	r2, [r3, #4]
	return 0;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
	...

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f002 fa20 	bl	8003288 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000c000 	.word	0x2000c000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	2000008c 	.word	0x2000008c
 8000e7c:	200001c0 	.word	0x200001c0

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eb2:	2247      	movs	r2, #71	; 0x47
 8000eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000-1;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ebe:	f247 522f 	movw	r2, #29999	; 0x752f
 8000ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000ed2:	f001 fbbb 	bl	800264c <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000edc:	f7ff feb3 	bl	8000c46 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000eee:	f001 fd93 	bl	8002a18 <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f7ff fea5 	bl	8000c46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM2_Init+0x94>)
 8000f0a:	f001 ff87 	bl	8002e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f14:	f7ff fe97 	bl	8000c46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000098 	.word	0x20000098

08000f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f34:	d113      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201c      	movs	r0, #28
 8000f54:	f000 fab3 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 facc 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <start>:
  }
}

/* USER CODE BEGIN 1 */
void start(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    __HAL_TIM_SetCounter(&htim2,0);   //清0计数
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <start+0x18>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start_IT(&htim2);   // 开启定时器更新中断
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <start+0x18>)
 8000f7a:	f001 fbb7 	bl	80026ec <HAL_TIM_Base_Start_IT>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000098 	.word	0x20000098

08000f88 <get_num>:

unsigned int get_num(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
   unsigned int  num,dta;
   HAL_TIM_Base_Stop_IT (&htim2);       //关闭定时器更新中断
 8000f8e:	481a      	ldr	r0, [pc, #104]	; (8000ff8 <get_num+0x70>)
 8000f90:	f001 fc0c 	bl	80027ac <HAL_TIM_Base_Stop_IT>
   num = __HAL_TIM_GetCounter(&htim2);  //获得计数值
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <get_num+0x70>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	607b      	str	r3, [r7, #4]
   dta = num*0.1*34/2;                     //cm为单位
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fa85 	bl	80004ac <__aeabi_ui2d>
 8000fa2:	a313      	add	r3, pc, #76	; (adr r3, 8000ff0 <get_num+0x68>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fafa 	bl	80005a0 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <get_num+0x74>)
 8000fba:	f7ff faf1 	bl	80005a0 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fce:	f7ff fc11 	bl	80007f4 <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fcf3 	bl	80009c4 <__aeabi_d2uiz>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	603b      	str	r3, [r7, #0]
    return dta;
 8000fe2:	683b      	ldr	r3, [r7, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	f3af 8000 	nop.w
 8000ff0:	9999999a 	.word	0x9999999a
 8000ff4:	3fb99999 	.word	0x3fb99999
 8000ff8:	20000098 	.word	0x20000098
 8000ffc:	40410000 	.word	0x40410000

08001000 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART3_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART3_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART3_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART3_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART3_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART3_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART3_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART3_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART3_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART3_UART_Init+0x4c>)
 8001038:	f001 ff6e 	bl	8002f18 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f7ff fe00 	bl	8000c46 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000124 	.word	0x20000124
 8001050:	40004800 	.word	0x40004800

08001054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a42      	ldr	r2, [pc, #264]	; (8001178 <HAL_UART_MspInit+0x124>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d17d      	bne.n	8001170 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <HAL_UART_MspInit+0x128>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	4a40      	ldr	r2, [pc, #256]	; (800117c <HAL_UART_MspInit+0x128>)
 800107a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107e:	61d3      	str	r3, [r2, #28]
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <HAL_UART_MspInit+0x128>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b3b      	ldr	r3, [pc, #236]	; (800117c <HAL_UART_MspInit+0x128>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a3a      	ldr	r2, [pc, #232]	; (800117c <HAL_UART_MspInit+0x128>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b38      	ldr	r3, [pc, #224]	; (800117c <HAL_UART_MspInit+0x128>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	4831      	ldr	r0, [pc, #196]	; (8001180 <HAL_UART_MspInit+0x12c>)
 80010ba:	f000 fce9 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	482b      	ldr	r0, [pc, #172]	; (8001180 <HAL_UART_MspInit+0x12c>)
 80010d4:	f000 fcdc 	bl	8001a90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_UART_MspInit+0x130>)
 80010da:	4a2b      	ldr	r2, [pc, #172]	; (8001188 <HAL_UART_MspInit+0x134>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_UART_MspInit+0x130>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_UART_MspInit+0x130>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_UART_MspInit+0x130>)
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_UART_MspInit+0x130>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_UART_MspInit+0x130>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80010fc:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_UART_MspInit+0x130>)
 80010fe:	2220      	movs	r2, #32
 8001100:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_UART_MspInit+0x130>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001108:	481e      	ldr	r0, [pc, #120]	; (8001184 <HAL_UART_MspInit+0x130>)
 800110a:	f000 fa0f 	bl	800152c <HAL_DMA_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001114:	f7ff fd97 	bl	8000c46 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_UART_MspInit+0x130>)
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
 800111e:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_UART_MspInit+0x130>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0x138>)
 8001126:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <HAL_UART_MspInit+0x13c>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x138>)
 800112c:	2210      	movs	r2, #16
 800112e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_UART_MspInit+0x138>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x138>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_UART_MspInit+0x138>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_UART_MspInit+0x138>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_UART_MspInit+0x138>)
 800114a:	2220      	movs	r2, #32
 800114c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_UART_MspInit+0x138>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <HAL_UART_MspInit+0x138>)
 8001156:	f000 f9e9 	bl	800152c <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001160:	f7ff fd71 	bl	8000c46 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <HAL_UART_MspInit+0x138>)
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_UART_MspInit+0x138>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004800 	.word	0x40004800
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00
 8001184:	200000e0 	.word	0x200000e0
 8001188:	40020030 	.word	0x40020030
 800118c:	20000168 	.word	0x20000168
 8001190:	4002001c 	.word	0x4002001c

08001194 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800119c:	1d39      	adds	r1, r7, #4
 800119e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a2:	2201      	movs	r2, #1
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <__io_putchar+0x20>)
 80011a6:	f001 ff04 	bl	8002fb2 <HAL_UART_Transmit>
  return ch;
 80011aa:	687b      	ldr	r3, [r7, #4]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000124 	.word	0x20000124

080011b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011de:	f7ff fe4f 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f002 f857 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e6:	f7ff fcb5 	bl	8000b54 <main>
  bx lr
 80011ea:	4770      	bx	lr
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011f4:	080043b0 	.word	0x080043b0
  ldr r2, =_sbss
 80011f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011fc:	200001c0 	.word	0x200001c0

08001200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_2_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_Init+0x28>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_Init+0x28>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f947 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	200f      	movs	r0, #15
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fd16 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f95f 	bl	8001512 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f927 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_IncTick+0x1c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_IncTick+0x20>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <HAL_IncTick+0x20>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200001ac 	.word	0x200001ac

080012b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	200001ac 	.word	0x200001ac

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffe0 	bl	80012b4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4906      	ldr	r1, [pc, #24]	; (80013a8 <__NVIC_EnableIRQ+0x34>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff90 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff2d 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff42 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff90 	bl	8001400 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5f 	bl	80013ac <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff35 	bl	8001374 <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e059      	b.n	80015f6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_DMA_Init+0xd4>)
 800154a:	429a      	cmp	r2, r3
 800154c:	d80f      	bhi.n	800156e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <HAL_DMA_Init+0xd8>)
 8001556:	4413      	add	r3, r2
 8001558:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <HAL_DMA_Init+0xdc>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	009a      	lsls	r2, r3, #2
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a28      	ldr	r2, [pc, #160]	; (800160c <HAL_DMA_Init+0xe0>)
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
 800156c:	e00e      	b.n	800158c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_DMA_Init+0xe4>)
 8001576:	4413      	add	r3, r2
 8001578:	4a23      	ldr	r2, [pc, #140]	; (8001608 <HAL_DMA_Init+0xdc>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a22      	ldr	r2, [pc, #136]	; (8001614 <HAL_DMA_Init+0xe8>)
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40020407 	.word	0x40020407
 8001604:	bffdfff8 	.word	0xbffdfff8
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	40020000 	.word	0x40020000
 8001610:	bffdfbf8 	.word	0xbffdfbf8
 8001614:	40020400 	.word	0x40020400

08001618 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	2204      	movs	r2, #4
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80d6 	beq.w	80017ee <HAL_DMA_IRQHandler+0x1d6>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80d0 	beq.w	80017ee <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0204 	bic.w	r2, r2, #4
 800166a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b9b      	ldr	r3, [pc, #620]	; (80018e0 <HAL_DMA_IRQHandler+0x2c8>)
 8001674:	429a      	cmp	r2, r3
 8001676:	d958      	bls.n	800172a <HAL_DMA_IRQHandler+0x112>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a99      	ldr	r2, [pc, #612]	; (80018e4 <HAL_DMA_IRQHandler+0x2cc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d04f      	beq.n	8001722 <HAL_DMA_IRQHandler+0x10a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a98      	ldr	r2, [pc, #608]	; (80018e8 <HAL_DMA_IRQHandler+0x2d0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d048      	beq.n	800171e <HAL_DMA_IRQHandler+0x106>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a96      	ldr	r2, [pc, #600]	; (80018ec <HAL_DMA_IRQHandler+0x2d4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d040      	beq.n	8001718 <HAL_DMA_IRQHandler+0x100>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a95      	ldr	r2, [pc, #596]	; (80018f0 <HAL_DMA_IRQHandler+0x2d8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d038      	beq.n	8001712 <HAL_DMA_IRQHandler+0xfa>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a93      	ldr	r2, [pc, #588]	; (80018f4 <HAL_DMA_IRQHandler+0x2dc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d030      	beq.n	800170c <HAL_DMA_IRQHandler+0xf4>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a92      	ldr	r2, [pc, #584]	; (80018f8 <HAL_DMA_IRQHandler+0x2e0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d028      	beq.n	8001706 <HAL_DMA_IRQHandler+0xee>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a89      	ldr	r2, [pc, #548]	; (80018e0 <HAL_DMA_IRQHandler+0x2c8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d020      	beq.n	8001700 <HAL_DMA_IRQHandler+0xe8>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a8e      	ldr	r2, [pc, #568]	; (80018fc <HAL_DMA_IRQHandler+0x2e4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d019      	beq.n	80016fc <HAL_DMA_IRQHandler+0xe4>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a8c      	ldr	r2, [pc, #560]	; (8001900 <HAL_DMA_IRQHandler+0x2e8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d012      	beq.n	80016f8 <HAL_DMA_IRQHandler+0xe0>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a8b      	ldr	r2, [pc, #556]	; (8001904 <HAL_DMA_IRQHandler+0x2ec>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00a      	beq.n	80016f2 <HAL_DMA_IRQHandler+0xda>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a89      	ldr	r2, [pc, #548]	; (8001908 <HAL_DMA_IRQHandler+0x2f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d102      	bne.n	80016ec <HAL_DMA_IRQHandler+0xd4>
 80016e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ea:	e01b      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 80016ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016f0:	e018      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	e015      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	e013      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 80016fc:	2304      	movs	r3, #4
 80016fe:	e011      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 8001700:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001704:	e00e      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 8001706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800170a:	e00b      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 800170c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001710:	e008      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 8001712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001716:	e005      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 8001718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171c:	e002      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	e000      	b.n	8001724 <HAL_DMA_IRQHandler+0x10c>
 8001722:	2304      	movs	r3, #4
 8001724:	4a79      	ldr	r2, [pc, #484]	; (800190c <HAL_DMA_IRQHandler+0x2f4>)
 8001726:	6053      	str	r3, [r2, #4]
 8001728:	e057      	b.n	80017da <HAL_DMA_IRQHandler+0x1c2>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a6d      	ldr	r2, [pc, #436]	; (80018e4 <HAL_DMA_IRQHandler+0x2cc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d04f      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x1bc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6b      	ldr	r2, [pc, #428]	; (80018e8 <HAL_DMA_IRQHandler+0x2d0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d048      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x1b8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6a      	ldr	r2, [pc, #424]	; (80018ec <HAL_DMA_IRQHandler+0x2d4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d040      	beq.n	80017ca <HAL_DMA_IRQHandler+0x1b2>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a68      	ldr	r2, [pc, #416]	; (80018f0 <HAL_DMA_IRQHandler+0x2d8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d038      	beq.n	80017c4 <HAL_DMA_IRQHandler+0x1ac>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a67      	ldr	r2, [pc, #412]	; (80018f4 <HAL_DMA_IRQHandler+0x2dc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d030      	beq.n	80017be <HAL_DMA_IRQHandler+0x1a6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a65      	ldr	r2, [pc, #404]	; (80018f8 <HAL_DMA_IRQHandler+0x2e0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d028      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x1a0>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5d      	ldr	r2, [pc, #372]	; (80018e0 <HAL_DMA_IRQHandler+0x2c8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d020      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x19a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a61      	ldr	r2, [pc, #388]	; (80018fc <HAL_DMA_IRQHandler+0x2e4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_DMA_IRQHandler+0x196>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a60      	ldr	r2, [pc, #384]	; (8001900 <HAL_DMA_IRQHandler+0x2e8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d012      	beq.n	80017aa <HAL_DMA_IRQHandler+0x192>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <HAL_DMA_IRQHandler+0x2ec>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00a      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x18c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_DMA_IRQHandler+0x2f0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d102      	bne.n	800179e <HAL_DMA_IRQHandler+0x186>
 8001798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179c:	e01b      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 800179e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017a2:	e018      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a8:	e015      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017aa:	2340      	movs	r3, #64	; 0x40
 80017ac:	e013      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e011      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017b6:	e00e      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017bc:	e00b      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017c2:	e008      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c8:	e005      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ce:	e002      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	e000      	b.n	80017d6 <HAL_DMA_IRQHandler+0x1be>
 80017d4:	2304      	movs	r3, #4
 80017d6:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_DMA_IRQHandler+0x2f8>)
 80017d8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8136 	beq.w	8001a50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017ec:	e130      	b.n	8001a50 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2202      	movs	r2, #2
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80f8 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x3d8>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80f2 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10b      	bne.n	8001832 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 020a 	bic.w	r2, r2, #10
 8001828:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_DMA_IRQHandler+0x2c8>)
 800183a:	429a      	cmp	r2, r3
 800183c:	d973      	bls.n	8001926 <HAL_DMA_IRQHandler+0x30e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <HAL_DMA_IRQHandler+0x2cc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d06a      	beq.n	800191e <HAL_DMA_IRQHandler+0x306>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <HAL_DMA_IRQHandler+0x2d0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d063      	beq.n	800191a <HAL_DMA_IRQHandler+0x302>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a25      	ldr	r2, [pc, #148]	; (80018ec <HAL_DMA_IRQHandler+0x2d4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d05b      	beq.n	8001914 <HAL_DMA_IRQHandler+0x2fc>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <HAL_DMA_IRQHandler+0x2d8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d038      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x2c0>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <HAL_DMA_IRQHandler+0x2dc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d030      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x2ba>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <HAL_DMA_IRQHandler+0x2e0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d028      	beq.n	80018cc <HAL_DMA_IRQHandler+0x2b4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <HAL_DMA_IRQHandler+0x2c8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d020      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x2ae>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_DMA_IRQHandler+0x2e4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x2aa>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_DMA_IRQHandler+0x2e8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d012      	beq.n	80018be <HAL_DMA_IRQHandler+0x2a6>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_DMA_IRQHandler+0x2ec>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00a      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x2a0>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_DMA_IRQHandler+0x2f0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d102      	bne.n	80018b2 <HAL_DMA_IRQHandler+0x29a>
 80018ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b0:	e036      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b6:	e033      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018bc:	e030      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018be:	2320      	movs	r3, #32
 80018c0:	e02e      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e02c      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ca:	e029      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018d0:	e026      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d6:	e023      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018dc:	e020      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 80018de:	bf00      	nop
 80018e0:	40020080 	.word	0x40020080
 80018e4:	40020008 	.word	0x40020008
 80018e8:	4002001c 	.word	0x4002001c
 80018ec:	40020030 	.word	0x40020030
 80018f0:	40020044 	.word	0x40020044
 80018f4:	40020058 	.word	0x40020058
 80018f8:	4002006c 	.word	0x4002006c
 80018fc:	40020408 	.word	0x40020408
 8001900:	4002041c 	.word	0x4002041c
 8001904:	40020430 	.word	0x40020430
 8001908:	40020444 	.word	0x40020444
 800190c:	40020400 	.word	0x40020400
 8001910:	40020000 	.word	0x40020000
 8001914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001918:	e002      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 800191a:	2320      	movs	r3, #32
 800191c:	e000      	b.n	8001920 <HAL_DMA_IRQHandler+0x308>
 800191e:	2302      	movs	r3, #2
 8001920:	4a4e      	ldr	r2, [pc, #312]	; (8001a5c <HAL_DMA_IRQHandler+0x444>)
 8001922:	6053      	str	r3, [r2, #4]
 8001924:	e057      	b.n	80019d6 <HAL_DMA_IRQHandler+0x3be>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a4d      	ldr	r2, [pc, #308]	; (8001a60 <HAL_DMA_IRQHandler+0x448>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d04f      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x3b8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a4b      	ldr	r2, [pc, #300]	; (8001a64 <HAL_DMA_IRQHandler+0x44c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d048      	beq.n	80019cc <HAL_DMA_IRQHandler+0x3b4>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <HAL_DMA_IRQHandler+0x450>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d040      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x3ae>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_DMA_IRQHandler+0x454>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d038      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x3a8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <HAL_DMA_IRQHandler+0x458>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d030      	beq.n	80019ba <HAL_DMA_IRQHandler+0x3a2>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a45      	ldr	r2, [pc, #276]	; (8001a74 <HAL_DMA_IRQHandler+0x45c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d028      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x39c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a44      	ldr	r2, [pc, #272]	; (8001a78 <HAL_DMA_IRQHandler+0x460>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d020      	beq.n	80019ae <HAL_DMA_IRQHandler+0x396>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a42      	ldr	r2, [pc, #264]	; (8001a7c <HAL_DMA_IRQHandler+0x464>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_DMA_IRQHandler+0x392>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a41      	ldr	r2, [pc, #260]	; (8001a80 <HAL_DMA_IRQHandler+0x468>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d012      	beq.n	80019a6 <HAL_DMA_IRQHandler+0x38e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3f      	ldr	r2, [pc, #252]	; (8001a84 <HAL_DMA_IRQHandler+0x46c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00a      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x388>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3e      	ldr	r2, [pc, #248]	; (8001a88 <HAL_DMA_IRQHandler+0x470>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d102      	bne.n	800199a <HAL_DMA_IRQHandler+0x382>
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	e01b      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 800199a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199e:	e018      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a4:	e015      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019a6:	2320      	movs	r3, #32
 80019a8:	e013      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e011      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b2:	e00e      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b8:	e00b      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019be:	e008      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c4:	e005      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ca:	e002      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019cc:	2320      	movs	r3, #32
 80019ce:	e000      	b.n	80019d2 <HAL_DMA_IRQHandler+0x3ba>
 80019d0:	2302      	movs	r3, #2
 80019d2:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <HAL_DMA_IRQHandler+0x474>)
 80019d4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d034      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019ee:	e02f      	b.n	8001a50 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2208      	movs	r2, #8
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d028      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x43a>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d023      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 020e 	bic.w	r2, r2, #14
 8001a18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
    }
  }
  return;
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
}
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40020008 	.word	0x40020008
 8001a64:	4002001c 	.word	0x4002001c
 8001a68:	40020030 	.word	0x40020030
 8001a6c:	40020044 	.word	0x40020044
 8001a70:	40020058 	.word	0x40020058
 8001a74:	4002006c 	.word	0x4002006c
 8001a78:	40020080 	.word	0x40020080
 8001a7c:	40020408 	.word	0x40020408
 8001a80:	4002041c 	.word	0x4002041c
 8001a84:	40020430 	.word	0x40020430
 8001a88:	40020444 	.word	0x40020444
 8001a8c:	40020000 	.word	0x40020000

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b08b      	sub	sp, #44	; 0x2c
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	e179      	b.n	8001d98 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8168 	bne.w	8001d92 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4aa0      	ldr	r2, [pc, #640]	; (8001d48 <HAL_GPIO_Init+0x2b8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d05e      	beq.n	8001b8a <HAL_GPIO_Init+0xfa>
 8001acc:	4a9e      	ldr	r2, [pc, #632]	; (8001d48 <HAL_GPIO_Init+0x2b8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d875      	bhi.n	8001bbe <HAL_GPIO_Init+0x12e>
 8001ad2:	4a9e      	ldr	r2, [pc, #632]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d058      	beq.n	8001b8a <HAL_GPIO_Init+0xfa>
 8001ad8:	4a9c      	ldr	r2, [pc, #624]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d86f      	bhi.n	8001bbe <HAL_GPIO_Init+0x12e>
 8001ade:	4a9c      	ldr	r2, [pc, #624]	; (8001d50 <HAL_GPIO_Init+0x2c0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d052      	beq.n	8001b8a <HAL_GPIO_Init+0xfa>
 8001ae4:	4a9a      	ldr	r2, [pc, #616]	; (8001d50 <HAL_GPIO_Init+0x2c0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d869      	bhi.n	8001bbe <HAL_GPIO_Init+0x12e>
 8001aea:	4a9a      	ldr	r2, [pc, #616]	; (8001d54 <HAL_GPIO_Init+0x2c4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d04c      	beq.n	8001b8a <HAL_GPIO_Init+0xfa>
 8001af0:	4a98      	ldr	r2, [pc, #608]	; (8001d54 <HAL_GPIO_Init+0x2c4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d863      	bhi.n	8001bbe <HAL_GPIO_Init+0x12e>
 8001af6:	4a98      	ldr	r2, [pc, #608]	; (8001d58 <HAL_GPIO_Init+0x2c8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d046      	beq.n	8001b8a <HAL_GPIO_Init+0xfa>
 8001afc:	4a96      	ldr	r2, [pc, #600]	; (8001d58 <HAL_GPIO_Init+0x2c8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d85d      	bhi.n	8001bbe <HAL_GPIO_Init+0x12e>
 8001b02:	2b12      	cmp	r3, #18
 8001b04:	d82a      	bhi.n	8001b5c <HAL_GPIO_Init+0xcc>
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d859      	bhi.n	8001bbe <HAL_GPIO_Init+0x12e>
 8001b0a:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <HAL_GPIO_Init+0x80>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b8b 	.word	0x08001b8b
 8001b14:	08001b65 	.word	0x08001b65
 8001b18:	08001b77 	.word	0x08001b77
 8001b1c:	08001bb9 	.word	0x08001bb9
 8001b20:	08001bbf 	.word	0x08001bbf
 8001b24:	08001bbf 	.word	0x08001bbf
 8001b28:	08001bbf 	.word	0x08001bbf
 8001b2c:	08001bbf 	.word	0x08001bbf
 8001b30:	08001bbf 	.word	0x08001bbf
 8001b34:	08001bbf 	.word	0x08001bbf
 8001b38:	08001bbf 	.word	0x08001bbf
 8001b3c:	08001bbf 	.word	0x08001bbf
 8001b40:	08001bbf 	.word	0x08001bbf
 8001b44:	08001bbf 	.word	0x08001bbf
 8001b48:	08001bbf 	.word	0x08001bbf
 8001b4c:	08001bbf 	.word	0x08001bbf
 8001b50:	08001bbf 	.word	0x08001bbf
 8001b54:	08001b6d 	.word	0x08001b6d
 8001b58:	08001b81 	.word	0x08001b81
 8001b5c:	4a7f      	ldr	r2, [pc, #508]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b62:	e02c      	b.n	8001bbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e029      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	3304      	adds	r3, #4
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e024      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e01f      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	330c      	adds	r3, #12
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e01a      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b92:	2304      	movs	r3, #4
 8001b94:	623b      	str	r3, [r7, #32]
          break;
 8001b96:	e013      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	611a      	str	r2, [r3, #16]
          break;
 8001baa:	e009      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bac:	2308      	movs	r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	615a      	str	r2, [r3, #20]
          break;
 8001bb6:	e003      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x130>
          break;
 8001bbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d801      	bhi.n	8001bca <HAL_GPIO_Init+0x13a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	e001      	b.n	8001bce <HAL_GPIO_Init+0x13e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2bff      	cmp	r3, #255	; 0xff
 8001bd4:	d802      	bhi.n	8001bdc <HAL_GPIO_Init+0x14c>
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0x152>
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	3b08      	subs	r3, #8
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	210f      	movs	r1, #15
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	6a39      	ldr	r1, [r7, #32]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80c1 	beq.w	8001d92 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_GPIO_Init+0x2d0>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_GPIO_Init+0x2d0>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c28:	4a4e      	ldr	r2, [pc, #312]	; (8001d64 <HAL_GPIO_Init+0x2d4>)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a46      	ldr	r2, [pc, #280]	; (8001d68 <HAL_GPIO_Init+0x2d8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d01f      	beq.n	8001c94 <HAL_GPIO_Init+0x204>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a45      	ldr	r2, [pc, #276]	; (8001d6c <HAL_GPIO_Init+0x2dc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d019      	beq.n	8001c90 <HAL_GPIO_Init+0x200>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <HAL_GPIO_Init+0x2e0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_GPIO_Init+0x1fc>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a43      	ldr	r2, [pc, #268]	; (8001d74 <HAL_GPIO_Init+0x2e4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00d      	beq.n	8001c88 <HAL_GPIO_Init+0x1f8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a42      	ldr	r2, [pc, #264]	; (8001d78 <HAL_GPIO_Init+0x2e8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d007      	beq.n	8001c84 <HAL_GPIO_Init+0x1f4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a41      	ldr	r2, [pc, #260]	; (8001d7c <HAL_GPIO_Init+0x2ec>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_GPIO_Init+0x1f0>
 8001c7c:	2305      	movs	r3, #5
 8001c7e:	e00a      	b.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c80:	2306      	movs	r3, #6
 8001c82:	e008      	b.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e006      	b.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e004      	b.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e002      	b.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_GPIO_Init+0x206>
 8001c94:	2300      	movs	r3, #0
 8001c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c98:	f002 0203 	and.w	r2, r2, #3
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	4093      	lsls	r3, r2
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ca6:	492f      	ldr	r1, [pc, #188]	; (8001d64 <HAL_GPIO_Init+0x2d4>)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	492e      	ldr	r1, [pc, #184]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	492a      	ldr	r1, [pc, #168]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4924      	ldr	r1, [pc, #144]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4920      	ldr	r1, [pc, #128]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	491a      	ldr	r1, [pc, #104]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4916      	ldr	r1, [pc, #88]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d025      	beq.n	8001d84 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4910      	ldr	r1, [pc, #64]	; (8001d80 <HAL_GPIO_Init+0x2f0>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
 8001d44:	e025      	b.n	8001d92 <HAL_GPIO_Init+0x302>
 8001d46:	bf00      	nop
 8001d48:	10320000 	.word	0x10320000
 8001d4c:	10310000 	.word	0x10310000
 8001d50:	10220000 	.word	0x10220000
 8001d54:	10210000 	.word	0x10210000
 8001d58:	10120000 	.word	0x10120000
 8001d5c:	10110000 	.word	0x10110000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010000 	.word	0x40010000
 8001d68:	40010800 	.word	0x40010800
 8001d6c:	40010c00 	.word	0x40010c00
 8001d70:	40011000 	.word	0x40011000
 8001d74:	40011400 	.word	0x40011400
 8001d78:	40011800 	.word	0x40011800
 8001d7c:	40011c00 	.word	0x40011c00
 8001d80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	4909      	ldr	r1, [pc, #36]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	3301      	adds	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f47f ae7e 	bne.w	8001aa4 <HAL_GPIO_Init+0x14>
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	372c      	adds	r7, #44	; 0x2c
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	807b      	strh	r3, [r7, #2]
 8001df2:	4613      	mov	r3, r2
 8001df4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df6:	787b      	ldrb	r3, [r7, #1]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	611a      	str	r2, [r3, #16]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e26c      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8087 	beq.w	8001f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e38:	4b92      	ldr	r3, [pc, #584]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d00c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e44:	4b8f      	ldr	r3, [pc, #572]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d112      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5e>
 8001e50:	4b8c      	ldr	r3, [pc, #560]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d10b      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d06c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x12c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d168      	bne.n	8001f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e246      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x76>
 8001e80:	4b80      	ldr	r3, [pc, #512]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a7f      	ldr	r2, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e02e      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x98>
 8001e96:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7a      	ldr	r2, [pc, #488]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b78      	ldr	r3, [pc, #480]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a77      	ldr	r2, [pc, #476]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01d      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xbc>
 8001eba:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a71      	ldr	r2, [pc, #452]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6e      	ldr	r2, [pc, #440]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0xd4>
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a67      	ldr	r2, [pc, #412]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f9de 	bl	80012b4 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff f9da 	bl	80012b4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e1fa      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0xe4>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f9ca 	bl	80012b4 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f9c6 	bl	80012b4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1e6      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x10c>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d063      	beq.n	800201a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d11c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x18c>
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d116      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x176>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e1ba      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4939      	ldr	r1, [pc, #228]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	e03a      	b.n	800201a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fac:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f97f 	bl	80012b4 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff f97b 	bl	80012b4 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e19b      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4927      	ldr	r1, [pc, #156]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f95e 	bl	80012b4 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f95a 	bl	80012b4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e17a      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03a      	beq.n	800209c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_RCC_OscConfig+0x274>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff f93e 	bl	80012b4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f93a 	bl	80012b4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e15a      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_RCC_OscConfig+0x26c>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f000 fad8 	bl	8002610 <RCC_Delay>
 8002060:	e01c      	b.n	800209c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_OscConfig+0x274>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7ff f924 	bl	80012b4 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206e:	e00f      	b.n	8002090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff f920 	bl	80012b4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d908      	bls.n	8002090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e140      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	42420000 	.word	0x42420000
 800208c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b9e      	ldr	r3, [pc, #632]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e9      	bne.n	8002070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80a6 	beq.w	80021f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b97      	ldr	r3, [pc, #604]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10d      	bne.n	80020d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b94      	ldr	r3, [pc, #592]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a93      	ldr	r2, [pc, #588]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b91      	ldr	r3, [pc, #580]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b8e      	ldr	r3, [pc, #568]	; (8002310 <HAL_RCC_OscConfig+0x4f8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b8b      	ldr	r3, [pc, #556]	; (8002310 <HAL_RCC_OscConfig+0x4f8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a8a      	ldr	r2, [pc, #552]	; (8002310 <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7ff f8e1 	bl	80012b4 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7ff f8dd 	bl	80012b4 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0fd      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x4f8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x312>
 800211c:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e02d      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x334>
 8002132:	4b76      	ldr	r3, [pc, #472]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a75      	ldr	r2, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b73      	ldr	r3, [pc, #460]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a72      	ldr	r2, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	e01c      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b05      	cmp	r3, #5
 8002152:	d10c      	bne.n	800216e <HAL_RCC_OscConfig+0x356>
 8002154:	4b6d      	ldr	r3, [pc, #436]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a6c      	ldr	r2, [pc, #432]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	4b6a      	ldr	r3, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a69      	ldr	r2, [pc, #420]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	e00b      	b.n	8002186 <HAL_RCC_OscConfig+0x36e>
 800216e:	4b67      	ldr	r3, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4a66      	ldr	r2, [pc, #408]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a63      	ldr	r2, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d015      	beq.n	80021ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff f891 	bl	80012b4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7ff f88d 	bl	80012b4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0ab      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	4b57      	ldr	r3, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ee      	beq.n	8002196 <HAL_RCC_OscConfig+0x37e>
 80021b8:	e014      	b.n	80021e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff f87b 	bl	80012b4 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7ff f877 	bl	80012b4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e095      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ee      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b48      	ldr	r3, [pc, #288]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8081 	beq.w	8002302 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d061      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d146      	bne.n	80022a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <HAL_RCC_OscConfig+0x4fc>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff f84b 	bl	80012b4 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f847 	bl	80012b4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e067      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d108      	bne.n	800225c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	492d      	ldr	r1, [pc, #180]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a19      	ldr	r1, [r3, #32]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	430b      	orrs	r3, r1
 800226e:	4927      	ldr	r1, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x4fc>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff f81b 	bl	80012b4 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff f817 	bl	80012b4 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e037      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x46a>
 80022a0:	e02f      	b.n	8002302 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <HAL_RCC_OscConfig+0x4fc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff f804 	bl	80012b4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f800 	bl	80012b4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e020      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x498>
 80022ce:	e018      	b.n	8002302 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e013      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x4f4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	40007000 	.word	0x40007000
 8002314:	42420060 	.word	0x42420060

08002318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d0      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4965      	ldr	r1, [pc, #404]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a58      	ldr	r2, [pc, #352]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238c:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a52      	ldr	r2, [pc, #328]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002396:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d040      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e073      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06b      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4936      	ldr	r1, [pc, #216]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe ff54 	bl	80012b4 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe ff50 	bl	80012b4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e053      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d210      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4922      	ldr	r1, [pc, #136]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024a6:	f000 f821 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1cc>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe feb2 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	080042f8 	.word	0x080042f8
 80024e4:	20000000 	.word	0x20000000
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b490      	push	{r4, r7}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024f2:	4b2a      	ldr	r3, [pc, #168]	; (800259c <HAL_RCC_GetSysClockFreq+0xb0>)
 80024f4:	1d3c      	adds	r4, r7, #4
 80024f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024fc:	f240 2301 	movw	r3, #513	; 0x201
 8002500:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b04      	cmp	r3, #4
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x40>
 8002526:	2b08      	cmp	r3, #8
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x46>
 800252a:	e02d      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800252e:	623b      	str	r3, [r7, #32]
      break;
 8002530:	e02d      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	0c9b      	lsrs	r3, r3, #18
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800253e:	4413      	add	r3, r2
 8002540:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002544:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c5b      	lsrs	r3, r3, #17
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800255e:	4413      	add	r3, r2
 8002560:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002564:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256a:	fb02 f203 	mul.w	r2, r2, r3
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
 8002576:	e004      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800257c:	fb02 f303 	mul.w	r3, r2, r3
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	623b      	str	r3, [r7, #32]
      break;
 8002586:	e002      	b.n	800258e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258a:	623b      	str	r3, [r7, #32]
      break;
 800258c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800258e:	6a3b      	ldr	r3, [r7, #32]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bc90      	pop	{r4, r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	080042e8 	.word	0x080042e8
 80025a0:	40021000 	.word	0x40021000
 80025a4:	007a1200 	.word	0x007a1200
 80025a8:	003d0900 	.word	0x003d0900

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_RCC_GetHCLKFreq+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	20000000 	.word	0x20000000

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c4:	f7ff fff2 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08004308 	.word	0x08004308

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ec:	f7ff ffde 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0adb      	lsrs	r3, r3, #11
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	08004308 	.word	0x08004308

08002610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <RCC_Delay+0x34>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <RCC_Delay+0x38>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0a5b      	lsrs	r3, r3, #9
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800262c:	bf00      	nop
  }
  while (Delay --);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	60fa      	str	r2, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <RCC_Delay+0x1c>
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000000 	.word	0x20000000
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e041      	b.n	80026e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fc56 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f000 fab6 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d001      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e044      	b.n	800278e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_TIM_Base_Start_IT+0xac>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x6c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1c      	ldr	r2, [pc, #112]	; (800279c <HAL_TIM_Base_Start_IT+0xb0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x6c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d00e      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x6c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x6c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_TIM_Base_Start_IT+0xb8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x6c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d111      	bne.n	800277c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b06      	cmp	r3, #6
 8002768:	d010      	beq.n	800278c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	e007      	b.n	800278c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40012c00 	.word	0x40012c00
 800279c:	40013400 	.word	0x40013400
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40000800 	.word	0x40000800
 80027a8:	40000c00 	.word	0x40000c00

080027ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a1a      	ldr	r2, [r3, #32]
 80027ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_TIM_Base_Stop_IT+0x48>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	f240 4344 	movw	r3, #1092	; 0x444
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_TIM_Base_Stop_IT+0x48>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d122      	bne.n	8002864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d11b      	bne.n	8002864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0202 	mvn.w	r2, #2
 8002834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9ba 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f9ad 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f9bc 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b04      	cmp	r3, #4
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0204 	mvn.w	r2, #4
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f990 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f983 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f992 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d11b      	bne.n	800290c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0208 	mvn.w	r2, #8
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f966 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f959 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f968 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	2b10      	cmp	r3, #16
 8002918:	d122      	bne.n	8002960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b10      	cmp	r3, #16
 8002926:	d11b      	bne.n	8002960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0210 	mvn.w	r2, #16
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2208      	movs	r2, #8
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f93c 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f92f 	bl	8002bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f93e 	bl	8002bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0201 	mvn.w	r2, #1
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f90a 	bl	8002ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b80      	cmp	r3, #128	; 0x80
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 faa7 	bl	8002f06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d107      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f902 	bl	8002be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0220 	mvn.w	r2, #32
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fa72 	bl	8002ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_TIM_ConfigClockSource+0x18>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e0b3      	b.n	8002b98 <HAL_TIM_ConfigClockSource+0x180>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a68:	d03e      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0xd0>
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6e:	f200 8087 	bhi.w	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a76:	f000 8085 	beq.w	8002b84 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d87f      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a80:	2b70      	cmp	r3, #112	; 0x70
 8002a82:	d01a      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0xa2>
 8002a84:	2b70      	cmp	r3, #112	; 0x70
 8002a86:	d87b      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a88:	2b60      	cmp	r3, #96	; 0x60
 8002a8a:	d050      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x116>
 8002a8c:	2b60      	cmp	r3, #96	; 0x60
 8002a8e:	d877      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a90:	2b50      	cmp	r3, #80	; 0x50
 8002a92:	d03c      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xf6>
 8002a94:	2b50      	cmp	r3, #80	; 0x50
 8002a96:	d873      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d058      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x136>
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d86f      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	d064      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
 8002aa4:	2b30      	cmp	r3, #48	; 0x30
 8002aa6:	d86b      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d060      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d867      	bhi.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05c      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d05a      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ab8:	e062      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f000 f988 	bl	8002dde <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002adc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	609a      	str	r2, [r3, #8]
      break;
 8002ae6:	e04e      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6899      	ldr	r1, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f000 f971 	bl	8002dde <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b0a:	609a      	str	r2, [r3, #8]
      break;
 8002b0c:	e03b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f000 f8e8 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2150      	movs	r1, #80	; 0x50
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f93f 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b2c:	e02b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f000 f906 	bl	8002d4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2160      	movs	r1, #96	; 0x60
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f92f 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b4c:	e01b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f000 f8c8 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f91f 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b6c:	e00b      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f000 f916 	bl	8002daa <TIM_ITRx_SetConfig>
        break;
 8002b7e:	e002      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b80:	bf00      	nop
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a33      	ldr	r2, [pc, #204]	; (8002cdc <TIM_Base_SetConfig+0xe0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a32      	ldr	r2, [pc, #200]	; (8002ce0 <TIM_Base_SetConfig+0xe4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00f      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a2f      	ldr	r2, [pc, #188]	; (8002ce4 <TIM_Base_SetConfig+0xe8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ce8 <TIM_Base_SetConfig+0xec>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a2d      	ldr	r2, [pc, #180]	; (8002cec <TIM_Base_SetConfig+0xf0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <TIM_Base_SetConfig+0xe0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <TIM_Base_SetConfig+0x82>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <TIM_Base_SetConfig+0xe4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00f      	beq.n	8002c7e <TIM_Base_SetConfig+0x82>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d00b      	beq.n	8002c7e <TIM_Base_SetConfig+0x82>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <TIM_Base_SetConfig+0xe8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <TIM_Base_SetConfig+0x82>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <TIM_Base_SetConfig+0xec>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_Base_SetConfig+0x82>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <TIM_Base_SetConfig+0xf0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d108      	bne.n	8002c90 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <TIM_Base_SetConfig+0xe0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <TIM_Base_SetConfig+0xc8>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <TIM_Base_SetConfig+0xe4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	615a      	str	r2, [r3, #20]
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40013400 	.word	0x40013400
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00

08002cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 030a 	bic.w	r3, r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f023 0210 	bic.w	r2, r3, #16
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	031b      	lsls	r3, r3, #12
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	609a      	str	r2, [r3, #8]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e050      	b.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d018      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d00e      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40013400 	.word	0x40013400
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00

08002ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e03f      	b.n	8002faa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe f888 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f905 	bl	800316c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b08a      	sub	sp, #40	; 0x28
 8002fb6:	af02      	add	r7, sp, #8
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d17c      	bne.n	80030cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_UART_Transmit+0x2c>
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e075      	b.n	80030ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_UART_Transmit+0x3e>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e06e      	b.n	80030ce <HAL_UART_Transmit+0x11c>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2221      	movs	r2, #33	; 0x21
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003006:	f7fe f955 	bl	80012b4 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Transmit+0x82>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003044:	e02a      	b.n	800309c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f840 	bl	80030d6 <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e036      	b.n	80030ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	3302      	adds	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	e007      	b.n	800308e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1cf      	bne.n	8003046 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f810 	bl	80030d6 <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e006      	b.n	80030ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3720      	adds	r7, #32
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	4613      	mov	r3, r2
 80030e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e6:	e02c      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d028      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <UART_WaitOnFlagUntilTimeout+0x30>
 80030f6:	f7fe f8dd 	bl	80012b4 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	429a      	cmp	r2, r3
 8003104:	d21d      	bcs.n	8003142 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003114:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e00f      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d0c3      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031a6:	f023 030c 	bic.w	r3, r3, #12
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <UART_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7ff fa08 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	e002      	b.n	80031e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7ff f9f0 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 80031e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	4a22      	ldr	r2, [pc, #136]	; (8003284 <UART_SetConfig+0x118>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	0119      	lsls	r1, r3, #4
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009a      	lsls	r2, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fbb2 f2f3 	udiv	r2, r2, r3
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <UART_SetConfig+0x118>)
 800321a:	fba3 0302 	umull	r0, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2064      	movs	r0, #100	; 0x64
 8003222:	fb00 f303 	mul.w	r3, r0, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	3332      	adds	r3, #50	; 0x32
 800322c:	4a15      	ldr	r2, [pc, #84]	; (8003284 <UART_SetConfig+0x118>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003238:	4419      	add	r1, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009a      	lsls	r2, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <UART_SetConfig+0x118>)
 8003252:	fba3 0302 	umull	r0, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2064      	movs	r0, #100	; 0x64
 800325a:	fb00 f303 	mul.w	r3, r0, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	3332      	adds	r3, #50	; 0x32
 8003264:	4a07      	ldr	r2, [pc, #28]	; (8003284 <UART_SetConfig+0x118>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	440a      	add	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40013800 	.word	0x40013800
 8003284:	51eb851f 	.word	0x51eb851f

08003288 <__errno>:
 8003288:	4b01      	ldr	r3, [pc, #4]	; (8003290 <__errno+0x8>)
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	2000000c 	.word	0x2000000c

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	2600      	movs	r6, #0
 8003298:	4d0c      	ldr	r5, [pc, #48]	; (80032cc <__libc_init_array+0x38>)
 800329a:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	f000 fff8 	bl	8004298 <_init>
 80032a8:	2600      	movs	r6, #0
 80032aa:	4d0a      	ldr	r5, [pc, #40]	; (80032d4 <__libc_init_array+0x40>)
 80032ac:	4c0a      	ldr	r4, [pc, #40]	; (80032d8 <__libc_init_array+0x44>)
 80032ae:	1b64      	subs	r4, r4, r5
 80032b0:	10a4      	asrs	r4, r4, #2
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	080043a8 	.word	0x080043a8
 80032d0:	080043a8 	.word	0x080043a8
 80032d4:	080043a8 	.word	0x080043a8
 80032d8:	080043ac 	.word	0x080043ac

080032dc <memset>:
 80032dc:	4603      	mov	r3, r0
 80032de:	4402      	add	r2, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <iprintf>:
 80032ec:	b40f      	push	{r0, r1, r2, r3}
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <iprintf+0x2c>)
 80032f0:	b513      	push	{r0, r1, r4, lr}
 80032f2:	681c      	ldr	r4, [r3, #0]
 80032f4:	b124      	cbz	r4, 8003300 <iprintf+0x14>
 80032f6:	69a3      	ldr	r3, [r4, #24]
 80032f8:	b913      	cbnz	r3, 8003300 <iprintf+0x14>
 80032fa:	4620      	mov	r0, r4
 80032fc:	f000 fa5e 	bl	80037bc <__sinit>
 8003300:	ab05      	add	r3, sp, #20
 8003302:	4620      	mov	r0, r4
 8003304:	9a04      	ldr	r2, [sp, #16]
 8003306:	68a1      	ldr	r1, [r4, #8]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	f000 fc29 	bl	8003b60 <_vfiprintf_r>
 800330e:	b002      	add	sp, #8
 8003310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003314:	b004      	add	sp, #16
 8003316:	4770      	bx	lr
 8003318:	2000000c 	.word	0x2000000c

0800331c <_puts_r>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	460e      	mov	r6, r1
 8003320:	4605      	mov	r5, r0
 8003322:	b118      	cbz	r0, 800332c <_puts_r+0x10>
 8003324:	6983      	ldr	r3, [r0, #24]
 8003326:	b90b      	cbnz	r3, 800332c <_puts_r+0x10>
 8003328:	f000 fa48 	bl	80037bc <__sinit>
 800332c:	69ab      	ldr	r3, [r5, #24]
 800332e:	68ac      	ldr	r4, [r5, #8]
 8003330:	b913      	cbnz	r3, 8003338 <_puts_r+0x1c>
 8003332:	4628      	mov	r0, r5
 8003334:	f000 fa42 	bl	80037bc <__sinit>
 8003338:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <_puts_r+0xd0>)
 800333a:	429c      	cmp	r4, r3
 800333c:	d120      	bne.n	8003380 <_puts_r+0x64>
 800333e:	686c      	ldr	r4, [r5, #4]
 8003340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003342:	07db      	lsls	r3, r3, #31
 8003344:	d405      	bmi.n	8003352 <_puts_r+0x36>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	0598      	lsls	r0, r3, #22
 800334a:	d402      	bmi.n	8003352 <_puts_r+0x36>
 800334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800334e:	f000 fad3 	bl	80038f8 <__retarget_lock_acquire_recursive>
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	0719      	lsls	r1, r3, #28
 8003356:	d51d      	bpl.n	8003394 <_puts_r+0x78>
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	b1db      	cbz	r3, 8003394 <_puts_r+0x78>
 800335c:	3e01      	subs	r6, #1
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003364:	3b01      	subs	r3, #1
 8003366:	60a3      	str	r3, [r4, #8]
 8003368:	bb39      	cbnz	r1, 80033ba <_puts_r+0x9e>
 800336a:	2b00      	cmp	r3, #0
 800336c:	da38      	bge.n	80033e0 <_puts_r+0xc4>
 800336e:	4622      	mov	r2, r4
 8003370:	210a      	movs	r1, #10
 8003372:	4628      	mov	r0, r5
 8003374:	f000 f848 	bl	8003408 <__swbuf_r>
 8003378:	3001      	adds	r0, #1
 800337a:	d011      	beq.n	80033a0 <_puts_r+0x84>
 800337c:	250a      	movs	r5, #10
 800337e:	e011      	b.n	80033a4 <_puts_r+0x88>
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <_puts_r+0xd4>)
 8003382:	429c      	cmp	r4, r3
 8003384:	d101      	bne.n	800338a <_puts_r+0x6e>
 8003386:	68ac      	ldr	r4, [r5, #8]
 8003388:	e7da      	b.n	8003340 <_puts_r+0x24>
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <_puts_r+0xd8>)
 800338c:	429c      	cmp	r4, r3
 800338e:	bf08      	it	eq
 8003390:	68ec      	ldreq	r4, [r5, #12]
 8003392:	e7d5      	b.n	8003340 <_puts_r+0x24>
 8003394:	4621      	mov	r1, r4
 8003396:	4628      	mov	r0, r5
 8003398:	f000 f888 	bl	80034ac <__swsetup_r>
 800339c:	2800      	cmp	r0, #0
 800339e:	d0dd      	beq.n	800335c <_puts_r+0x40>
 80033a0:	f04f 35ff 	mov.w	r5, #4294967295
 80033a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033a6:	07da      	lsls	r2, r3, #31
 80033a8:	d405      	bmi.n	80033b6 <_puts_r+0x9a>
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	059b      	lsls	r3, r3, #22
 80033ae:	d402      	bmi.n	80033b6 <_puts_r+0x9a>
 80033b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033b2:	f000 faa2 	bl	80038fa <__retarget_lock_release_recursive>
 80033b6:	4628      	mov	r0, r5
 80033b8:	bd70      	pop	{r4, r5, r6, pc}
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da04      	bge.n	80033c8 <_puts_r+0xac>
 80033be:	69a2      	ldr	r2, [r4, #24]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dc06      	bgt.n	80033d2 <_puts_r+0xb6>
 80033c4:	290a      	cmp	r1, #10
 80033c6:	d004      	beq.n	80033d2 <_puts_r+0xb6>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	6022      	str	r2, [r4, #0]
 80033ce:	7019      	strb	r1, [r3, #0]
 80033d0:	e7c5      	b.n	800335e <_puts_r+0x42>
 80033d2:	4622      	mov	r2, r4
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 f817 	bl	8003408 <__swbuf_r>
 80033da:	3001      	adds	r0, #1
 80033dc:	d1bf      	bne.n	800335e <_puts_r+0x42>
 80033de:	e7df      	b.n	80033a0 <_puts_r+0x84>
 80033e0:	250a      	movs	r5, #10
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	6022      	str	r2, [r4, #0]
 80033e8:	701d      	strb	r5, [r3, #0]
 80033ea:	e7db      	b.n	80033a4 <_puts_r+0x88>
 80033ec:	08004334 	.word	0x08004334
 80033f0:	08004354 	.word	0x08004354
 80033f4:	08004314 	.word	0x08004314

080033f8 <puts>:
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <puts+0xc>)
 80033fa:	4601      	mov	r1, r0
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f7ff bf8d 	b.w	800331c <_puts_r>
 8003402:	bf00      	nop
 8003404:	2000000c 	.word	0x2000000c

08003408 <__swbuf_r>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	460e      	mov	r6, r1
 800340c:	4614      	mov	r4, r2
 800340e:	4605      	mov	r5, r0
 8003410:	b118      	cbz	r0, 800341a <__swbuf_r+0x12>
 8003412:	6983      	ldr	r3, [r0, #24]
 8003414:	b90b      	cbnz	r3, 800341a <__swbuf_r+0x12>
 8003416:	f000 f9d1 	bl	80037bc <__sinit>
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <__swbuf_r+0x98>)
 800341c:	429c      	cmp	r4, r3
 800341e:	d12b      	bne.n	8003478 <__swbuf_r+0x70>
 8003420:	686c      	ldr	r4, [r5, #4]
 8003422:	69a3      	ldr	r3, [r4, #24]
 8003424:	60a3      	str	r3, [r4, #8]
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	071a      	lsls	r2, r3, #28
 800342a:	d52f      	bpl.n	800348c <__swbuf_r+0x84>
 800342c:	6923      	ldr	r3, [r4, #16]
 800342e:	b36b      	cbz	r3, 800348c <__swbuf_r+0x84>
 8003430:	6923      	ldr	r3, [r4, #16]
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	b2f6      	uxtb	r6, r6
 8003436:	1ac0      	subs	r0, r0, r3
 8003438:	6963      	ldr	r3, [r4, #20]
 800343a:	4637      	mov	r7, r6
 800343c:	4283      	cmp	r3, r0
 800343e:	dc04      	bgt.n	800344a <__swbuf_r+0x42>
 8003440:	4621      	mov	r1, r4
 8003442:	4628      	mov	r0, r5
 8003444:	f000 f926 	bl	8003694 <_fflush_r>
 8003448:	bb30      	cbnz	r0, 8003498 <__swbuf_r+0x90>
 800344a:	68a3      	ldr	r3, [r4, #8]
 800344c:	3001      	adds	r0, #1
 800344e:	3b01      	subs	r3, #1
 8003450:	60a3      	str	r3, [r4, #8]
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	6022      	str	r2, [r4, #0]
 8003458:	701e      	strb	r6, [r3, #0]
 800345a:	6963      	ldr	r3, [r4, #20]
 800345c:	4283      	cmp	r3, r0
 800345e:	d004      	beq.n	800346a <__swbuf_r+0x62>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	07db      	lsls	r3, r3, #31
 8003464:	d506      	bpl.n	8003474 <__swbuf_r+0x6c>
 8003466:	2e0a      	cmp	r6, #10
 8003468:	d104      	bne.n	8003474 <__swbuf_r+0x6c>
 800346a:	4621      	mov	r1, r4
 800346c:	4628      	mov	r0, r5
 800346e:	f000 f911 	bl	8003694 <_fflush_r>
 8003472:	b988      	cbnz	r0, 8003498 <__swbuf_r+0x90>
 8003474:	4638      	mov	r0, r7
 8003476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <__swbuf_r+0x9c>)
 800347a:	429c      	cmp	r4, r3
 800347c:	d101      	bne.n	8003482 <__swbuf_r+0x7a>
 800347e:	68ac      	ldr	r4, [r5, #8]
 8003480:	e7cf      	b.n	8003422 <__swbuf_r+0x1a>
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <__swbuf_r+0xa0>)
 8003484:	429c      	cmp	r4, r3
 8003486:	bf08      	it	eq
 8003488:	68ec      	ldreq	r4, [r5, #12]
 800348a:	e7ca      	b.n	8003422 <__swbuf_r+0x1a>
 800348c:	4621      	mov	r1, r4
 800348e:	4628      	mov	r0, r5
 8003490:	f000 f80c 	bl	80034ac <__swsetup_r>
 8003494:	2800      	cmp	r0, #0
 8003496:	d0cb      	beq.n	8003430 <__swbuf_r+0x28>
 8003498:	f04f 37ff 	mov.w	r7, #4294967295
 800349c:	e7ea      	b.n	8003474 <__swbuf_r+0x6c>
 800349e:	bf00      	nop
 80034a0:	08004334 	.word	0x08004334
 80034a4:	08004354 	.word	0x08004354
 80034a8:	08004314 	.word	0x08004314

080034ac <__swsetup_r>:
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <__swsetup_r+0xcc>)
 80034ae:	b570      	push	{r4, r5, r6, lr}
 80034b0:	681d      	ldr	r5, [r3, #0]
 80034b2:	4606      	mov	r6, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	b125      	cbz	r5, 80034c2 <__swsetup_r+0x16>
 80034b8:	69ab      	ldr	r3, [r5, #24]
 80034ba:	b913      	cbnz	r3, 80034c2 <__swsetup_r+0x16>
 80034bc:	4628      	mov	r0, r5
 80034be:	f000 f97d 	bl	80037bc <__sinit>
 80034c2:	4b2e      	ldr	r3, [pc, #184]	; (800357c <__swsetup_r+0xd0>)
 80034c4:	429c      	cmp	r4, r3
 80034c6:	d10f      	bne.n	80034e8 <__swsetup_r+0x3c>
 80034c8:	686c      	ldr	r4, [r5, #4]
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034d0:	0719      	lsls	r1, r3, #28
 80034d2:	d42c      	bmi.n	800352e <__swsetup_r+0x82>
 80034d4:	06dd      	lsls	r5, r3, #27
 80034d6:	d411      	bmi.n	80034fc <__swsetup_r+0x50>
 80034d8:	2309      	movs	r3, #9
 80034da:	6033      	str	r3, [r6, #0]
 80034dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	81a3      	strh	r3, [r4, #12]
 80034e6:	e03e      	b.n	8003566 <__swsetup_r+0xba>
 80034e8:	4b25      	ldr	r3, [pc, #148]	; (8003580 <__swsetup_r+0xd4>)
 80034ea:	429c      	cmp	r4, r3
 80034ec:	d101      	bne.n	80034f2 <__swsetup_r+0x46>
 80034ee:	68ac      	ldr	r4, [r5, #8]
 80034f0:	e7eb      	b.n	80034ca <__swsetup_r+0x1e>
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <__swsetup_r+0xd8>)
 80034f4:	429c      	cmp	r4, r3
 80034f6:	bf08      	it	eq
 80034f8:	68ec      	ldreq	r4, [r5, #12]
 80034fa:	e7e6      	b.n	80034ca <__swsetup_r+0x1e>
 80034fc:	0758      	lsls	r0, r3, #29
 80034fe:	d512      	bpl.n	8003526 <__swsetup_r+0x7a>
 8003500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003502:	b141      	cbz	r1, 8003516 <__swsetup_r+0x6a>
 8003504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003508:	4299      	cmp	r1, r3
 800350a:	d002      	beq.n	8003512 <__swsetup_r+0x66>
 800350c:	4630      	mov	r0, r6
 800350e:	f000 fa59 	bl	80039c4 <_free_r>
 8003512:	2300      	movs	r3, #0
 8003514:	6363      	str	r3, [r4, #52]	; 0x34
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	2300      	movs	r3, #0
 8003520:	6063      	str	r3, [r4, #4]
 8003522:	6923      	ldr	r3, [r4, #16]
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	81a3      	strh	r3, [r4, #12]
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	b94b      	cbnz	r3, 8003546 <__swsetup_r+0x9a>
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353c:	d003      	beq.n	8003546 <__swsetup_r+0x9a>
 800353e:	4621      	mov	r1, r4
 8003540:	4630      	mov	r0, r6
 8003542:	f000 f9ff 	bl	8003944 <__smakebuf_r>
 8003546:	89a0      	ldrh	r0, [r4, #12]
 8003548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800354c:	f010 0301 	ands.w	r3, r0, #1
 8003550:	d00a      	beq.n	8003568 <__swsetup_r+0xbc>
 8003552:	2300      	movs	r3, #0
 8003554:	60a3      	str	r3, [r4, #8]
 8003556:	6963      	ldr	r3, [r4, #20]
 8003558:	425b      	negs	r3, r3
 800355a:	61a3      	str	r3, [r4, #24]
 800355c:	6923      	ldr	r3, [r4, #16]
 800355e:	b943      	cbnz	r3, 8003572 <__swsetup_r+0xc6>
 8003560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003564:	d1ba      	bne.n	80034dc <__swsetup_r+0x30>
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	0781      	lsls	r1, r0, #30
 800356a:	bf58      	it	pl
 800356c:	6963      	ldrpl	r3, [r4, #20]
 800356e:	60a3      	str	r3, [r4, #8]
 8003570:	e7f4      	b.n	800355c <__swsetup_r+0xb0>
 8003572:	2000      	movs	r0, #0
 8003574:	e7f7      	b.n	8003566 <__swsetup_r+0xba>
 8003576:	bf00      	nop
 8003578:	2000000c 	.word	0x2000000c
 800357c:	08004334 	.word	0x08004334
 8003580:	08004354 	.word	0x08004354
 8003584:	08004314 	.word	0x08004314

08003588 <__sflush_r>:
 8003588:	898a      	ldrh	r2, [r1, #12]
 800358a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800358e:	4605      	mov	r5, r0
 8003590:	0710      	lsls	r0, r2, #28
 8003592:	460c      	mov	r4, r1
 8003594:	d458      	bmi.n	8003648 <__sflush_r+0xc0>
 8003596:	684b      	ldr	r3, [r1, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	dc05      	bgt.n	80035a8 <__sflush_r+0x20>
 800359c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dc02      	bgt.n	80035a8 <__sflush_r+0x20>
 80035a2:	2000      	movs	r0, #0
 80035a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035aa:	2e00      	cmp	r6, #0
 80035ac:	d0f9      	beq.n	80035a2 <__sflush_r+0x1a>
 80035ae:	2300      	movs	r3, #0
 80035b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035b4:	682f      	ldr	r7, [r5, #0]
 80035b6:	602b      	str	r3, [r5, #0]
 80035b8:	d032      	beq.n	8003620 <__sflush_r+0x98>
 80035ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	075a      	lsls	r2, r3, #29
 80035c0:	d505      	bpl.n	80035ce <__sflush_r+0x46>
 80035c2:	6863      	ldr	r3, [r4, #4]
 80035c4:	1ac0      	subs	r0, r0, r3
 80035c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035c8:	b10b      	cbz	r3, 80035ce <__sflush_r+0x46>
 80035ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035cc:	1ac0      	subs	r0, r0, r3
 80035ce:	2300      	movs	r3, #0
 80035d0:	4602      	mov	r2, r0
 80035d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035d4:	4628      	mov	r0, r5
 80035d6:	6a21      	ldr	r1, [r4, #32]
 80035d8:	47b0      	blx	r6
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	d106      	bne.n	80035ee <__sflush_r+0x66>
 80035e0:	6829      	ldr	r1, [r5, #0]
 80035e2:	291d      	cmp	r1, #29
 80035e4:	d82c      	bhi.n	8003640 <__sflush_r+0xb8>
 80035e6:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <__sflush_r+0x108>)
 80035e8:	40ca      	lsrs	r2, r1
 80035ea:	07d6      	lsls	r6, r2, #31
 80035ec:	d528      	bpl.n	8003640 <__sflush_r+0xb8>
 80035ee:	2200      	movs	r2, #0
 80035f0:	6062      	str	r2, [r4, #4]
 80035f2:	6922      	ldr	r2, [r4, #16]
 80035f4:	04d9      	lsls	r1, r3, #19
 80035f6:	6022      	str	r2, [r4, #0]
 80035f8:	d504      	bpl.n	8003604 <__sflush_r+0x7c>
 80035fa:	1c42      	adds	r2, r0, #1
 80035fc:	d101      	bne.n	8003602 <__sflush_r+0x7a>
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	b903      	cbnz	r3, 8003604 <__sflush_r+0x7c>
 8003602:	6560      	str	r0, [r4, #84]	; 0x54
 8003604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003606:	602f      	str	r7, [r5, #0]
 8003608:	2900      	cmp	r1, #0
 800360a:	d0ca      	beq.n	80035a2 <__sflush_r+0x1a>
 800360c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003610:	4299      	cmp	r1, r3
 8003612:	d002      	beq.n	800361a <__sflush_r+0x92>
 8003614:	4628      	mov	r0, r5
 8003616:	f000 f9d5 	bl	80039c4 <_free_r>
 800361a:	2000      	movs	r0, #0
 800361c:	6360      	str	r0, [r4, #52]	; 0x34
 800361e:	e7c1      	b.n	80035a4 <__sflush_r+0x1c>
 8003620:	6a21      	ldr	r1, [r4, #32]
 8003622:	2301      	movs	r3, #1
 8003624:	4628      	mov	r0, r5
 8003626:	47b0      	blx	r6
 8003628:	1c41      	adds	r1, r0, #1
 800362a:	d1c7      	bne.n	80035bc <__sflush_r+0x34>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0c4      	beq.n	80035bc <__sflush_r+0x34>
 8003632:	2b1d      	cmp	r3, #29
 8003634:	d001      	beq.n	800363a <__sflush_r+0xb2>
 8003636:	2b16      	cmp	r3, #22
 8003638:	d101      	bne.n	800363e <__sflush_r+0xb6>
 800363a:	602f      	str	r7, [r5, #0]
 800363c:	e7b1      	b.n	80035a2 <__sflush_r+0x1a>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003644:	81a3      	strh	r3, [r4, #12]
 8003646:	e7ad      	b.n	80035a4 <__sflush_r+0x1c>
 8003648:	690f      	ldr	r7, [r1, #16]
 800364a:	2f00      	cmp	r7, #0
 800364c:	d0a9      	beq.n	80035a2 <__sflush_r+0x1a>
 800364e:	0793      	lsls	r3, r2, #30
 8003650:	bf18      	it	ne
 8003652:	2300      	movne	r3, #0
 8003654:	680e      	ldr	r6, [r1, #0]
 8003656:	bf08      	it	eq
 8003658:	694b      	ldreq	r3, [r1, #20]
 800365a:	eba6 0807 	sub.w	r8, r6, r7
 800365e:	600f      	str	r7, [r1, #0]
 8003660:	608b      	str	r3, [r1, #8]
 8003662:	f1b8 0f00 	cmp.w	r8, #0
 8003666:	dd9c      	ble.n	80035a2 <__sflush_r+0x1a>
 8003668:	4643      	mov	r3, r8
 800366a:	463a      	mov	r2, r7
 800366c:	4628      	mov	r0, r5
 800366e:	6a21      	ldr	r1, [r4, #32]
 8003670:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003672:	47b0      	blx	r6
 8003674:	2800      	cmp	r0, #0
 8003676:	dc06      	bgt.n	8003686 <__sflush_r+0xfe>
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	e78e      	b.n	80035a4 <__sflush_r+0x1c>
 8003686:	4407      	add	r7, r0
 8003688:	eba8 0800 	sub.w	r8, r8, r0
 800368c:	e7e9      	b.n	8003662 <__sflush_r+0xda>
 800368e:	bf00      	nop
 8003690:	20400001 	.word	0x20400001

08003694 <_fflush_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	690b      	ldr	r3, [r1, #16]
 8003698:	4605      	mov	r5, r0
 800369a:	460c      	mov	r4, r1
 800369c:	b913      	cbnz	r3, 80036a4 <_fflush_r+0x10>
 800369e:	2500      	movs	r5, #0
 80036a0:	4628      	mov	r0, r5
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	b118      	cbz	r0, 80036ae <_fflush_r+0x1a>
 80036a6:	6983      	ldr	r3, [r0, #24]
 80036a8:	b90b      	cbnz	r3, 80036ae <_fflush_r+0x1a>
 80036aa:	f000 f887 	bl	80037bc <__sinit>
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <_fflush_r+0x6c>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	d11b      	bne.n	80036ec <_fflush_r+0x58>
 80036b4:	686c      	ldr	r4, [r5, #4]
 80036b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ef      	beq.n	800369e <_fflush_r+0xa>
 80036be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036c0:	07d0      	lsls	r0, r2, #31
 80036c2:	d404      	bmi.n	80036ce <_fflush_r+0x3a>
 80036c4:	0599      	lsls	r1, r3, #22
 80036c6:	d402      	bmi.n	80036ce <_fflush_r+0x3a>
 80036c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ca:	f000 f915 	bl	80038f8 <__retarget_lock_acquire_recursive>
 80036ce:	4628      	mov	r0, r5
 80036d0:	4621      	mov	r1, r4
 80036d2:	f7ff ff59 	bl	8003588 <__sflush_r>
 80036d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036d8:	4605      	mov	r5, r0
 80036da:	07da      	lsls	r2, r3, #31
 80036dc:	d4e0      	bmi.n	80036a0 <_fflush_r+0xc>
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	059b      	lsls	r3, r3, #22
 80036e2:	d4dd      	bmi.n	80036a0 <_fflush_r+0xc>
 80036e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036e6:	f000 f908 	bl	80038fa <__retarget_lock_release_recursive>
 80036ea:	e7d9      	b.n	80036a0 <_fflush_r+0xc>
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <_fflush_r+0x70>)
 80036ee:	429c      	cmp	r4, r3
 80036f0:	d101      	bne.n	80036f6 <_fflush_r+0x62>
 80036f2:	68ac      	ldr	r4, [r5, #8]
 80036f4:	e7df      	b.n	80036b6 <_fflush_r+0x22>
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <_fflush_r+0x74>)
 80036f8:	429c      	cmp	r4, r3
 80036fa:	bf08      	it	eq
 80036fc:	68ec      	ldreq	r4, [r5, #12]
 80036fe:	e7da      	b.n	80036b6 <_fflush_r+0x22>
 8003700:	08004334 	.word	0x08004334
 8003704:	08004354 	.word	0x08004354
 8003708:	08004314 	.word	0x08004314

0800370c <std>:
 800370c:	2300      	movs	r3, #0
 800370e:	b510      	push	{r4, lr}
 8003710:	4604      	mov	r4, r0
 8003712:	e9c0 3300 	strd	r3, r3, [r0]
 8003716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800371a:	6083      	str	r3, [r0, #8]
 800371c:	8181      	strh	r1, [r0, #12]
 800371e:	6643      	str	r3, [r0, #100]	; 0x64
 8003720:	81c2      	strh	r2, [r0, #14]
 8003722:	6183      	str	r3, [r0, #24]
 8003724:	4619      	mov	r1, r3
 8003726:	2208      	movs	r2, #8
 8003728:	305c      	adds	r0, #92	; 0x5c
 800372a:	f7ff fdd7 	bl	80032dc <memset>
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <std+0x38>)
 8003730:	6224      	str	r4, [r4, #32]
 8003732:	6263      	str	r3, [r4, #36]	; 0x24
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <std+0x3c>)
 8003736:	62a3      	str	r3, [r4, #40]	; 0x28
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <std+0x40>)
 800373a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <std+0x44>)
 800373e:	6323      	str	r3, [r4, #48]	; 0x30
 8003740:	bd10      	pop	{r4, pc}
 8003742:	bf00      	nop
 8003744:	0800410d 	.word	0x0800410d
 8003748:	0800412f 	.word	0x0800412f
 800374c:	08004167 	.word	0x08004167
 8003750:	0800418b 	.word	0x0800418b

08003754 <_cleanup_r>:
 8003754:	4901      	ldr	r1, [pc, #4]	; (800375c <_cleanup_r+0x8>)
 8003756:	f000 b8af 	b.w	80038b8 <_fwalk_reent>
 800375a:	bf00      	nop
 800375c:	08003695 	.word	0x08003695

08003760 <__sfmoreglue>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	2568      	movs	r5, #104	; 0x68
 8003764:	1e4a      	subs	r2, r1, #1
 8003766:	4355      	muls	r5, r2
 8003768:	460e      	mov	r6, r1
 800376a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800376e:	f000 f975 	bl	8003a5c <_malloc_r>
 8003772:	4604      	mov	r4, r0
 8003774:	b140      	cbz	r0, 8003788 <__sfmoreglue+0x28>
 8003776:	2100      	movs	r1, #0
 8003778:	e9c0 1600 	strd	r1, r6, [r0]
 800377c:	300c      	adds	r0, #12
 800377e:	60a0      	str	r0, [r4, #8]
 8003780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003784:	f7ff fdaa 	bl	80032dc <memset>
 8003788:	4620      	mov	r0, r4
 800378a:	bd70      	pop	{r4, r5, r6, pc}

0800378c <__sfp_lock_acquire>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__sfp_lock_acquire+0x8>)
 800378e:	f000 b8b3 	b.w	80038f8 <__retarget_lock_acquire_recursive>
 8003792:	bf00      	nop
 8003794:	200001b8 	.word	0x200001b8

08003798 <__sfp_lock_release>:
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <__sfp_lock_release+0x8>)
 800379a:	f000 b8ae 	b.w	80038fa <__retarget_lock_release_recursive>
 800379e:	bf00      	nop
 80037a0:	200001b8 	.word	0x200001b8

080037a4 <__sinit_lock_acquire>:
 80037a4:	4801      	ldr	r0, [pc, #4]	; (80037ac <__sinit_lock_acquire+0x8>)
 80037a6:	f000 b8a7 	b.w	80038f8 <__retarget_lock_acquire_recursive>
 80037aa:	bf00      	nop
 80037ac:	200001b3 	.word	0x200001b3

080037b0 <__sinit_lock_release>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__sinit_lock_release+0x8>)
 80037b2:	f000 b8a2 	b.w	80038fa <__retarget_lock_release_recursive>
 80037b6:	bf00      	nop
 80037b8:	200001b3 	.word	0x200001b3

080037bc <__sinit>:
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
 80037c0:	f7ff fff0 	bl	80037a4 <__sinit_lock_acquire>
 80037c4:	69a3      	ldr	r3, [r4, #24]
 80037c6:	b11b      	cbz	r3, 80037d0 <__sinit+0x14>
 80037c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037cc:	f7ff bff0 	b.w	80037b0 <__sinit_lock_release>
 80037d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037d4:	6523      	str	r3, [r4, #80]	; 0x50
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <__sinit+0x68>)
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <__sinit+0x6c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80037de:	42a3      	cmp	r3, r4
 80037e0:	bf08      	it	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	4620      	mov	r0, r4
 80037e6:	bf08      	it	eq
 80037e8:	61a3      	streq	r3, [r4, #24]
 80037ea:	f000 f81f 	bl	800382c <__sfp>
 80037ee:	6060      	str	r0, [r4, #4]
 80037f0:	4620      	mov	r0, r4
 80037f2:	f000 f81b 	bl	800382c <__sfp>
 80037f6:	60a0      	str	r0, [r4, #8]
 80037f8:	4620      	mov	r0, r4
 80037fa:	f000 f817 	bl	800382c <__sfp>
 80037fe:	2200      	movs	r2, #0
 8003800:	2104      	movs	r1, #4
 8003802:	60e0      	str	r0, [r4, #12]
 8003804:	6860      	ldr	r0, [r4, #4]
 8003806:	f7ff ff81 	bl	800370c <std>
 800380a:	2201      	movs	r2, #1
 800380c:	2109      	movs	r1, #9
 800380e:	68a0      	ldr	r0, [r4, #8]
 8003810:	f7ff ff7c 	bl	800370c <std>
 8003814:	2202      	movs	r2, #2
 8003816:	2112      	movs	r1, #18
 8003818:	68e0      	ldr	r0, [r4, #12]
 800381a:	f7ff ff77 	bl	800370c <std>
 800381e:	2301      	movs	r3, #1
 8003820:	61a3      	str	r3, [r4, #24]
 8003822:	e7d1      	b.n	80037c8 <__sinit+0xc>
 8003824:	08004310 	.word	0x08004310
 8003828:	08003755 	.word	0x08003755

0800382c <__sfp>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	4607      	mov	r7, r0
 8003830:	f7ff ffac 	bl	800378c <__sfp_lock_acquire>
 8003834:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <__sfp+0x84>)
 8003836:	681e      	ldr	r6, [r3, #0]
 8003838:	69b3      	ldr	r3, [r6, #24]
 800383a:	b913      	cbnz	r3, 8003842 <__sfp+0x16>
 800383c:	4630      	mov	r0, r6
 800383e:	f7ff ffbd 	bl	80037bc <__sinit>
 8003842:	3648      	adds	r6, #72	; 0x48
 8003844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003848:	3b01      	subs	r3, #1
 800384a:	d503      	bpl.n	8003854 <__sfp+0x28>
 800384c:	6833      	ldr	r3, [r6, #0]
 800384e:	b30b      	cbz	r3, 8003894 <__sfp+0x68>
 8003850:	6836      	ldr	r6, [r6, #0]
 8003852:	e7f7      	b.n	8003844 <__sfp+0x18>
 8003854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003858:	b9d5      	cbnz	r5, 8003890 <__sfp+0x64>
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <__sfp+0x88>)
 800385c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003860:	60e3      	str	r3, [r4, #12]
 8003862:	6665      	str	r5, [r4, #100]	; 0x64
 8003864:	f000 f847 	bl	80038f6 <__retarget_lock_init_recursive>
 8003868:	f7ff ff96 	bl	8003798 <__sfp_lock_release>
 800386c:	2208      	movs	r2, #8
 800386e:	4629      	mov	r1, r5
 8003870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003878:	6025      	str	r5, [r4, #0]
 800387a:	61a5      	str	r5, [r4, #24]
 800387c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003880:	f7ff fd2c 	bl	80032dc <memset>
 8003884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800388c:	4620      	mov	r0, r4
 800388e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003890:	3468      	adds	r4, #104	; 0x68
 8003892:	e7d9      	b.n	8003848 <__sfp+0x1c>
 8003894:	2104      	movs	r1, #4
 8003896:	4638      	mov	r0, r7
 8003898:	f7ff ff62 	bl	8003760 <__sfmoreglue>
 800389c:	4604      	mov	r4, r0
 800389e:	6030      	str	r0, [r6, #0]
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1d5      	bne.n	8003850 <__sfp+0x24>
 80038a4:	f7ff ff78 	bl	8003798 <__sfp_lock_release>
 80038a8:	230c      	movs	r3, #12
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	e7ee      	b.n	800388c <__sfp+0x60>
 80038ae:	bf00      	nop
 80038b0:	08004310 	.word	0x08004310
 80038b4:	ffff0001 	.word	0xffff0001

080038b8 <_fwalk_reent>:
 80038b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038bc:	4606      	mov	r6, r0
 80038be:	4688      	mov	r8, r1
 80038c0:	2700      	movs	r7, #0
 80038c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038ca:	f1b9 0901 	subs.w	r9, r9, #1
 80038ce:	d505      	bpl.n	80038dc <_fwalk_reent+0x24>
 80038d0:	6824      	ldr	r4, [r4, #0]
 80038d2:	2c00      	cmp	r4, #0
 80038d4:	d1f7      	bne.n	80038c6 <_fwalk_reent+0xe>
 80038d6:	4638      	mov	r0, r7
 80038d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038dc:	89ab      	ldrh	r3, [r5, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d907      	bls.n	80038f2 <_fwalk_reent+0x3a>
 80038e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038e6:	3301      	adds	r3, #1
 80038e8:	d003      	beq.n	80038f2 <_fwalk_reent+0x3a>
 80038ea:	4629      	mov	r1, r5
 80038ec:	4630      	mov	r0, r6
 80038ee:	47c0      	blx	r8
 80038f0:	4307      	orrs	r7, r0
 80038f2:	3568      	adds	r5, #104	; 0x68
 80038f4:	e7e9      	b.n	80038ca <_fwalk_reent+0x12>

080038f6 <__retarget_lock_init_recursive>:
 80038f6:	4770      	bx	lr

080038f8 <__retarget_lock_acquire_recursive>:
 80038f8:	4770      	bx	lr

080038fa <__retarget_lock_release_recursive>:
 80038fa:	4770      	bx	lr

080038fc <__swhatbuf_r>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	460e      	mov	r6, r1
 8003900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003904:	4614      	mov	r4, r2
 8003906:	2900      	cmp	r1, #0
 8003908:	461d      	mov	r5, r3
 800390a:	b096      	sub	sp, #88	; 0x58
 800390c:	da07      	bge.n	800391e <__swhatbuf_r+0x22>
 800390e:	2300      	movs	r3, #0
 8003910:	602b      	str	r3, [r5, #0]
 8003912:	89b3      	ldrh	r3, [r6, #12]
 8003914:	061a      	lsls	r2, r3, #24
 8003916:	d410      	bmi.n	800393a <__swhatbuf_r+0x3e>
 8003918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800391c:	e00e      	b.n	800393c <__swhatbuf_r+0x40>
 800391e:	466a      	mov	r2, sp
 8003920:	f000 fc5a 	bl	80041d8 <_fstat_r>
 8003924:	2800      	cmp	r0, #0
 8003926:	dbf2      	blt.n	800390e <__swhatbuf_r+0x12>
 8003928:	9a01      	ldr	r2, [sp, #4]
 800392a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800392e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003932:	425a      	negs	r2, r3
 8003934:	415a      	adcs	r2, r3
 8003936:	602a      	str	r2, [r5, #0]
 8003938:	e7ee      	b.n	8003918 <__swhatbuf_r+0x1c>
 800393a:	2340      	movs	r3, #64	; 0x40
 800393c:	2000      	movs	r0, #0
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	b016      	add	sp, #88	; 0x58
 8003942:	bd70      	pop	{r4, r5, r6, pc}

08003944 <__smakebuf_r>:
 8003944:	898b      	ldrh	r3, [r1, #12]
 8003946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003948:	079d      	lsls	r5, r3, #30
 800394a:	4606      	mov	r6, r0
 800394c:	460c      	mov	r4, r1
 800394e:	d507      	bpl.n	8003960 <__smakebuf_r+0x1c>
 8003950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	2301      	movs	r3, #1
 800395a:	6163      	str	r3, [r4, #20]
 800395c:	b002      	add	sp, #8
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	466a      	mov	r2, sp
 8003962:	ab01      	add	r3, sp, #4
 8003964:	f7ff ffca 	bl	80038fc <__swhatbuf_r>
 8003968:	9900      	ldr	r1, [sp, #0]
 800396a:	4605      	mov	r5, r0
 800396c:	4630      	mov	r0, r6
 800396e:	f000 f875 	bl	8003a5c <_malloc_r>
 8003972:	b948      	cbnz	r0, 8003988 <__smakebuf_r+0x44>
 8003974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003978:	059a      	lsls	r2, r3, #22
 800397a:	d4ef      	bmi.n	800395c <__smakebuf_r+0x18>
 800397c:	f023 0303 	bic.w	r3, r3, #3
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	81a3      	strh	r3, [r4, #12]
 8003986:	e7e3      	b.n	8003950 <__smakebuf_r+0xc>
 8003988:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <__smakebuf_r+0x7c>)
 800398a:	62b3      	str	r3, [r6, #40]	; 0x28
 800398c:	89a3      	ldrh	r3, [r4, #12]
 800398e:	6020      	str	r0, [r4, #0]
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	81a3      	strh	r3, [r4, #12]
 8003996:	9b00      	ldr	r3, [sp, #0]
 8003998:	6120      	str	r0, [r4, #16]
 800399a:	6163      	str	r3, [r4, #20]
 800399c:	9b01      	ldr	r3, [sp, #4]
 800399e:	b15b      	cbz	r3, 80039b8 <__smakebuf_r+0x74>
 80039a0:	4630      	mov	r0, r6
 80039a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039a6:	f000 fc29 	bl	80041fc <_isatty_r>
 80039aa:	b128      	cbz	r0, 80039b8 <__smakebuf_r+0x74>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	81a3      	strh	r3, [r4, #12]
 80039b8:	89a0      	ldrh	r0, [r4, #12]
 80039ba:	4305      	orrs	r5, r0
 80039bc:	81a5      	strh	r5, [r4, #12]
 80039be:	e7cd      	b.n	800395c <__smakebuf_r+0x18>
 80039c0:	08003755 	.word	0x08003755

080039c4 <_free_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4605      	mov	r5, r0
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d043      	beq.n	8003a54 <_free_r+0x90>
 80039cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d0:	1f0c      	subs	r4, r1, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfb8      	it	lt
 80039d6:	18e4      	addlt	r4, r4, r3
 80039d8:	f000 fc40 	bl	800425c <__malloc_lock>
 80039dc:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <_free_r+0x94>)
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	4610      	mov	r0, r2
 80039e2:	b933      	cbnz	r3, 80039f2 <_free_r+0x2e>
 80039e4:	6063      	str	r3, [r4, #4]
 80039e6:	6014      	str	r4, [r2, #0]
 80039e8:	4628      	mov	r0, r5
 80039ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ee:	f000 bc3b 	b.w	8004268 <__malloc_unlock>
 80039f2:	42a3      	cmp	r3, r4
 80039f4:	d90a      	bls.n	8003a0c <_free_r+0x48>
 80039f6:	6821      	ldr	r1, [r4, #0]
 80039f8:	1862      	adds	r2, r4, r1
 80039fa:	4293      	cmp	r3, r2
 80039fc:	bf01      	itttt	eq
 80039fe:	681a      	ldreq	r2, [r3, #0]
 8003a00:	685b      	ldreq	r3, [r3, #4]
 8003a02:	1852      	addeq	r2, r2, r1
 8003a04:	6022      	streq	r2, [r4, #0]
 8003a06:	6063      	str	r3, [r4, #4]
 8003a08:	6004      	str	r4, [r0, #0]
 8003a0a:	e7ed      	b.n	80039e8 <_free_r+0x24>
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	b10b      	cbz	r3, 8003a16 <_free_r+0x52>
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	d9fa      	bls.n	8003a0c <_free_r+0x48>
 8003a16:	6811      	ldr	r1, [r2, #0]
 8003a18:	1850      	adds	r0, r2, r1
 8003a1a:	42a0      	cmp	r0, r4
 8003a1c:	d10b      	bne.n	8003a36 <_free_r+0x72>
 8003a1e:	6820      	ldr	r0, [r4, #0]
 8003a20:	4401      	add	r1, r0
 8003a22:	1850      	adds	r0, r2, r1
 8003a24:	4283      	cmp	r3, r0
 8003a26:	6011      	str	r1, [r2, #0]
 8003a28:	d1de      	bne.n	80039e8 <_free_r+0x24>
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4401      	add	r1, r0
 8003a30:	6011      	str	r1, [r2, #0]
 8003a32:	6053      	str	r3, [r2, #4]
 8003a34:	e7d8      	b.n	80039e8 <_free_r+0x24>
 8003a36:	d902      	bls.n	8003a3e <_free_r+0x7a>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	602b      	str	r3, [r5, #0]
 8003a3c:	e7d4      	b.n	80039e8 <_free_r+0x24>
 8003a3e:	6820      	ldr	r0, [r4, #0]
 8003a40:	1821      	adds	r1, r4, r0
 8003a42:	428b      	cmp	r3, r1
 8003a44:	bf01      	itttt	eq
 8003a46:	6819      	ldreq	r1, [r3, #0]
 8003a48:	685b      	ldreq	r3, [r3, #4]
 8003a4a:	1809      	addeq	r1, r1, r0
 8003a4c:	6021      	streq	r1, [r4, #0]
 8003a4e:	6063      	str	r3, [r4, #4]
 8003a50:	6054      	str	r4, [r2, #4]
 8003a52:	e7c9      	b.n	80039e8 <_free_r+0x24>
 8003a54:	bd38      	pop	{r3, r4, r5, pc}
 8003a56:	bf00      	nop
 8003a58:	20000090 	.word	0x20000090

08003a5c <_malloc_r>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	1ccd      	adds	r5, r1, #3
 8003a60:	f025 0503 	bic.w	r5, r5, #3
 8003a64:	3508      	adds	r5, #8
 8003a66:	2d0c      	cmp	r5, #12
 8003a68:	bf38      	it	cc
 8003a6a:	250c      	movcc	r5, #12
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	4606      	mov	r6, r0
 8003a70:	db01      	blt.n	8003a76 <_malloc_r+0x1a>
 8003a72:	42a9      	cmp	r1, r5
 8003a74:	d903      	bls.n	8003a7e <_malloc_r+0x22>
 8003a76:	230c      	movs	r3, #12
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a7e:	f000 fbed 	bl	800425c <__malloc_lock>
 8003a82:	4921      	ldr	r1, [pc, #132]	; (8003b08 <_malloc_r+0xac>)
 8003a84:	680a      	ldr	r2, [r1, #0]
 8003a86:	4614      	mov	r4, r2
 8003a88:	b99c      	cbnz	r4, 8003ab2 <_malloc_r+0x56>
 8003a8a:	4f20      	ldr	r7, [pc, #128]	; (8003b0c <_malloc_r+0xb0>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	b923      	cbnz	r3, 8003a9a <_malloc_r+0x3e>
 8003a90:	4621      	mov	r1, r4
 8003a92:	4630      	mov	r0, r6
 8003a94:	f000 fb2a 	bl	80040ec <_sbrk_r>
 8003a98:	6038      	str	r0, [r7, #0]
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f000 fb25 	bl	80040ec <_sbrk_r>
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	d123      	bne.n	8003aee <_malloc_r+0x92>
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	6033      	str	r3, [r6, #0]
 8003aac:	f000 fbdc 	bl	8004268 <__malloc_unlock>
 8003ab0:	e7e3      	b.n	8003a7a <_malloc_r+0x1e>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	1b5b      	subs	r3, r3, r5
 8003ab6:	d417      	bmi.n	8003ae8 <_malloc_r+0x8c>
 8003ab8:	2b0b      	cmp	r3, #11
 8003aba:	d903      	bls.n	8003ac4 <_malloc_r+0x68>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	441c      	add	r4, r3
 8003ac0:	6025      	str	r5, [r4, #0]
 8003ac2:	e004      	b.n	8003ace <_malloc_r+0x72>
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	42a2      	cmp	r2, r4
 8003ac8:	bf0c      	ite	eq
 8003aca:	600b      	streq	r3, [r1, #0]
 8003acc:	6053      	strne	r3, [r2, #4]
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f000 fbca 	bl	8004268 <__malloc_unlock>
 8003ad4:	f104 000b 	add.w	r0, r4, #11
 8003ad8:	1d23      	adds	r3, r4, #4
 8003ada:	f020 0007 	bic.w	r0, r0, #7
 8003ade:	1ac2      	subs	r2, r0, r3
 8003ae0:	d0cc      	beq.n	8003a7c <_malloc_r+0x20>
 8003ae2:	1a1b      	subs	r3, r3, r0
 8003ae4:	50a3      	str	r3, [r4, r2]
 8003ae6:	e7c9      	b.n	8003a7c <_malloc_r+0x20>
 8003ae8:	4622      	mov	r2, r4
 8003aea:	6864      	ldr	r4, [r4, #4]
 8003aec:	e7cc      	b.n	8003a88 <_malloc_r+0x2c>
 8003aee:	1cc4      	adds	r4, r0, #3
 8003af0:	f024 0403 	bic.w	r4, r4, #3
 8003af4:	42a0      	cmp	r0, r4
 8003af6:	d0e3      	beq.n	8003ac0 <_malloc_r+0x64>
 8003af8:	1a21      	subs	r1, r4, r0
 8003afa:	4630      	mov	r0, r6
 8003afc:	f000 faf6 	bl	80040ec <_sbrk_r>
 8003b00:	3001      	adds	r0, #1
 8003b02:	d1dd      	bne.n	8003ac0 <_malloc_r+0x64>
 8003b04:	e7cf      	b.n	8003aa6 <_malloc_r+0x4a>
 8003b06:	bf00      	nop
 8003b08:	20000090 	.word	0x20000090
 8003b0c:	20000094 	.word	0x20000094

08003b10 <__sfputc_r>:
 8003b10:	6893      	ldr	r3, [r2, #8]
 8003b12:	b410      	push	{r4}
 8003b14:	3b01      	subs	r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	6093      	str	r3, [r2, #8]
 8003b1a:	da07      	bge.n	8003b2c <__sfputc_r+0x1c>
 8003b1c:	6994      	ldr	r4, [r2, #24]
 8003b1e:	42a3      	cmp	r3, r4
 8003b20:	db01      	blt.n	8003b26 <__sfputc_r+0x16>
 8003b22:	290a      	cmp	r1, #10
 8003b24:	d102      	bne.n	8003b2c <__sfputc_r+0x1c>
 8003b26:	bc10      	pop	{r4}
 8003b28:	f7ff bc6e 	b.w	8003408 <__swbuf_r>
 8003b2c:	6813      	ldr	r3, [r2, #0]
 8003b2e:	1c58      	adds	r0, r3, #1
 8003b30:	6010      	str	r0, [r2, #0]
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	4608      	mov	r0, r1
 8003b36:	bc10      	pop	{r4}
 8003b38:	4770      	bx	lr

08003b3a <__sfputs_r>:
 8003b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	460f      	mov	r7, r1
 8003b40:	4614      	mov	r4, r2
 8003b42:	18d5      	adds	r5, r2, r3
 8003b44:	42ac      	cmp	r4, r5
 8003b46:	d101      	bne.n	8003b4c <__sfputs_r+0x12>
 8003b48:	2000      	movs	r0, #0
 8003b4a:	e007      	b.n	8003b5c <__sfputs_r+0x22>
 8003b4c:	463a      	mov	r2, r7
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b54:	f7ff ffdc 	bl	8003b10 <__sfputc_r>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d1f3      	bne.n	8003b44 <__sfputs_r+0xa>
 8003b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b60 <_vfiprintf_r>:
 8003b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b64:	460d      	mov	r5, r1
 8003b66:	4614      	mov	r4, r2
 8003b68:	4698      	mov	r8, r3
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	b09d      	sub	sp, #116	; 0x74
 8003b6e:	b118      	cbz	r0, 8003b78 <_vfiprintf_r+0x18>
 8003b70:	6983      	ldr	r3, [r0, #24]
 8003b72:	b90b      	cbnz	r3, 8003b78 <_vfiprintf_r+0x18>
 8003b74:	f7ff fe22 	bl	80037bc <__sinit>
 8003b78:	4b89      	ldr	r3, [pc, #548]	; (8003da0 <_vfiprintf_r+0x240>)
 8003b7a:	429d      	cmp	r5, r3
 8003b7c:	d11b      	bne.n	8003bb6 <_vfiprintf_r+0x56>
 8003b7e:	6875      	ldr	r5, [r6, #4]
 8003b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b82:	07d9      	lsls	r1, r3, #31
 8003b84:	d405      	bmi.n	8003b92 <_vfiprintf_r+0x32>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	059a      	lsls	r2, r3, #22
 8003b8a:	d402      	bmi.n	8003b92 <_vfiprintf_r+0x32>
 8003b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b8e:	f7ff feb3 	bl	80038f8 <__retarget_lock_acquire_recursive>
 8003b92:	89ab      	ldrh	r3, [r5, #12]
 8003b94:	071b      	lsls	r3, r3, #28
 8003b96:	d501      	bpl.n	8003b9c <_vfiprintf_r+0x3c>
 8003b98:	692b      	ldr	r3, [r5, #16]
 8003b9a:	b9eb      	cbnz	r3, 8003bd8 <_vfiprintf_r+0x78>
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f7ff fc84 	bl	80034ac <__swsetup_r>
 8003ba4:	b1c0      	cbz	r0, 8003bd8 <_vfiprintf_r+0x78>
 8003ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ba8:	07dc      	lsls	r4, r3, #31
 8003baa:	d50e      	bpl.n	8003bca <_vfiprintf_r+0x6a>
 8003bac:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb0:	b01d      	add	sp, #116	; 0x74
 8003bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb6:	4b7b      	ldr	r3, [pc, #492]	; (8003da4 <_vfiprintf_r+0x244>)
 8003bb8:	429d      	cmp	r5, r3
 8003bba:	d101      	bne.n	8003bc0 <_vfiprintf_r+0x60>
 8003bbc:	68b5      	ldr	r5, [r6, #8]
 8003bbe:	e7df      	b.n	8003b80 <_vfiprintf_r+0x20>
 8003bc0:	4b79      	ldr	r3, [pc, #484]	; (8003da8 <_vfiprintf_r+0x248>)
 8003bc2:	429d      	cmp	r5, r3
 8003bc4:	bf08      	it	eq
 8003bc6:	68f5      	ldreq	r5, [r6, #12]
 8003bc8:	e7da      	b.n	8003b80 <_vfiprintf_r+0x20>
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	0598      	lsls	r0, r3, #22
 8003bce:	d4ed      	bmi.n	8003bac <_vfiprintf_r+0x4c>
 8003bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bd2:	f7ff fe92 	bl	80038fa <__retarget_lock_release_recursive>
 8003bd6:	e7e9      	b.n	8003bac <_vfiprintf_r+0x4c>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9309      	str	r3, [sp, #36]	; 0x24
 8003bdc:	2320      	movs	r3, #32
 8003bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003be2:	2330      	movs	r3, #48	; 0x30
 8003be4:	f04f 0901 	mov.w	r9, #1
 8003be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003dac <_vfiprintf_r+0x24c>
 8003bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	469a      	mov	sl, r3
 8003bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bfc:	b10a      	cbz	r2, 8003c02 <_vfiprintf_r+0xa2>
 8003bfe:	2a25      	cmp	r2, #37	; 0x25
 8003c00:	d1f9      	bne.n	8003bf6 <_vfiprintf_r+0x96>
 8003c02:	ebba 0b04 	subs.w	fp, sl, r4
 8003c06:	d00b      	beq.n	8003c20 <_vfiprintf_r+0xc0>
 8003c08:	465b      	mov	r3, fp
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff ff93 	bl	8003b3a <__sfputs_r>
 8003c14:	3001      	adds	r0, #1
 8003c16:	f000 80aa 	beq.w	8003d6e <_vfiprintf_r+0x20e>
 8003c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c1c:	445a      	add	r2, fp
 8003c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8003c20:	f89a 3000 	ldrb.w	r3, [sl]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a2 	beq.w	8003d6e <_vfiprintf_r+0x20e>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c34:	f10a 0a01 	add.w	sl, sl, #1
 8003c38:	9304      	str	r3, [sp, #16]
 8003c3a:	9307      	str	r3, [sp, #28]
 8003c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c40:	931a      	str	r3, [sp, #104]	; 0x68
 8003c42:	4654      	mov	r4, sl
 8003c44:	2205      	movs	r2, #5
 8003c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c4a:	4858      	ldr	r0, [pc, #352]	; (8003dac <_vfiprintf_r+0x24c>)
 8003c4c:	f000 faf8 	bl	8004240 <memchr>
 8003c50:	9a04      	ldr	r2, [sp, #16]
 8003c52:	b9d8      	cbnz	r0, 8003c8c <_vfiprintf_r+0x12c>
 8003c54:	06d1      	lsls	r1, r2, #27
 8003c56:	bf44      	itt	mi
 8003c58:	2320      	movmi	r3, #32
 8003c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c5e:	0713      	lsls	r3, r2, #28
 8003c60:	bf44      	itt	mi
 8003c62:	232b      	movmi	r3, #43	; 0x2b
 8003c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c68:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c6e:	d015      	beq.n	8003c9c <_vfiprintf_r+0x13c>
 8003c70:	4654      	mov	r4, sl
 8003c72:	2000      	movs	r0, #0
 8003c74:	f04f 0c0a 	mov.w	ip, #10
 8003c78:	9a07      	ldr	r2, [sp, #28]
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c80:	3b30      	subs	r3, #48	; 0x30
 8003c82:	2b09      	cmp	r3, #9
 8003c84:	d94e      	bls.n	8003d24 <_vfiprintf_r+0x1c4>
 8003c86:	b1b0      	cbz	r0, 8003cb6 <_vfiprintf_r+0x156>
 8003c88:	9207      	str	r2, [sp, #28]
 8003c8a:	e014      	b.n	8003cb6 <_vfiprintf_r+0x156>
 8003c8c:	eba0 0308 	sub.w	r3, r0, r8
 8003c90:	fa09 f303 	lsl.w	r3, r9, r3
 8003c94:	4313      	orrs	r3, r2
 8003c96:	46a2      	mov	sl, r4
 8003c98:	9304      	str	r3, [sp, #16]
 8003c9a:	e7d2      	b.n	8003c42 <_vfiprintf_r+0xe2>
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	1d19      	adds	r1, r3, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	9103      	str	r1, [sp, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bfbb      	ittet	lt
 8003ca8:	425b      	neglt	r3, r3
 8003caa:	f042 0202 	orrlt.w	r2, r2, #2
 8003cae:	9307      	strge	r3, [sp, #28]
 8003cb0:	9307      	strlt	r3, [sp, #28]
 8003cb2:	bfb8      	it	lt
 8003cb4:	9204      	strlt	r2, [sp, #16]
 8003cb6:	7823      	ldrb	r3, [r4, #0]
 8003cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8003cba:	d10c      	bne.n	8003cd6 <_vfiprintf_r+0x176>
 8003cbc:	7863      	ldrb	r3, [r4, #1]
 8003cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc0:	d135      	bne.n	8003d2e <_vfiprintf_r+0x1ce>
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	3402      	adds	r4, #2
 8003cc6:	1d1a      	adds	r2, r3, #4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	9203      	str	r2, [sp, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bfb8      	it	lt
 8003cd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003dbc <_vfiprintf_r+0x25c>
 8003cda:	2203      	movs	r2, #3
 8003cdc:	4650      	mov	r0, sl
 8003cde:	7821      	ldrb	r1, [r4, #0]
 8003ce0:	f000 faae 	bl	8004240 <memchr>
 8003ce4:	b140      	cbz	r0, 8003cf8 <_vfiprintf_r+0x198>
 8003ce6:	2340      	movs	r3, #64	; 0x40
 8003ce8:	eba0 000a 	sub.w	r0, r0, sl
 8003cec:	fa03 f000 	lsl.w	r0, r3, r0
 8003cf0:	9b04      	ldr	r3, [sp, #16]
 8003cf2:	3401      	adds	r4, #1
 8003cf4:	4303      	orrs	r3, r0
 8003cf6:	9304      	str	r3, [sp, #16]
 8003cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cfc:	2206      	movs	r2, #6
 8003cfe:	482c      	ldr	r0, [pc, #176]	; (8003db0 <_vfiprintf_r+0x250>)
 8003d00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d04:	f000 fa9c 	bl	8004240 <memchr>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d03f      	beq.n	8003d8c <_vfiprintf_r+0x22c>
 8003d0c:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <_vfiprintf_r+0x254>)
 8003d0e:	bb1b      	cbnz	r3, 8003d58 <_vfiprintf_r+0x1f8>
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	3307      	adds	r3, #7
 8003d14:	f023 0307 	bic.w	r3, r3, #7
 8003d18:	3308      	adds	r3, #8
 8003d1a:	9303      	str	r3, [sp, #12]
 8003d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d1e:	443b      	add	r3, r7
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	e767      	b.n	8003bf4 <_vfiprintf_r+0x94>
 8003d24:	460c      	mov	r4, r1
 8003d26:	2001      	movs	r0, #1
 8003d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d2c:	e7a5      	b.n	8003c7a <_vfiprintf_r+0x11a>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f04f 0c0a 	mov.w	ip, #10
 8003d34:	4619      	mov	r1, r3
 8003d36:	3401      	adds	r4, #1
 8003d38:	9305      	str	r3, [sp, #20]
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d40:	3a30      	subs	r2, #48	; 0x30
 8003d42:	2a09      	cmp	r2, #9
 8003d44:	d903      	bls.n	8003d4e <_vfiprintf_r+0x1ee>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0c5      	beq.n	8003cd6 <_vfiprintf_r+0x176>
 8003d4a:	9105      	str	r1, [sp, #20]
 8003d4c:	e7c3      	b.n	8003cd6 <_vfiprintf_r+0x176>
 8003d4e:	4604      	mov	r4, r0
 8003d50:	2301      	movs	r3, #1
 8003d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d56:	e7f0      	b.n	8003d3a <_vfiprintf_r+0x1da>
 8003d58:	ab03      	add	r3, sp, #12
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	462a      	mov	r2, r5
 8003d5e:	4630      	mov	r0, r6
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <_vfiprintf_r+0x258>)
 8003d62:	a904      	add	r1, sp, #16
 8003d64:	f3af 8000 	nop.w
 8003d68:	4607      	mov	r7, r0
 8003d6a:	1c78      	adds	r0, r7, #1
 8003d6c:	d1d6      	bne.n	8003d1c <_vfiprintf_r+0x1bc>
 8003d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d70:	07d9      	lsls	r1, r3, #31
 8003d72:	d405      	bmi.n	8003d80 <_vfiprintf_r+0x220>
 8003d74:	89ab      	ldrh	r3, [r5, #12]
 8003d76:	059a      	lsls	r2, r3, #22
 8003d78:	d402      	bmi.n	8003d80 <_vfiprintf_r+0x220>
 8003d7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d7c:	f7ff fdbd 	bl	80038fa <__retarget_lock_release_recursive>
 8003d80:	89ab      	ldrh	r3, [r5, #12]
 8003d82:	065b      	lsls	r3, r3, #25
 8003d84:	f53f af12 	bmi.w	8003bac <_vfiprintf_r+0x4c>
 8003d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d8a:	e711      	b.n	8003bb0 <_vfiprintf_r+0x50>
 8003d8c:	ab03      	add	r3, sp, #12
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	462a      	mov	r2, r5
 8003d92:	4630      	mov	r0, r6
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <_vfiprintf_r+0x258>)
 8003d96:	a904      	add	r1, sp, #16
 8003d98:	f000 f882 	bl	8003ea0 <_printf_i>
 8003d9c:	e7e4      	b.n	8003d68 <_vfiprintf_r+0x208>
 8003d9e:	bf00      	nop
 8003da0:	08004334 	.word	0x08004334
 8003da4:	08004354 	.word	0x08004354
 8003da8:	08004314 	.word	0x08004314
 8003dac:	08004374 	.word	0x08004374
 8003db0:	0800437e 	.word	0x0800437e
 8003db4:	00000000 	.word	0x00000000
 8003db8:	08003b3b 	.word	0x08003b3b
 8003dbc:	0800437a 	.word	0x0800437a

08003dc0 <_printf_common>:
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	4616      	mov	r6, r2
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	688a      	ldr	r2, [r1, #8]
 8003dca:	690b      	ldr	r3, [r1, #16]
 8003dcc:	4607      	mov	r7, r0
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	bfb8      	it	lt
 8003dd2:	4613      	movlt	r3, r2
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dda:	460c      	mov	r4, r1
 8003ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003de0:	b10a      	cbz	r2, 8003de6 <_printf_common+0x26>
 8003de2:	3301      	adds	r3, #1
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	0699      	lsls	r1, r3, #26
 8003dea:	bf42      	ittt	mi
 8003dec:	6833      	ldrmi	r3, [r6, #0]
 8003dee:	3302      	addmi	r3, #2
 8003df0:	6033      	strmi	r3, [r6, #0]
 8003df2:	6825      	ldr	r5, [r4, #0]
 8003df4:	f015 0506 	ands.w	r5, r5, #6
 8003df8:	d106      	bne.n	8003e08 <_printf_common+0x48>
 8003dfa:	f104 0a19 	add.w	sl, r4, #25
 8003dfe:	68e3      	ldr	r3, [r4, #12]
 8003e00:	6832      	ldr	r2, [r6, #0]
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	dc28      	bgt.n	8003e5a <_printf_common+0x9a>
 8003e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e0c:	1e13      	subs	r3, r2, #0
 8003e0e:	6822      	ldr	r2, [r4, #0]
 8003e10:	bf18      	it	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	0692      	lsls	r2, r2, #26
 8003e16:	d42d      	bmi.n	8003e74 <_printf_common+0xb4>
 8003e18:	4649      	mov	r1, r9
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e20:	47c0      	blx	r8
 8003e22:	3001      	adds	r0, #1
 8003e24:	d020      	beq.n	8003e68 <_printf_common+0xa8>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	68e5      	ldr	r5, [r4, #12]
 8003e2a:	f003 0306 	and.w	r3, r3, #6
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	bf18      	it	ne
 8003e32:	2500      	movne	r5, #0
 8003e34:	6832      	ldr	r2, [r6, #0]
 8003e36:	f04f 0600 	mov.w	r6, #0
 8003e3a:	68a3      	ldr	r3, [r4, #8]
 8003e3c:	bf08      	it	eq
 8003e3e:	1aad      	subeq	r5, r5, r2
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	bf08      	it	eq
 8003e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bfc4      	itt	gt
 8003e4c:	1a9b      	subgt	r3, r3, r2
 8003e4e:	18ed      	addgt	r5, r5, r3
 8003e50:	341a      	adds	r4, #26
 8003e52:	42b5      	cmp	r5, r6
 8003e54:	d11a      	bne.n	8003e8c <_printf_common+0xcc>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e008      	b.n	8003e6c <_printf_common+0xac>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	4649      	mov	r1, r9
 8003e60:	4638      	mov	r0, r7
 8003e62:	47c0      	blx	r8
 8003e64:	3001      	adds	r0, #1
 8003e66:	d103      	bne.n	8003e70 <_printf_common+0xb0>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7c4      	b.n	8003dfe <_printf_common+0x3e>
 8003e74:	2030      	movs	r0, #48	; 0x30
 8003e76:	18e1      	adds	r1, r4, r3
 8003e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e82:	4422      	add	r2, r4
 8003e84:	3302      	adds	r3, #2
 8003e86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e8a:	e7c5      	b.n	8003e18 <_printf_common+0x58>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4649      	mov	r1, r9
 8003e92:	4638      	mov	r0, r7
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d0e6      	beq.n	8003e68 <_printf_common+0xa8>
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7d9      	b.n	8003e52 <_printf_common+0x92>
	...

08003ea0 <_printf_i>:
 8003ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	7e27      	ldrb	r7, [r4, #24]
 8003ea8:	4691      	mov	r9, r2
 8003eaa:	2f78      	cmp	r7, #120	; 0x78
 8003eac:	4680      	mov	r8, r0
 8003eae:	469a      	mov	sl, r3
 8003eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eb6:	d807      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eb8:	2f62      	cmp	r7, #98	; 0x62
 8003eba:	d80a      	bhi.n	8003ed2 <_printf_i+0x32>
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	f000 80d9 	beq.w	8004074 <_printf_i+0x1d4>
 8003ec2:	2f58      	cmp	r7, #88	; 0x58
 8003ec4:	f000 80a4 	beq.w	8004010 <_printf_i+0x170>
 8003ec8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ed0:	e03a      	b.n	8003f48 <_printf_i+0xa8>
 8003ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ed6:	2b15      	cmp	r3, #21
 8003ed8:	d8f6      	bhi.n	8003ec8 <_printf_i+0x28>
 8003eda:	a001      	add	r0, pc, #4	; (adr r0, 8003ee0 <_printf_i+0x40>)
 8003edc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ee0:	08003f39 	.word	0x08003f39
 8003ee4:	08003f4d 	.word	0x08003f4d
 8003ee8:	08003ec9 	.word	0x08003ec9
 8003eec:	08003ec9 	.word	0x08003ec9
 8003ef0:	08003ec9 	.word	0x08003ec9
 8003ef4:	08003ec9 	.word	0x08003ec9
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003ec9 	.word	0x08003ec9
 8003f00:	08003ec9 	.word	0x08003ec9
 8003f04:	08003ec9 	.word	0x08003ec9
 8003f08:	08003ec9 	.word	0x08003ec9
 8003f0c:	0800405b 	.word	0x0800405b
 8003f10:	08003f7d 	.word	0x08003f7d
 8003f14:	0800403d 	.word	0x0800403d
 8003f18:	08003ec9 	.word	0x08003ec9
 8003f1c:	08003ec9 	.word	0x08003ec9
 8003f20:	0800407d 	.word	0x0800407d
 8003f24:	08003ec9 	.word	0x08003ec9
 8003f28:	08003f7d 	.word	0x08003f7d
 8003f2c:	08003ec9 	.word	0x08003ec9
 8003f30:	08003ec9 	.word	0x08003ec9
 8003f34:	08004045 	.word	0x08004045
 8003f38:	680b      	ldr	r3, [r1, #0]
 8003f3a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	600a      	str	r2, [r1, #0]
 8003f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0a4      	b.n	8004096 <_printf_i+0x1f6>
 8003f4c:	6825      	ldr	r5, [r4, #0]
 8003f4e:	6808      	ldr	r0, [r1, #0]
 8003f50:	062e      	lsls	r6, r5, #24
 8003f52:	f100 0304 	add.w	r3, r0, #4
 8003f56:	d50a      	bpl.n	8003f6e <_printf_i+0xce>
 8003f58:	6805      	ldr	r5, [r0, #0]
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	da03      	bge.n	8003f68 <_printf_i+0xc8>
 8003f60:	232d      	movs	r3, #45	; 0x2d
 8003f62:	426d      	negs	r5, r5
 8003f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f68:	230a      	movs	r3, #10
 8003f6a:	485e      	ldr	r0, [pc, #376]	; (80040e4 <_printf_i+0x244>)
 8003f6c:	e019      	b.n	8003fa2 <_printf_i+0x102>
 8003f6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f72:	6805      	ldr	r5, [r0, #0]
 8003f74:	600b      	str	r3, [r1, #0]
 8003f76:	bf18      	it	ne
 8003f78:	b22d      	sxthne	r5, r5
 8003f7a:	e7ef      	b.n	8003f5c <_printf_i+0xbc>
 8003f7c:	680b      	ldr	r3, [r1, #0]
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	1d18      	adds	r0, r3, #4
 8003f82:	6008      	str	r0, [r1, #0]
 8003f84:	0628      	lsls	r0, r5, #24
 8003f86:	d501      	bpl.n	8003f8c <_printf_i+0xec>
 8003f88:	681d      	ldr	r5, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <_printf_i+0xf2>
 8003f8c:	0669      	lsls	r1, r5, #25
 8003f8e:	d5fb      	bpl.n	8003f88 <_printf_i+0xe8>
 8003f90:	881d      	ldrh	r5, [r3, #0]
 8003f92:	2f6f      	cmp	r7, #111	; 0x6f
 8003f94:	bf0c      	ite	eq
 8003f96:	2308      	moveq	r3, #8
 8003f98:	230a      	movne	r3, #10
 8003f9a:	4852      	ldr	r0, [pc, #328]	; (80040e4 <_printf_i+0x244>)
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fa2:	6866      	ldr	r6, [r4, #4]
 8003fa4:	2e00      	cmp	r6, #0
 8003fa6:	bfa8      	it	ge
 8003fa8:	6821      	ldrge	r1, [r4, #0]
 8003faa:	60a6      	str	r6, [r4, #8]
 8003fac:	bfa4      	itt	ge
 8003fae:	f021 0104 	bicge.w	r1, r1, #4
 8003fb2:	6021      	strge	r1, [r4, #0]
 8003fb4:	b90d      	cbnz	r5, 8003fba <_printf_i+0x11a>
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	d04d      	beq.n	8004056 <_printf_i+0x1b6>
 8003fba:	4616      	mov	r6, r2
 8003fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8003fc4:	5dc7      	ldrb	r7, [r0, r7]
 8003fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fca:	462f      	mov	r7, r5
 8003fcc:	42bb      	cmp	r3, r7
 8003fce:	460d      	mov	r5, r1
 8003fd0:	d9f4      	bls.n	8003fbc <_printf_i+0x11c>
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d10b      	bne.n	8003fee <_printf_i+0x14e>
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	07df      	lsls	r7, r3, #31
 8003fda:	d508      	bpl.n	8003fee <_printf_i+0x14e>
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	6861      	ldr	r1, [r4, #4]
 8003fe0:	4299      	cmp	r1, r3
 8003fe2:	bfde      	ittt	le
 8003fe4:	2330      	movle	r3, #48	; 0x30
 8003fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fee:	1b92      	subs	r2, r2, r6
 8003ff0:	6122      	str	r2, [r4, #16]
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f8cd a000 	str.w	sl, [sp]
 8003ffc:	aa03      	add	r2, sp, #12
 8003ffe:	f7ff fedf 	bl	8003dc0 <_printf_common>
 8004002:	3001      	adds	r0, #1
 8004004:	d14c      	bne.n	80040a0 <_printf_i+0x200>
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	b004      	add	sp, #16
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	4834      	ldr	r0, [pc, #208]	; (80040e4 <_printf_i+0x244>)
 8004012:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004016:	680e      	ldr	r6, [r1, #0]
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	f856 5b04 	ldr.w	r5, [r6], #4
 800401e:	061f      	lsls	r7, r3, #24
 8004020:	600e      	str	r6, [r1, #0]
 8004022:	d514      	bpl.n	800404e <_printf_i+0x1ae>
 8004024:	07d9      	lsls	r1, r3, #31
 8004026:	bf44      	itt	mi
 8004028:	f043 0320 	orrmi.w	r3, r3, #32
 800402c:	6023      	strmi	r3, [r4, #0]
 800402e:	b91d      	cbnz	r5, 8004038 <_printf_i+0x198>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f023 0320 	bic.w	r3, r3, #32
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	2310      	movs	r3, #16
 800403a:	e7af      	b.n	8003f9c <_printf_i+0xfc>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	f043 0320 	orr.w	r3, r3, #32
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	2378      	movs	r3, #120	; 0x78
 8004046:	4828      	ldr	r0, [pc, #160]	; (80040e8 <_printf_i+0x248>)
 8004048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800404c:	e7e3      	b.n	8004016 <_printf_i+0x176>
 800404e:	065e      	lsls	r6, r3, #25
 8004050:	bf48      	it	mi
 8004052:	b2ad      	uxthmi	r5, r5
 8004054:	e7e6      	b.n	8004024 <_printf_i+0x184>
 8004056:	4616      	mov	r6, r2
 8004058:	e7bb      	b.n	8003fd2 <_printf_i+0x132>
 800405a:	680b      	ldr	r3, [r1, #0]
 800405c:	6826      	ldr	r6, [r4, #0]
 800405e:	1d1d      	adds	r5, r3, #4
 8004060:	6960      	ldr	r0, [r4, #20]
 8004062:	600d      	str	r5, [r1, #0]
 8004064:	0635      	lsls	r5, r6, #24
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	d501      	bpl.n	800406e <_printf_i+0x1ce>
 800406a:	6018      	str	r0, [r3, #0]
 800406c:	e002      	b.n	8004074 <_printf_i+0x1d4>
 800406e:	0671      	lsls	r1, r6, #25
 8004070:	d5fb      	bpl.n	800406a <_printf_i+0x1ca>
 8004072:	8018      	strh	r0, [r3, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	4616      	mov	r6, r2
 8004078:	6123      	str	r3, [r4, #16]
 800407a:	e7ba      	b.n	8003ff2 <_printf_i+0x152>
 800407c:	680b      	ldr	r3, [r1, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	600a      	str	r2, [r1, #0]
 8004082:	681e      	ldr	r6, [r3, #0]
 8004084:	2100      	movs	r1, #0
 8004086:	4630      	mov	r0, r6
 8004088:	6862      	ldr	r2, [r4, #4]
 800408a:	f000 f8d9 	bl	8004240 <memchr>
 800408e:	b108      	cbz	r0, 8004094 <_printf_i+0x1f4>
 8004090:	1b80      	subs	r0, r0, r6
 8004092:	6060      	str	r0, [r4, #4]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	2300      	movs	r3, #0
 800409a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409e:	e7a8      	b.n	8003ff2 <_printf_i+0x152>
 80040a0:	4632      	mov	r2, r6
 80040a2:	4649      	mov	r1, r9
 80040a4:	4640      	mov	r0, r8
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	47d0      	blx	sl
 80040aa:	3001      	adds	r0, #1
 80040ac:	d0ab      	beq.n	8004006 <_printf_i+0x166>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	079b      	lsls	r3, r3, #30
 80040b2:	d413      	bmi.n	80040dc <_printf_i+0x23c>
 80040b4:	68e0      	ldr	r0, [r4, #12]
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	4298      	cmp	r0, r3
 80040ba:	bfb8      	it	lt
 80040bc:	4618      	movlt	r0, r3
 80040be:	e7a4      	b.n	800400a <_printf_i+0x16a>
 80040c0:	2301      	movs	r3, #1
 80040c2:	4632      	mov	r2, r6
 80040c4:	4649      	mov	r1, r9
 80040c6:	4640      	mov	r0, r8
 80040c8:	47d0      	blx	sl
 80040ca:	3001      	adds	r0, #1
 80040cc:	d09b      	beq.n	8004006 <_printf_i+0x166>
 80040ce:	3501      	adds	r5, #1
 80040d0:	68e3      	ldr	r3, [r4, #12]
 80040d2:	9903      	ldr	r1, [sp, #12]
 80040d4:	1a5b      	subs	r3, r3, r1
 80040d6:	42ab      	cmp	r3, r5
 80040d8:	dcf2      	bgt.n	80040c0 <_printf_i+0x220>
 80040da:	e7eb      	b.n	80040b4 <_printf_i+0x214>
 80040dc:	2500      	movs	r5, #0
 80040de:	f104 0619 	add.w	r6, r4, #25
 80040e2:	e7f5      	b.n	80040d0 <_printf_i+0x230>
 80040e4:	08004385 	.word	0x08004385
 80040e8:	08004396 	.word	0x08004396

080040ec <_sbrk_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	2300      	movs	r3, #0
 80040f0:	4d05      	ldr	r5, [pc, #20]	; (8004108 <_sbrk_r+0x1c>)
 80040f2:	4604      	mov	r4, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	602b      	str	r3, [r5, #0]
 80040f8:	f7fc fe8c 	bl	8000e14 <_sbrk>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_sbrk_r+0x1a>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_sbrk_r+0x1a>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	200001bc 	.word	0x200001bc

0800410c <__sread>:
 800410c:	b510      	push	{r4, lr}
 800410e:	460c      	mov	r4, r1
 8004110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004114:	f000 f8ae 	bl	8004274 <_read_r>
 8004118:	2800      	cmp	r0, #0
 800411a:	bfab      	itete	ge
 800411c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800411e:	89a3      	ldrhlt	r3, [r4, #12]
 8004120:	181b      	addge	r3, r3, r0
 8004122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004126:	bfac      	ite	ge
 8004128:	6563      	strge	r3, [r4, #84]	; 0x54
 800412a:	81a3      	strhlt	r3, [r4, #12]
 800412c:	bd10      	pop	{r4, pc}

0800412e <__swrite>:
 800412e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004132:	461f      	mov	r7, r3
 8004134:	898b      	ldrh	r3, [r1, #12]
 8004136:	4605      	mov	r5, r0
 8004138:	05db      	lsls	r3, r3, #23
 800413a:	460c      	mov	r4, r1
 800413c:	4616      	mov	r6, r2
 800413e:	d505      	bpl.n	800414c <__swrite+0x1e>
 8004140:	2302      	movs	r3, #2
 8004142:	2200      	movs	r2, #0
 8004144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004148:	f000 f868 	bl	800421c <_lseek_r>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	4632      	mov	r2, r6
 8004150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004154:	81a3      	strh	r3, [r4, #12]
 8004156:	4628      	mov	r0, r5
 8004158:	463b      	mov	r3, r7
 800415a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800415e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004162:	f000 b817 	b.w	8004194 <_write_r>

08004166 <__sseek>:
 8004166:	b510      	push	{r4, lr}
 8004168:	460c      	mov	r4, r1
 800416a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800416e:	f000 f855 	bl	800421c <_lseek_r>
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	bf15      	itete	ne
 8004178:	6560      	strne	r0, [r4, #84]	; 0x54
 800417a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800417e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004182:	81a3      	strheq	r3, [r4, #12]
 8004184:	bf18      	it	ne
 8004186:	81a3      	strhne	r3, [r4, #12]
 8004188:	bd10      	pop	{r4, pc}

0800418a <__sclose>:
 800418a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418e:	f000 b813 	b.w	80041b8 <_close_r>
	...

08004194 <_write_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	2200      	movs	r2, #0
 800419e:	4d05      	ldr	r5, [pc, #20]	; (80041b4 <_write_r+0x20>)
 80041a0:	602a      	str	r2, [r5, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7fc fde9 	bl	8000d7a <_write>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d102      	bne.n	80041b2 <_write_r+0x1e>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	b103      	cbz	r3, 80041b2 <_write_r+0x1e>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	200001bc 	.word	0x200001bc

080041b8 <_close_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	2300      	movs	r3, #0
 80041bc:	4d05      	ldr	r5, [pc, #20]	; (80041d4 <_close_r+0x1c>)
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fc fdf5 	bl	8000db2 <_close>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_close_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_close_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	200001bc 	.word	0x200001bc

080041d8 <_fstat_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	2300      	movs	r3, #0
 80041dc:	4d06      	ldr	r5, [pc, #24]	; (80041f8 <_fstat_r+0x20>)
 80041de:	4604      	mov	r4, r0
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	f7fc fdef 	bl	8000dc8 <_fstat>
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	d102      	bne.n	80041f4 <_fstat_r+0x1c>
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	b103      	cbz	r3, 80041f4 <_fstat_r+0x1c>
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	bd38      	pop	{r3, r4, r5, pc}
 80041f6:	bf00      	nop
 80041f8:	200001bc 	.word	0x200001bc

080041fc <_isatty_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	2300      	movs	r3, #0
 8004200:	4d05      	ldr	r5, [pc, #20]	; (8004218 <_isatty_r+0x1c>)
 8004202:	4604      	mov	r4, r0
 8004204:	4608      	mov	r0, r1
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	f7fc fded 	bl	8000de6 <_isatty>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_isatty_r+0x1a>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_isatty_r+0x1a>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	200001bc 	.word	0x200001bc

0800421c <_lseek_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	2200      	movs	r2, #0
 8004226:	4d05      	ldr	r5, [pc, #20]	; (800423c <_lseek_r+0x20>)
 8004228:	602a      	str	r2, [r5, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	f7fc fde5 	bl	8000dfa <_lseek>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_lseek_r+0x1e>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_lseek_r+0x1e>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	200001bc 	.word	0x200001bc

08004240 <memchr>:
 8004240:	4603      	mov	r3, r0
 8004242:	b510      	push	{r4, lr}
 8004244:	b2c9      	uxtb	r1, r1
 8004246:	4402      	add	r2, r0
 8004248:	4293      	cmp	r3, r2
 800424a:	4618      	mov	r0, r3
 800424c:	d101      	bne.n	8004252 <memchr+0x12>
 800424e:	2000      	movs	r0, #0
 8004250:	e003      	b.n	800425a <memchr+0x1a>
 8004252:	7804      	ldrb	r4, [r0, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	428c      	cmp	r4, r1
 8004258:	d1f6      	bne.n	8004248 <memchr+0x8>
 800425a:	bd10      	pop	{r4, pc}

0800425c <__malloc_lock>:
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <__malloc_lock+0x8>)
 800425e:	f7ff bb4b 	b.w	80038f8 <__retarget_lock_acquire_recursive>
 8004262:	bf00      	nop
 8004264:	200001b4 	.word	0x200001b4

08004268 <__malloc_unlock>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__malloc_unlock+0x8>)
 800426a:	f7ff bb46 	b.w	80038fa <__retarget_lock_release_recursive>
 800426e:	bf00      	nop
 8004270:	200001b4 	.word	0x200001b4

08004274 <_read_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4604      	mov	r4, r0
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	2200      	movs	r2, #0
 800427e:	4d05      	ldr	r5, [pc, #20]	; (8004294 <_read_r+0x20>)
 8004280:	602a      	str	r2, [r5, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f7fc fd5c 	bl	8000d40 <_read>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_read_r+0x1e>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	b103      	cbz	r3, 8004292 <_read_r+0x1e>
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	200001bc 	.word	0x200001bc

08004298 <_init>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr

080042a4 <_fini>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr
