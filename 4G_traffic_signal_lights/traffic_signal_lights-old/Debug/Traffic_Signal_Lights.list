
Traffic_Signal_Lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f7c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800a168  0800a168  0001a168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a70c  0800a70c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a70c  0800a70c  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a70c  0800a70c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a710  0800a710  0001a710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800a714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000021c  0800a930  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  0800a930  00020880  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ddc  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df3  00000000  00000000  00034021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00036e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00037f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003faa  00000000  00000000  00039028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f0c  00000000  00000000  0003cfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1b4  00000000  00000000  0004fede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed092  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006020  00000000  00000000  000ed0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000021c 	.word	0x2000021c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a14c 	.word	0x0800a14c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000220 	.word	0x20000220
 8000224:	0800a14c 	.word	0x0800a14c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	460c      	mov	r4, r1
 8000c44:	4605      	mov	r5, r0
 8000c46:	4621      	mov	r1, r4
 8000c48:	4628      	mov	r0, r5
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <send_data_to_dtu>:
 * @param       size:   发送数据大小
 *
 * @return      无
 *
 */
void send_data_to_dtu(uint8_t *data, uint32_t size) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
//
//    UART5->DR = data[i];
//  }
//	   HAL_UART_Transmit(&huart3, data, size, 100);
//	    HAL_UART_Receive_IT(&huart3, &uart_temp, 1);
   HAL_UART_Transmit(&huart5, data, size, 100);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	2364      	movs	r3, #100	; 0x64
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <send_data_to_dtu+0x2c>)
 8000cc4:	f003 fd5d 	bl	8004782 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart5, &uart_temp, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4905      	ldr	r1, [pc, #20]	; (8000ce0 <send_data_to_dtu+0x30>)
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <send_data_to_dtu+0x2c>)
 8000cce:	f003 fdea 	bl	80048a6 <HAL_UART_Receive_IT>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000076c 	.word	0x2000076c
 8000ce0:	20000650 	.word	0x20000650

08000ce4 <cJSON_strdup>:

static internal_hooks global_hooks = {internal_malloc, internal_free,
                                      internal_realloc};

static unsigned char *cJSON_strdup(const unsigned char *string,
                                   const internal_hooks *const hooks) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  size_t length = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  unsigned char *copy = NULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]

  if (string == NULL) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <cJSON_strdup+0x1c>
    return NULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e015      	b.n	8000d2c <cJSON_strdup+0x48>
  }

  length = strlen((const char *)string) + sizeof("");
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fa91 	bl	8000228 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
  copy = (unsigned char *)hooks->allocate(length);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	4798      	blx	r3
 8000d14:	60b8      	str	r0, [r7, #8]
  if (copy == NULL) {
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <cJSON_strdup+0x3c>
    return NULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e005      	b.n	8000d2c <cJSON_strdup+0x48>
  }
  memcpy(copy, string, length);
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	68b8      	ldr	r0, [r7, #8]
 8000d26:	f004 f94f 	bl	8004fc8 <memcpy>

  return copy;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <cJSON_New_Item>:
    global_hooks.reallocate = realloc;
  }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks *const hooks) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  cJSON *node = (cJSON *)hooks->allocate(sizeof(cJSON));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	4798      	blx	r3
 8000d44:	60f8      	str	r0, [r7, #12]
  if (node) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <cJSON_New_Item+0x22>
    memset(node, '\0', sizeof(cJSON));
 8000d4c:	2228      	movs	r2, #40	; 0x28
 8000d4e:	2100      	movs	r1, #0
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f004 f947 	bl	8004fe4 <memset>
  }

  return node;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  cJSON *next = NULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  while (item != NULL) {
 8000d6c:	e037      	b.n	8000dde <cJSON_Delete+0x7e>
    next = item->next;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	60fb      	str	r3, [r7, #12]
    if (!(item->type & cJSON_IsReference) && (item->child != NULL)) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d108      	bne.n	8000d92 <cJSON_Delete+0x32>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <cJSON_Delete+0x32>
      cJSON_Delete(item->child);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffe7 	bl	8000d60 <cJSON_Delete>
    }
    if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL)) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d109      	bne.n	8000db2 <cJSON_Delete+0x52>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <cJSON_Delete+0x52>
      global_hooks.deallocate(item->valuestring);
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <cJSON_Delete+0x90>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6912      	ldr	r2, [r2, #16]
 8000dae:	4610      	mov	r0, r2
 8000db0:	4798      	blx	r3
    }
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <cJSON_Delete+0x72>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <cJSON_Delete+0x72>
      global_hooks.deallocate(item->string);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <cJSON_Delete+0x90>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6a12      	ldr	r2, [r2, #32]
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4798      	blx	r3
    }
    global_hooks.deallocate(item);
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <cJSON_Delete+0x90>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	4798      	blx	r3
    item = next;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	607b      	str	r3, [r7, #4]
  while (item != NULL) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1c4      	bne.n	8000d6e <cJSON_Delete+0xe>
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000000 	.word	0x20000000

08000df4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
  struct lconv *lconv = localeconv();
  return (unsigned char)lconv->decimal_point[0];
#else
  return '.';
 8000df8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <ensure>:
  cJSON_bool format; /* is this print a formatted print */
  internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char *ensure(printbuffer *const p, size_t needed) {
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
  unsigned char *newbuffer = NULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  size_t newsize = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]

  if ((p == NULL) || (p->buffer == NULL)) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <ensure+0x20>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <ensure+0x24>
    return NULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e083      	b.n	8000f2e <ensure+0x12c>
  }

  if ((p->length > 0) && (p->offset >= p->length)) {
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <ensure+0x3c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d301      	bcc.n	8000e3e <ensure+0x3c>
    /* make sure that offset is valid */
    return NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e077      	b.n	8000f2e <ensure+0x12c>
  }

  if (needed > INT_MAX) {
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	da01      	bge.n	8000e48 <ensure+0x46>
    /* sizes bigger than INT_MAX are currently not supported */
    return NULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e072      	b.n	8000f2e <ensure+0x12c>
  }

  needed += p->offset + 1;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	3301      	adds	r3, #1
 8000e52:	603b      	str	r3, [r7, #0]
  if (needed <= p->length) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d805      	bhi.n	8000e6a <ensure+0x68>
    return p->buffer + p->offset;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	4413      	add	r3, r2
 8000e68:	e061      	b.n	8000f2e <ensure+0x12c>
  }

  if (p->noalloc) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <ensure+0x74>
    return NULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e05b      	b.n	8000f2e <ensure+0x12c>
  }

  /* calculate new buffer size */
  if (needed > (INT_MAX / 2)) {
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e7c:	d308      	bcc.n	8000e90 <ensure+0x8e>
    /* overflow of int, use INT_MAX if possible */
    if (needed <= INT_MAX) {
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db03      	blt.n	8000e8c <ensure+0x8a>
      newsize = INT_MAX;
 8000e84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	e004      	b.n	8000e96 <ensure+0x94>
    } else {
      return NULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e04e      	b.n	8000f2e <ensure+0x12c>
    }
  } else {
    newsize = needed * 2;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
  }

  if (p->hooks.reallocate != NULL) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d018      	beq.n	8000ed0 <ensure+0xce>
    /* reallocate with realloc if available */
    newbuffer = (unsigned char *)p->hooks.reallocate(p->buffer, newsize);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4798      	blx	r3
 8000eac:	60f8      	str	r0, [r7, #12]
    if (newbuffer == NULL) {
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d132      	bne.n	8000f1a <ensure+0x118>
      p->hooks.deallocate(p->buffer);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4798      	blx	r3
      p->length = 0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
      p->buffer = NULL;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

      return NULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e02e      	b.n	8000f2e <ensure+0x12c>
    }
  } else {
    /* otherwise reallocate manually */
    newbuffer = (unsigned char *)p->hooks.allocate(newsize);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	68b8      	ldr	r0, [r7, #8]
 8000ed6:	4798      	blx	r3
 8000ed8:	60f8      	str	r0, [r7, #12]
    if (!newbuffer) {
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10d      	bne.n	8000efc <ensure+0xfa>
      p->hooks.deallocate(p->buffer);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4798      	blx	r3
      p->length = 0;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
      p->buffer = NULL;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]

      return NULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e018      	b.n	8000f2e <ensure+0x12c>
    }

    memcpy(newbuffer, p->buffer, p->offset + 1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6819      	ldr	r1, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	3301      	adds	r3, #1
 8000f06:	461a      	mov	r2, r3
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f004 f85d 	bl	8004fc8 <memcpy>
    p->hooks.deallocate(p->buffer);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	4610      	mov	r0, r2
 8000f18:	4798      	blx	r3
  }
  p->length = newsize;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	605a      	str	r2, [r3, #4]
  p->buffer = newbuffer;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	601a      	str	r2, [r3, #0]

  return newbuffer + p->offset;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	4413      	add	r3, r2
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset
 */
static void update_offset(printbuffer *const buffer) {
 8000f36:	b590      	push	{r4, r7, lr}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  const unsigned char *buffer_pointer = NULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  if ((buffer == NULL) || (buffer->buffer == NULL)) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d013      	beq.n	8000f70 <update_offset+0x3a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00f      	beq.n	8000f70 <update_offset+0x3a>
    return;
  }
  buffer_pointer = buffer->buffer + buffer->offset;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

  buffer->offset += strlen((const char *)buffer_pointer);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689c      	ldr	r4, [r3, #8]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f7ff f961 	bl	8000228 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	18e2      	adds	r2, r4, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	e000      	b.n	8000f72 <update_offset+0x3c>
    return;
 8000f70:	bf00      	nop
}
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}

08000f78 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b) {
 8000f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f7c:	b08a      	sub	sp, #40	; 0x28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000f84:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fa8:	f7ff fd92 	bl	8000ad0 <__aeabi_dcmpgt>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <compare_double+0x44>
 8000fb2:	69bc      	ldr	r4, [r7, #24]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000fba:	e003      	b.n	8000fc4 <compare_double+0x4c>
 8000fbc:	693c      	ldr	r4, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000fc4:	e9c7 4508 	strd	r4, r5, [r7, #32]
  return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8000fc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fd0:	f7ff f936 	bl	8000240 <__aeabi_dsub>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4690      	mov	r8, r2
 8000fda:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <compare_double+0x9c>)
 8000fe4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fe8:	f7ff fae2 	bl	80005b0 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	f7ff fd56 	bl	8000aa8 <__aeabi_dcmple>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <compare_double+0x8e>
 8001002:	2300      	movs	r3, #0
 8001004:	461c      	mov	r4, r3
 8001006:	b2e3      	uxtb	r3, r4
}
 8001008:	4618      	mov	r0, r3
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001012:	bf00      	nop
 8001014:	3cb00000 	.word	0x3cb00000

08001018 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON *const item,
                               printbuffer *const output_buffer) {
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	b093      	sub	sp, #76	; 0x4c
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 8001022:	2300      	movs	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
  double d = item->valuedouble;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800102c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  int length = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  size_t i = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
  unsigned char number_buffer[26] = {
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	829a      	strh	r2, [r3, #20]
      0}; /* temporary buffer to print the number into */
  unsigned char decimal_point = get_decimal_point();
 800104e:	f7ff fed1 	bl	8000df4 <get_decimal_point>
 8001052:	4603      	mov	r3, r0
 8001054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  double test = 0.0;
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c7 2302 	strd	r2, r3, [r7, #8]

  if (output_buffer == NULL) {
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <print_number+0x56>
    return false;
 800106a:	2300      	movs	r3, #0
 800106c:	e098      	b.n	80011a0 <print_number+0x188>
  }

  /* This checks for NaN and Infinity */
  if (isnan(d) || isinf(d)) {
 800106e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001072:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001076:	f7ff fd35 	bl	8000ae4 <__aeabi_dcmpun>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d121      	bne.n	80010c4 <print_number+0xac>
 8001080:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001084:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001088:	2301      	movs	r3, #1
 800108a:	461e      	mov	r6, r3
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <print_number+0x190>)
 8001092:	4620      	mov	r0, r4
 8001094:	4629      	mov	r1, r5
 8001096:	f7ff fd25 	bl	8000ae4 <__aeabi_dcmpun>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10b      	bne.n	80010b8 <print_number+0xa0>
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <print_number+0x190>)
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff fcfd 	bl	8000aa8 <__aeabi_dcmple>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <print_number+0xa0>
 80010b4:	2300      	movs	r3, #0
 80010b6:	461e      	mov	r6, r3
 80010b8:	b2f3      	uxtb	r3, r6
 80010ba:	f083 0301 	eor.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <print_number+0xbc>
    length = sprintf((char *)number_buffer, "null");
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4938      	ldr	r1, [pc, #224]	; (80011ac <print_number+0x194>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 ff3c 	bl	8005f48 <siprintf>
 80010d0:	6478      	str	r0, [r7, #68]	; 0x44
 80010d2:	e023      	b.n	800111c <print_number+0x104>
  } else {
    /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits
     */
    length = sprintf((char *)number_buffer, "%1.15g", d);
 80010d4:	f107 0014 	add.w	r0, r7, #20
 80010d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010dc:	4934      	ldr	r1, [pc, #208]	; (80011b0 <print_number+0x198>)
 80010de:	f004 ff33 	bl	8005f48 <siprintf>
 80010e2:	6478      	str	r0, [r7, #68]	; 0x44

    /* Check whether the original double can be recovered */
    if ((sscanf((char *)number_buffer, "%lg", &test) != 1) ||
 80010e4:	f107 0208 	add.w	r2, r7, #8
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4931      	ldr	r1, [pc, #196]	; (80011b4 <print_number+0x19c>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 ff4a 	bl	8005f88 <siscanf>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d108      	bne.n	800110c <print_number+0xf4>
        !compare_double((double)test, d)) {
 80010fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001102:	f7ff ff39 	bl	8000f78 <compare_double>
 8001106:	4603      	mov	r3, r0
    if ((sscanf((char *)number_buffer, "%lg", &test) != 1) ||
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <print_number+0x104>
      /* If not, print with 17 decimal places of precision */
      length = sprintf((char *)number_buffer, "%1.17g", d);
 800110c:	f107 0014 	add.w	r0, r7, #20
 8001110:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001114:	4928      	ldr	r1, [pc, #160]	; (80011b8 <print_number+0x1a0>)
 8001116:	f004 ff17 	bl	8005f48 <siprintf>
 800111a:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  /* sprintf failed or buffer overrun occurred */
  if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1))) {
 800111c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800111e:	2b00      	cmp	r3, #0
 8001120:	db02      	blt.n	8001128 <print_number+0x110>
 8001122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001124:	2b19      	cmp	r3, #25
 8001126:	dd01      	ble.n	800112c <print_number+0x114>
    return false;
 8001128:	2300      	movs	r3, #0
 800112a:	e039      	b.n	80011a0 <print_number+0x188>
  }

  /* reserve appropriate space in the output */
  output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800112c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800112e:	3301      	adds	r3, #1
 8001130:	4619      	mov	r1, r3
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f7ff fe65 	bl	8000e02 <ensure>
 8001138:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (output_pointer == NULL) {
 800113a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <print_number+0x12c>
    return false;
 8001140:	2300      	movs	r3, #0
 8001142:	e02d      	b.n	80011a0 <print_number+0x188>
  }

  /* copy the printed number to the output and replace locale
   * dependent decimal point with '.' */
  for (i = 0; i < ((size_t)length); i++) {
 8001144:	2300      	movs	r3, #0
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
 8001148:	e01a      	b.n	8001180 <print_number+0x168>
    if (number_buffer[i] == decimal_point) {
 800114a:	f107 0214 	add.w	r2, r7, #20
 800114e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001158:	429a      	cmp	r2, r3
 800115a:	d105      	bne.n	8001168 <print_number+0x150>
      output_pointer[i] = '.';
 800115c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800115e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001160:	4413      	add	r3, r2
 8001162:	222e      	movs	r2, #46	; 0x2e
 8001164:	701a      	strb	r2, [r3, #0]
      continue;
 8001166:	e008      	b.n	800117a <print_number+0x162>
    }

    output_pointer[i] = number_buffer[i];
 8001168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800116a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800116c:	4413      	add	r3, r2
 800116e:	f107 0114 	add.w	r1, r7, #20
 8001172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001174:	440a      	add	r2, r1
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ((size_t)length); i++) {
 800117a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800117c:	3301      	adds	r3, #1
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
 8001180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001184:	429a      	cmp	r2, r3
 8001186:	d3e0      	bcc.n	800114a <print_number+0x132>
  }
  output_pointer[i] = '\0';
 8001188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800118a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118c:	4413      	add	r3, r2
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]

  output_buffer->offset += (size_t)length;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001198:	441a      	add	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	609a      	str	r2, [r3, #8]

  return true;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	374c      	adds	r7, #76	; 0x4c
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a8:	7fefffff 	.word	0x7fefffff
 80011ac:	0800a174 	.word	0x0800a174
 80011b0:	0800a17c 	.word	0x0800a17c
 80011b4:	0800a184 	.word	0x0800a184
 80011b8:	0800a188 	.word	0x0800a188

080011bc <print_string_ptr>:
  return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char *const input,
                                   printbuffer *const output_buffer) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  const unsigned char *input_pointer = NULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  unsigned char *output = NULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  unsigned char *output_pointer = NULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  size_t output_length = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  /* numbers of additional characters needed for escaping */
  size_t escape_characters = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]

  if (output_buffer == NULL) {
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <print_string_ptr+0x28>
    return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e110      	b.n	8001406 <print_string_ptr+0x24a>
  }

  /* empty string */
  if (input == NULL) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <print_string_ptr+0x52>
    output = ensure(output_buffer, sizeof("\"\""));
 80011ea:	2103      	movs	r1, #3
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff fe08 	bl	8000e02 <ensure>
 80011f2:	6138      	str	r0, [r7, #16]
    if (output == NULL) {
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <print_string_ptr+0x42>
      return false;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e103      	b.n	8001406 <print_string_ptr+0x24a>
    }
    strcpy((char *)output, "\"\"");
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4a83      	ldr	r2, [pc, #524]	; (8001410 <print_string_ptr+0x254>)
 8001202:	8811      	ldrh	r1, [r2, #0]
 8001204:	7892      	ldrb	r2, [r2, #2]
 8001206:	8019      	strh	r1, [r3, #0]
 8001208:	709a      	strb	r2, [r3, #2]

    return true;
 800120a:	2301      	movs	r3, #1
 800120c:	e0fb      	b.n	8001406 <print_string_ptr+0x24a>
  }

  /* set "flag" to 1 if something needs to be escaped */
  for (input_pointer = input; *input_pointer; input_pointer++) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e023      	b.n	800125c <print_string_ptr+0xa0>
    switch (*input_pointer) {
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b22      	cmp	r3, #34	; 0x22
 800121a:	dc0e      	bgt.n	800123a <print_string_ptr+0x7e>
 800121c:	2b08      	cmp	r3, #8
 800121e:	db12      	blt.n	8001246 <print_string_ptr+0x8a>
 8001220:	3b08      	subs	r3, #8
 8001222:	2201      	movs	r2, #1
 8001224:	409a      	lsls	r2, r3
 8001226:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <print_string_ptr+0x258>)
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <print_string_ptr+0x82>
 8001238:	e005      	b.n	8001246 <print_string_ptr+0x8a>
 800123a:	2b5c      	cmp	r3, #92	; 0x5c
 800123c:	d103      	bne.n	8001246 <print_string_ptr+0x8a>
    case '\f':
    case '\n':
    case '\r':
    case '\t':
      /* one character escape sequence */
      escape_characters++;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
      break;
 8001244:	e007      	b.n	8001256 <print_string_ptr+0x9a>
    default:
      if (*input_pointer < 32) {
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b1f      	cmp	r3, #31
 800124c:	d802      	bhi.n	8001254 <print_string_ptr+0x98>
        /* UTF-16 escape sequence uXXXX */
        escape_characters += 5;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3305      	adds	r3, #5
 8001252:	617b      	str	r3, [r7, #20]
      }
      break;
 8001254:	bf00      	nop
  for (input_pointer = input; *input_pointer; input_pointer++) {
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1d7      	bne.n	8001214 <print_string_ptr+0x58>
    }
  }
  output_length = (size_t)(input_pointer - input) + escape_characters;
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	461a      	mov	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]

  output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3303      	adds	r3, #3
 8001276:	4619      	mov	r1, r3
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f7ff fdc2 	bl	8000e02 <ensure>
 800127e:	6138      	str	r0, [r7, #16]
  if (output == NULL) {
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <print_string_ptr+0xce>
    return false;
 8001286:	2300      	movs	r3, #0
 8001288:	e0bd      	b.n	8001406 <print_string_ptr+0x24a>
  }

  /* no characters have to be escaped */
  if (escape_characters == 0) {
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d117      	bne.n	80012c0 <print_string_ptr+0x104>
    output[0] = '\"';
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2222      	movs	r2, #34	; 0x22
 8001294:	701a      	strb	r2, [r3, #0]
    memcpy(output + 1, input, output_length);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	3301      	adds	r3, #1
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 fe92 	bl	8004fc8 <memcpy>
    output[output_length + 1] = '\"';
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4413      	add	r3, r2
 80012ac:	2222      	movs	r2, #34	; 0x22
 80012ae:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3302      	adds	r3, #2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

    return true;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0a2      	b.n	8001406 <print_string_ptr+0x24a>
  }

  output[0] = '\"';
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2222      	movs	r2, #34	; 0x22
 80012c4:	701a      	strb	r2, [r3, #0]
  output_pointer = output + 1;
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  /* copy the string */
  for (input_pointer = input; *input_pointer != '\0';
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	e087      	b.n	80013e2 <print_string_ptr+0x226>
       (void)input_pointer++, output_pointer++) {
    if ((*input_pointer > 31) && (*input_pointer != '\"') &&
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b1f      	cmp	r3, #31
 80012d8:	d90c      	bls.n	80012f4 <print_string_ptr+0x138>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b22      	cmp	r3, #34	; 0x22
 80012e0:	d008      	beq.n	80012f4 <print_string_ptr+0x138>
        (*input_pointer != '\\')) {
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	781b      	ldrb	r3, [r3, #0]
    if ((*input_pointer > 31) && (*input_pointer != '\"') &&
 80012e6:	2b5c      	cmp	r3, #92	; 0x5c
 80012e8:	d004      	beq.n	80012f4 <print_string_ptr+0x138>
      /* normal character, copy */
      *output_pointer = *input_pointer;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e070      	b.n	80013d6 <print_string_ptr+0x21a>
    } else {
      /* character needs to be escaped */
      *output_pointer++ = '\\';
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	61ba      	str	r2, [r7, #24]
 80012fa:	225c      	movs	r2, #92	; 0x5c
 80012fc:	701a      	strb	r2, [r3, #0]
      switch (*input_pointer) {
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b22      	cmp	r3, #34	; 0x22
 8001304:	dc3e      	bgt.n	8001384 <print_string_ptr+0x1c8>
 8001306:	2b08      	cmp	r3, #8
 8001308:	db5a      	blt.n	80013c0 <print_string_ptr+0x204>
 800130a:	3b08      	subs	r3, #8
 800130c:	2b1a      	cmp	r3, #26
 800130e:	d857      	bhi.n	80013c0 <print_string_ptr+0x204>
 8001310:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <print_string_ptr+0x15c>)
 8001312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001316:	bf00      	nop
 8001318:	08001399 	.word	0x08001399
 800131c:	080013b9 	.word	0x080013b9
 8001320:	080013a9 	.word	0x080013a9
 8001324:	080013c1 	.word	0x080013c1
 8001328:	080013a1 	.word	0x080013a1
 800132c:	080013b1 	.word	0x080013b1
 8001330:	080013c1 	.word	0x080013c1
 8001334:	080013c1 	.word	0x080013c1
 8001338:	080013c1 	.word	0x080013c1
 800133c:	080013c1 	.word	0x080013c1
 8001340:	080013c1 	.word	0x080013c1
 8001344:	080013c1 	.word	0x080013c1
 8001348:	080013c1 	.word	0x080013c1
 800134c:	080013c1 	.word	0x080013c1
 8001350:	080013c1 	.word	0x080013c1
 8001354:	080013c1 	.word	0x080013c1
 8001358:	080013c1 	.word	0x080013c1
 800135c:	080013c1 	.word	0x080013c1
 8001360:	080013c1 	.word	0x080013c1
 8001364:	080013c1 	.word	0x080013c1
 8001368:	080013c1 	.word	0x080013c1
 800136c:	080013c1 	.word	0x080013c1
 8001370:	080013c1 	.word	0x080013c1
 8001374:	080013c1 	.word	0x080013c1
 8001378:	080013c1 	.word	0x080013c1
 800137c:	080013c1 	.word	0x080013c1
 8001380:	08001391 	.word	0x08001391
 8001384:	2b5c      	cmp	r3, #92	; 0x5c
 8001386:	d11b      	bne.n	80013c0 <print_string_ptr+0x204>
      case '\\':
        *output_pointer = '\\';
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	225c      	movs	r2, #92	; 0x5c
 800138c:	701a      	strb	r2, [r3, #0]
        break;
 800138e:	e022      	b.n	80013d6 <print_string_ptr+0x21a>
      case '\"':
        *output_pointer = '\"';
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2222      	movs	r2, #34	; 0x22
 8001394:	701a      	strb	r2, [r3, #0]
        break;
 8001396:	e01e      	b.n	80013d6 <print_string_ptr+0x21a>
      case '\b':
        *output_pointer = 'b';
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2262      	movs	r2, #98	; 0x62
 800139c:	701a      	strb	r2, [r3, #0]
        break;
 800139e:	e01a      	b.n	80013d6 <print_string_ptr+0x21a>
      case '\f':
        *output_pointer = 'f';
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2266      	movs	r2, #102	; 0x66
 80013a4:	701a      	strb	r2, [r3, #0]
        break;
 80013a6:	e016      	b.n	80013d6 <print_string_ptr+0x21a>
      case '\n':
        *output_pointer = 'n';
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	226e      	movs	r2, #110	; 0x6e
 80013ac:	701a      	strb	r2, [r3, #0]
        break;
 80013ae:	e012      	b.n	80013d6 <print_string_ptr+0x21a>
      case '\r':
        *output_pointer = 'r';
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2272      	movs	r2, #114	; 0x72
 80013b4:	701a      	strb	r2, [r3, #0]
        break;
 80013b6:	e00e      	b.n	80013d6 <print_string_ptr+0x21a>
      case '\t':
        *output_pointer = 't';
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2274      	movs	r2, #116	; 0x74
 80013bc:	701a      	strb	r2, [r3, #0]
        break;
 80013be:	e00a      	b.n	80013d6 <print_string_ptr+0x21a>
      default:
        /* escape and print as unicode codepoint */
        sprintf((char *)output_pointer, "u%04x", *input_pointer);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4914      	ldr	r1, [pc, #80]	; (8001418 <print_string_ptr+0x25c>)
 80013c8:	69b8      	ldr	r0, [r7, #24]
 80013ca:	f004 fdbd 	bl	8005f48 <siprintf>
        output_pointer += 4;
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	3304      	adds	r3, #4
 80013d2:	61bb      	str	r3, [r7, #24]
        break;
 80013d4:	bf00      	nop
       (void)input_pointer++, output_pointer++) {
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	3301      	adds	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
  for (input_pointer = input; *input_pointer != '\0';
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f af73 	bne.w	80012d2 <print_string_ptr+0x116>
      }
    }
  }
  output[output_length + 1] = '\"';
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4413      	add	r3, r2
 80013f4:	2222      	movs	r2, #34	; 0x22
 80013f6:	701a      	strb	r2, [r3, #0]
  output[output_length + 2] = '\0';
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3302      	adds	r3, #2
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4413      	add	r3, r2
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

  return true;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	0800a190 	.word	0x0800a190
 8001414:	04000037 	.word	0x04000037
 8001418:	0800a194 	.word	0x0800a194

0800141c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON *const item, printbuffer *const p) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  return print_string_ptr((unsigned char *)item->valuestring, p);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fec5 	bl	80011bc <print_string_ptr>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON *const item, cJSON_bool format,
                            const internal_hooks *const hooks) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	; 0x38
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  static const size_t default_buffer_size = 256;
  printbuffer buffer[1];
  unsigned char *printed = NULL;
 8001448:	2300      	movs	r3, #0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34

  memset(buffer, 0, sizeof(buffer));
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2224      	movs	r2, #36	; 0x24
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fdc5 	bl	8004fe4 <memset>

  /* create buffer */
  buffer->buffer = (unsigned char *)hooks->allocate(default_buffer_size);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a3a      	ldr	r2, [pc, #232]	; (8001548 <print+0x10c>)
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	4610      	mov	r0, r2
 8001464:	4798      	blx	r3
 8001466:	4603      	mov	r3, r0
 8001468:	613b      	str	r3, [r7, #16]
  buffer->length = default_buffer_size;
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <print+0x10c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]
  buffer->format = format;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  buffer->hooks = *hooks;
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	ca07      	ldmia	r2, {r0, r1, r2}
 800147c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (buffer->buffer == NULL) {
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d045      	beq.n	8001512 <print+0xd6>
    goto fail;
  }

  /* print the value */
  if (!print_value(item, buffer)) {
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f86d 	bl	800156c <print_value>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d03e      	beq.n	8001516 <print+0xda>
    goto fail;
  }
  update_offset(buffer);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fd4a 	bl	8000f36 <update_offset>

  /* check if reallocate is available */
  if (hooks->reallocate != NULL) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d012      	beq.n	80014d0 <print+0x94>
    printed =
        (unsigned char *)hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	6938      	ldr	r0, [r7, #16]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	3201      	adds	r2, #1
 80014b4:	4611      	mov	r1, r2
 80014b6:	4798      	blx	r3
 80014b8:	6378      	str	r0, [r7, #52]	; 0x34
    if (printed == NULL) {
 80014ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d02c      	beq.n	800151a <print+0xde>
      goto fail;
    }

    /* free the buffer */
    hooks->deallocate(buffer->buffer);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4610      	mov	r0, r2
 80014c8:	4798      	blx	r3

    buffer->buffer = NULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	e01e      	b.n	800150e <print+0xd2>
  } else /* otherwise copy the JSON over to a new buffer */
  {
    printed = (unsigned char *)hooks->allocate(buffer->offset + 1);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	3201      	adds	r2, #1
 80014d8:	4610      	mov	r0, r2
 80014da:	4798      	blx	r3
 80014dc:	6378      	str	r0, [r7, #52]	; 0x34
    if (printed == NULL) {
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01c      	beq.n	800151e <print+0xe2>
      goto fail;
    }
    memcpy(printed, buffer->buffer,
 80014e4:	6939      	ldr	r1, [r7, #16]
           cjson_min(buffer->length, buffer->offset + 1));
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
    memcpy(printed, buffer->buffer,
 80014ec:	4293      	cmp	r3, r2
 80014ee:	bf28      	it	cs
 80014f0:	4613      	movcs	r3, r2
 80014f2:	461a      	mov	r2, r3
 80014f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014f6:	f003 fd67 	bl	8004fc8 <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014fe:	4413      	add	r3, r2
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]

    /* free the buffer */
    hooks->deallocate(buffer->buffer);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4610      	mov	r0, r2
 800150c:	4798      	blx	r3
  }

  return printed;
 800150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001510:	e016      	b.n	8001540 <print+0x104>
    goto fail;
 8001512:	bf00      	nop
 8001514:	e004      	b.n	8001520 <print+0xe4>
    goto fail;
 8001516:	bf00      	nop
 8001518:	e002      	b.n	8001520 <print+0xe4>
      goto fail;
 800151a:	bf00      	nop
 800151c:	e000      	b.n	8001520 <print+0xe4>
      goto fail;
 800151e:	bf00      	nop

fail:
  if (buffer->buffer != NULL) {
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <print+0xf4>
    hooks->deallocate(buffer->buffer);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4610      	mov	r0, r2
 800152e:	4798      	blx	r3
  }

  if (printed != NULL) {
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <print+0x102>
    hooks->deallocate(printed);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800153c:	4798      	blx	r3
  }

  return NULL;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3738      	adds	r7, #56	; 0x38
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	0800a224 	.word	0x0800a224

0800154c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return (char *)print(item, true, &global_hooks);
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <cJSON_Print+0x1c>)
 8001556:	2101      	movs	r1, #1
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff6f 	bl	800143c <print>
 800155e:	4603      	mov	r3, r0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000000 	.word	0x20000000

0800156c <print_value>:
  return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON *const item,
                              printbuffer *const output_buffer) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  unsigned char *output = NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]

  if ((item == NULL) || (output_buffer == NULL)) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <print_value+0x1a>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <print_value+0x1e>
    return false;
 8001586:	2300      	movs	r3, #0
 8001588:	e0c9      	b.n	800171e <print_value+0x1b2>
  }

  switch ((item->type) & 0xFF) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b80      	cmp	r3, #128	; 0x80
 8001592:	f000 808e 	beq.w	80016b2 <print_value+0x146>
 8001596:	2b80      	cmp	r3, #128	; 0x80
 8001598:	f300 80c0 	bgt.w	800171c <print_value+0x1b0>
 800159c:	2b20      	cmp	r3, #32
 800159e:	dc49      	bgt.n	8001634 <print_value+0xc8>
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f340 80bb 	ble.w	800171c <print_value+0x1b0>
 80015a6:	3b01      	subs	r3, #1
 80015a8:	2b1f      	cmp	r3, #31
 80015aa:	f200 80b7 	bhi.w	800171c <print_value+0x1b0>
 80015ae:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <print_value+0x48>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	0800165f 	.word	0x0800165f
 80015b8:	08001683 	.word	0x08001683
 80015bc:	0800171d 	.word	0x0800171d
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	0800171d 	.word	0x0800171d
 80015c8:	0800171d 	.word	0x0800171d
 80015cc:	0800171d 	.word	0x0800171d
 80015d0:	080016a7 	.word	0x080016a7
 80015d4:	0800171d 	.word	0x0800171d
 80015d8:	0800171d 	.word	0x0800171d
 80015dc:	0800171d 	.word	0x0800171d
 80015e0:	0800171d 	.word	0x0800171d
 80015e4:	0800171d 	.word	0x0800171d
 80015e8:	0800171d 	.word	0x0800171d
 80015ec:	0800171d 	.word	0x0800171d
 80015f0:	080016f9 	.word	0x080016f9
 80015f4:	0800171d 	.word	0x0800171d
 80015f8:	0800171d 	.word	0x0800171d
 80015fc:	0800171d 	.word	0x0800171d
 8001600:	0800171d 	.word	0x0800171d
 8001604:	0800171d 	.word	0x0800171d
 8001608:	0800171d 	.word	0x0800171d
 800160c:	0800171d 	.word	0x0800171d
 8001610:	0800171d 	.word	0x0800171d
 8001614:	0800171d 	.word	0x0800171d
 8001618:	0800171d 	.word	0x0800171d
 800161c:	0800171d 	.word	0x0800171d
 8001620:	0800171d 	.word	0x0800171d
 8001624:	0800171d 	.word	0x0800171d
 8001628:	0800171d 	.word	0x0800171d
 800162c:	0800171d 	.word	0x0800171d
 8001630:	08001705 	.word	0x08001705
 8001634:	2b40      	cmp	r3, #64	; 0x40
 8001636:	d06b      	beq.n	8001710 <print_value+0x1a4>
 8001638:	e070      	b.n	800171c <print_value+0x1b0>
  case cJSON_NULL:
    output = ensure(output_buffer, 5);
 800163a:	2105      	movs	r1, #5
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f7ff fbe0 	bl	8000e02 <ensure>
 8001642:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <print_value+0xe2>
      return false;
 800164a:	2300      	movs	r3, #0
 800164c:	e067      	b.n	800171e <print_value+0x1b2>
    }
    strcpy((char *)output, "null");
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a35      	ldr	r2, [pc, #212]	; (8001728 <print_value+0x1bc>)
 8001652:	6810      	ldr	r0, [r2, #0]
 8001654:	6018      	str	r0, [r3, #0]
 8001656:	7912      	ldrb	r2, [r2, #4]
 8001658:	711a      	strb	r2, [r3, #4]
    return true;
 800165a:	2301      	movs	r3, #1
 800165c:	e05f      	b.n	800171e <print_value+0x1b2>

  case cJSON_False:
    output = ensure(output_buffer, 6);
 800165e:	2106      	movs	r1, #6
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff fbce 	bl	8000e02 <ensure>
 8001666:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <print_value+0x106>
      return false;
 800166e:	2300      	movs	r3, #0
 8001670:	e055      	b.n	800171e <print_value+0x1b2>
    }
    strcpy((char *)output, "false");
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4a2d      	ldr	r2, [pc, #180]	; (800172c <print_value+0x1c0>)
 8001676:	6810      	ldr	r0, [r2, #0]
 8001678:	6018      	str	r0, [r3, #0]
 800167a:	8892      	ldrh	r2, [r2, #4]
 800167c:	809a      	strh	r2, [r3, #4]
    return true;
 800167e:	2301      	movs	r3, #1
 8001680:	e04d      	b.n	800171e <print_value+0x1b2>

  case cJSON_True:
    output = ensure(output_buffer, 5);
 8001682:	2105      	movs	r1, #5
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff fbbc 	bl	8000e02 <ensure>
 800168a:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <print_value+0x12a>
      return false;
 8001692:	2300      	movs	r3, #0
 8001694:	e043      	b.n	800171e <print_value+0x1b2>
    }
    strcpy((char *)output, "true");
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <print_value+0x1c4>)
 800169a:	6810      	ldr	r0, [r2, #0]
 800169c:	6018      	str	r0, [r3, #0]
 800169e:	7912      	ldrb	r2, [r2, #4]
 80016a0:	711a      	strb	r2, [r3, #4]
    return true;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e03b      	b.n	800171e <print_value+0x1b2>

  case cJSON_Number:
    return print_number(item, output_buffer);
 80016a6:	6839      	ldr	r1, [r7, #0]
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fcb5 	bl	8001018 <print_number>
 80016ae:	4603      	mov	r3, r0
 80016b0:	e035      	b.n	800171e <print_value+0x1b2>

  case cJSON_Raw: {
    size_t raw_length = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
    if (item->valuestring == NULL) {
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <print_value+0x156>
      return false;
 80016be:	2300      	movs	r3, #0
 80016c0:	e02d      	b.n	800171e <print_value+0x1b2>
    }

    raw_length = strlen(item->valuestring) + sizeof("");
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fdae 	bl	8000228 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	3301      	adds	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
    output = ensure(output_buffer, raw_length);
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f7ff fb94 	bl	8000e02 <ensure>
 80016da:	60f8      	str	r0, [r7, #12]
    if (output == NULL) {
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <print_value+0x17a>
      return false;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e01b      	b.n	800171e <print_value+0x1b2>
    }
    memcpy(output, item->valuestring, raw_length);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4619      	mov	r1, r3
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f003 fc6a 	bl	8004fc8 <memcpy>
    return true;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e012      	b.n	800171e <print_value+0x1b2>
  }

  case cJSON_String:
    return print_string(item, output_buffer);
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe8e 	bl	800141c <print_string>
 8001700:	4603      	mov	r3, r0
 8001702:	e00c      	b.n	800171e <print_value+0x1b2>

  case cJSON_Array:
    return print_array(item, output_buffer);
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f814 	bl	8001734 <print_array>
 800170c:	4603      	mov	r3, r0
 800170e:	e006      	b.n	800171e <print_value+0x1b2>

  case cJSON_Object:
    return print_object(item, output_buffer);
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f894 	bl	8001840 <print_object>
 8001718:	4603      	mov	r3, r0
 800171a:	e000      	b.n	800171e <print_value+0x1b2>

  default:
    return false;
 800171c:	2300      	movs	r3, #0
  }
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	0800a174 	.word	0x0800a174
 800172c:	0800a1a0 	.word	0x0800a1a0
 8001730:	0800a1a8 	.word	0x0800a1a8

08001734 <print_array>:
  return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON *const item,
                              printbuffer *const output_buffer) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  size_t length = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  cJSON *current_element = item->child;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	613b      	str	r3, [r7, #16]

  if (output_buffer == NULL) {
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <print_array+0x22>
    return false;
 8001752:	2300      	movs	r3, #0
 8001754:	e070      	b.n	8001838 <print_array+0x104>
  }

  /* Compose the output array. */
  /* opening square bracket */
  output_pointer = ensure(output_buffer, 1);
 8001756:	2101      	movs	r1, #1
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f7ff fb52 	bl	8000e02 <ensure>
 800175e:	6178      	str	r0, [r7, #20]
  if (output_pointer == NULL) {
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <print_array+0x36>
    return false;
 8001766:	2300      	movs	r3, #0
 8001768:	e066      	b.n	8001838 <print_array+0x104>
  }

  *output_pointer = '[';
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	225b      	movs	r2, #91	; 0x5b
 800176e:	701a      	strb	r2, [r3, #0]
  output_buffer->offset++;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	609a      	str	r2, [r3, #8]
  output_buffer->depth++;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	60da      	str	r2, [r3, #12]

  while (current_element != NULL) {
 8001784:	e03d      	b.n	8001802 <print_array+0xce>
    if (!print_value(current_element, output_buffer)) {
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	6938      	ldr	r0, [r7, #16]
 800178a:	f7ff feef 	bl	800156c <print_value>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <print_array+0x64>
      return false;
 8001794:	2300      	movs	r3, #0
 8001796:	e04f      	b.n	8001838 <print_array+0x104>
    }
    update_offset(output_buffer);
 8001798:	6838      	ldr	r0, [r7, #0]
 800179a:	f7ff fbcc 	bl	8000f36 <update_offset>
    if (current_element->next) {
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d02a      	beq.n	80017fc <print_array+0xc8>
      length = (size_t)(output_buffer->format ? 2 : 1);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <print_array+0x7e>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e000      	b.n	80017b4 <print_array+0x80>
 80017b2:	2301      	movs	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
      output_pointer = ensure(output_buffer, length + 1);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f7ff fb20 	bl	8000e02 <ensure>
 80017c2:	6178      	str	r0, [r7, #20]
      if (output_pointer == NULL) {
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <print_array+0x9a>
        return false;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e034      	b.n	8001838 <print_array+0x104>
      }
      *output_pointer++ = ',';
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	617a      	str	r2, [r7, #20]
 80017d4:	222c      	movs	r2, #44	; 0x2c
 80017d6:	701a      	strb	r2, [r3, #0]
      if (output_buffer->format) {
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <print_array+0xb6>
        *output_pointer++ = ' ';
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	617a      	str	r2, [r7, #20]
 80017e6:	2220      	movs	r2, #32
 80017e8:	701a      	strb	r2, [r3, #0]
      }
      *output_pointer = '\0';
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
      output_buffer->offset += length;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	441a      	add	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	609a      	str	r2, [r3, #8]
    }
    current_element = current_element->next;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	613b      	str	r3, [r7, #16]
  while (current_element != NULL) {
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1be      	bne.n	8001786 <print_array+0x52>
  }

  output_pointer = ensure(output_buffer, 2);
 8001808:	2102      	movs	r1, #2
 800180a:	6838      	ldr	r0, [r7, #0]
 800180c:	f7ff faf9 	bl	8000e02 <ensure>
 8001810:	6178      	str	r0, [r7, #20]
  if (output_pointer == NULL) {
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <print_array+0xe8>
    return false;
 8001818:	2300      	movs	r3, #0
 800181a:	e00d      	b.n	8001838 <print_array+0x104>
  }
  *output_pointer++ = ']';
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	617a      	str	r2, [r7, #20]
 8001822:	225d      	movs	r2, #93	; 0x5d
 8001824:	701a      	strb	r2, [r3, #0]
  *output_pointer = '\0';
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
  output_buffer->depth--;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	60da      	str	r2, [r3, #12]

  return true;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <print_object>:
  return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON *const item,
                               printbuffer *const output_buffer) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  unsigned char *output_pointer = NULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  size_t length = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  cJSON *current_item = item->child;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]

  if (output_buffer == NULL) {
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <print_object+0x22>
    return false;
 800185e:	2300      	movs	r3, #0
 8001860:	e108      	b.n	8001a74 <print_object+0x234>
  }

  /* Compose the output: */
  length = (size_t)(output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <print_object+0x2e>
 800186a:	2302      	movs	r3, #2
 800186c:	e000      	b.n	8001870 <print_object+0x30>
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
  output_pointer = ensure(output_buffer, length + 1);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3301      	adds	r3, #1
 8001876:	4619      	mov	r1, r3
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f7ff fac2 	bl	8000e02 <ensure>
 800187e:	61f8      	str	r0, [r7, #28]
  if (output_pointer == NULL) {
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <print_object+0x4a>
    return false;
 8001886:	2300      	movs	r3, #0
 8001888:	e0f4      	b.n	8001a74 <print_object+0x234>
  }

  *output_pointer++ = '{';
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	61fa      	str	r2, [r7, #28]
 8001890:	227b      	movs	r2, #123	; 0x7b
 8001892:	701a      	strb	r2, [r3, #0]
  output_buffer->depth++;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	60da      	str	r2, [r3, #12]
  if (output_buffer->format) {
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <print_object+0x70>
    *output_pointer++ = '\n';
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	61fa      	str	r2, [r7, #28]
 80018ac:	220a      	movs	r2, #10
 80018ae:	701a      	strb	r2, [r3, #0]
  }
  output_buffer->offset += length;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	441a      	add	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	609a      	str	r2, [r3, #8]

  while (current_item) {
 80018bc:	e0a0      	b.n	8001a00 <print_object+0x1c0>
    if (output_buffer->format) {
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d022      	beq.n	800190c <print_object+0xcc>
      size_t i;
      output_pointer = ensure(output_buffer, output_buffer->depth);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4619      	mov	r1, r3
 80018cc:	6838      	ldr	r0, [r7, #0]
 80018ce:	f7ff fa98 	bl	8000e02 <ensure>
 80018d2:	61f8      	str	r0, [r7, #28]
      if (output_pointer == NULL) {
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <print_object+0x9e>
        return false;
 80018da:	2300      	movs	r3, #0
 80018dc:	e0ca      	b.n	8001a74 <print_object+0x234>
      }
      for (i = 0; i < output_buffer->depth; i++) {
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e007      	b.n	80018f4 <print_object+0xb4>
        *output_pointer++ = '\t';
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	61fa      	str	r2, [r7, #28]
 80018ea:	2209      	movs	r2, #9
 80018ec:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < output_buffer->depth; i++) {
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d3f2      	bcc.n	80018e4 <print_object+0xa4>
      }
      output_buffer->offset += output_buffer->depth;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	441a      	add	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	609a      	str	r2, [r3, #8]
    }

    /* print key */
    if (!print_string_ptr((unsigned char *)current_item->string,
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc52 	bl	80011bc <print_string_ptr>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <print_object+0xe2>
                          output_buffer)) {
      return false;
 800191e:	2300      	movs	r3, #0
 8001920:	e0a8      	b.n	8001a74 <print_object+0x234>
    }
    update_offset(output_buffer);
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f7ff fb07 	bl	8000f36 <update_offset>

    length = (size_t)(output_buffer->format ? 2 : 1);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <print_object+0xf4>
 8001930:	2302      	movs	r3, #2
 8001932:	e000      	b.n	8001936 <print_object+0xf6>
 8001934:	2301      	movs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length);
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f7ff fa61 	bl	8000e02 <ensure>
 8001940:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL) {
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <print_object+0x10c>
      return false;
 8001948:	2300      	movs	r3, #0
 800194a:	e093      	b.n	8001a74 <print_object+0x234>
    }
    *output_pointer++ = ':';
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	61fa      	str	r2, [r7, #28]
 8001952:	223a      	movs	r2, #58	; 0x3a
 8001954:	701a      	strb	r2, [r3, #0]
    if (output_buffer->format) {
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <print_object+0x128>
      *output_pointer++ = '\t';
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	61fa      	str	r2, [r7, #28]
 8001964:	2209      	movs	r2, #9
 8001966:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	441a      	add	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	609a      	str	r2, [r3, #8]

    /* print value */
    if (!print_value(current_item, output_buffer)) {
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	69b8      	ldr	r0, [r7, #24]
 8001978:	f7ff fdf8 	bl	800156c <print_value>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <print_object+0x146>
      return false;
 8001982:	2300      	movs	r3, #0
 8001984:	e076      	b.n	8001a74 <print_object+0x234>
    }
    update_offset(output_buffer);
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f7ff fad5 	bl	8000f36 <update_offset>

    /* print comma if not last */
    length = ((size_t)(output_buffer->format ? 1 : 0) +
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <print_object+0x158>
 8001994:	2201      	movs	r2, #1
 8001996:	e000      	b.n	800199a <print_object+0x15a>
 8001998:	2200      	movs	r2, #0
              (size_t)(current_item->next ? 1 : 0));
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <print_object+0x166>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <print_object+0x168>
 80019a6:	2300      	movs	r3, #0
    length = ((size_t)(output_buffer->format ? 1 : 0) +
 80019a8:	4413      	add	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f7ff fa25 	bl	8000e02 <ensure>
 80019b8:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL) {
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <print_object+0x184>
      return false;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e057      	b.n	8001a74 <print_object+0x234>
    }
    if (current_item->next) {
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <print_object+0x196>
      *output_pointer++ = ',';
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	61fa      	str	r2, [r7, #28]
 80019d2:	222c      	movs	r2, #44	; 0x2c
 80019d4:	701a      	strb	r2, [r3, #0]
    }

    if (output_buffer->format) {
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <print_object+0x1a8>
      *output_pointer++ = '\n';
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	61fa      	str	r2, [r7, #28]
 80019e4:	220a      	movs	r2, #10
 80019e6:	701a      	strb	r2, [r3, #0]
    }
    *output_pointer = '\0';
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
    output_buffer->offset += length;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	441a      	add	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	609a      	str	r2, [r3, #8]

    current_item = current_item->next;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]
  while (current_item) {
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f47f af5b 	bne.w	80018be <print_object+0x7e>
  }

  output_pointer = ensure(
      output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
  output_pointer = ensure(
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <print_object+0x1d8>
      output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
  output_pointer = ensure(
 8001a14:	3301      	adds	r3, #1
 8001a16:	e000      	b.n	8001a1a <print_object+0x1da>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6838      	ldr	r0, [r7, #0]
 8001a1e:	f7ff f9f0 	bl	8000e02 <ensure>
 8001a22:	61f8      	str	r0, [r7, #28]
  if (output_pointer == NULL) {
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <print_object+0x1ee>
    return false;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e022      	b.n	8001a74 <print_object+0x234>
  }
  if (output_buffer->format) {
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <print_object+0x218>
    size_t i;
    for (i = 0; i < (output_buffer->depth - 1); i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	e007      	b.n	8001a4c <print_object+0x20c>
      *output_pointer++ = '\t';
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	61fa      	str	r2, [r7, #28]
 8001a42:	2209      	movs	r2, #9
 8001a44:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (output_buffer->depth - 1); i++) {
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3f1      	bcc.n	8001a3c <print_object+0x1fc>
    }
  }
  *output_pointer++ = '}';
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	61fa      	str	r2, [r7, #28]
 8001a5e:	227d      	movs	r2, #125	; 0x7d
 8001a60:	701a      	strb	r2, [r3, #0]
  *output_pointer = '\0';
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  output_buffer->depth--;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	60da      	str	r2, [r3, #12]

  return true;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <suffix_object>:
cJSON_HasObjectItem(const cJSON *object, const char *string) {
  return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  prev->next = item;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	601a      	str	r2, [r3, #0]
  item->prev = prev;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	605a      	str	r2, [r3, #4]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <add_item_to_array>:
  reference->type |= cJSON_IsReference;
  reference->next = reference->prev = NULL;
  return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  cJSON *child = NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]

  if ((item == NULL) || (array == NULL) || (array == item)) {
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <add_item_to_array+0x22>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <add_item_to_array+0x22>
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d101      	bne.n	8001ac2 <add_item_to_array+0x26>
    return false;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e01e      	b.n	8001b00 <add_item_to_array+0x64>
  }

  child = array->child;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	60fb      	str	r3, [r7, #12]
  /*
   * To find the last item in array quickly, we use prev in array
   */
  if (child == NULL) {
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <add_item_to_array+0x46>
    /* list is empty, start new one */
    array->child = item;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	609a      	str	r2, [r3, #8]
    item->prev = item;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
    item->next = NULL;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e00d      	b.n	8001afe <add_item_to_array+0x62>
  } else {
    /* append to the end */
    if (child->prev) {
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <add_item_to_array+0x62>
      suffix_object(child->prev, item);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ffc3 	bl	8001a7c <suffix_object>
      array->child->prev = item;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	605a      	str	r2, [r3, #4]
    }
  }

  return true;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <cast_away_const>:
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void *cast_away_const(const void *string) { return (void *)string; }
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <add_item_to_object>:

static cJSON_bool add_item_to_object(cJSON *const object,
                                     const char *const string,
                                     cJSON *const item,
                                     const internal_hooks *const hooks,
                                     const cJSON_bool constant_key) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  char *new_key = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  int new_type = cJSON_Invalid;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]

  if ((object == NULL) || (string == NULL) || (item == NULL) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <add_item_to_object+0x30>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <add_item_to_object+0x30>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <add_item_to_object+0x30>
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d101      	bne.n	8001b50 <add_item_to_object+0x34>
      (object == item)) {
    return false;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e036      	b.n	8001bbe <add_item_to_object+0xa2>
  }

  if (constant_key) {
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d009      	beq.n	8001b6a <add_item_to_object+0x4e>
    new_key = (char *)cast_away_const(string);
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f7ff ffd6 	bl	8001b08 <cast_away_const>
 8001b5c:	6178      	str	r0, [r7, #20]
    new_type = item->type | cJSON_StringIsConst;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	e00e      	b.n	8001b88 <add_item_to_object+0x6c>
  } else {
    new_key = (char *)cJSON_strdup((const unsigned char *)string, hooks);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f7ff f8b9 	bl	8000ce4 <cJSON_strdup>
 8001b72:	6178      	str	r0, [r7, #20]
    if (new_key == NULL) {
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <add_item_to_object+0x62>
      return false;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e01f      	b.n	8001bbe <add_item_to_object+0xa2>
    }

    new_type = item->type & ~cJSON_StringIsConst;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b86:	613b      	str	r3, [r7, #16]
  }

  if (!(item->type & cJSON_StringIsConst) && (item->string != NULL)) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <add_item_to_object+0x8c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <add_item_to_object+0x8c>
    hooks->deallocate(item->string);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6a12      	ldr	r2, [r2, #32]
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4798      	blx	r3
  }

  item->string = new_key;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	621a      	str	r2, [r3, #32]
  item->type = new_type;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	60da      	str	r2, [r3, #12]

  return add_item_to_array(object, item);
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff ff70 	bl	8001a9c <add_item_to_array>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <cJSON_AddNumberToObject>:
  return NULL;
}

CJSON_PUBLIC(cJSON *)
cJSON_AddNumberToObject(cJSON *const object, const char *const name,
                        const double number) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	e9c7 2300 	strd	r2, r3, [r7]
  cJSON *number_item = cJSON_CreateNumber(number);
 8001bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bda:	f000 f83d 	bl	8001c58 <cJSON_CreateNumber>
 8001bde:	6178      	str	r0, [r7, #20]
  if (add_item_to_object(object, name, number_item, &global_hooks, false)) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <cJSON_AddNumberToObject+0x44>)
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff ff96 	bl	8001b1c <add_item_to_object>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <cJSON_AddNumberToObject+0x32>
    return number_item;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	e003      	b.n	8001c02 <cJSON_AddNumberToObject+0x3a>
  }

  cJSON_Delete(number_item);
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff f8b0 	bl	8000d60 <cJSON_Delete>
  return NULL;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON *)
cJSON_AddStringToObject(cJSON *const object, const char *const name,
                        const char *const string) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  cJSON *string_item = cJSON_CreateString(string);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f863 	bl	8001ce8 <cJSON_CreateString>
 8001c22:	6178      	str	r0, [r7, #20]
  if (add_item_to_object(object, name, string_item, &global_hooks, false)) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <cJSON_AddStringToObject+0x40>)
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff ff74 	bl	8001b1c <add_item_to_object>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <cJSON_AddStringToObject+0x2e>
    return string_item;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	e003      	b.n	8001c46 <cJSON_AddStringToObject+0x36>
  }

  cJSON_Delete(string_item);
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff f88e 	bl	8000d60 <cJSON_Delete>
  return NULL;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000
 8001c54:	00000000 	.word	0x00000000

08001c58 <cJSON_CreateNumber>:
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	e9c7 0100 	strd	r0, r1, [r7]
  cJSON *item = cJSON_New_Item(&global_hooks);
 8001c62:	481f      	ldr	r0, [pc, #124]	; (8001ce0 <cJSON_CreateNumber+0x88>)
 8001c64:	f7ff f866 	bl	8000d34 <cJSON_New_Item>
 8001c68:	60f8      	str	r0, [r7, #12]
  if (item) {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02c      	beq.n	8001cca <cJSON_CreateNumber+0x72>
    item->type = cJSON_Number;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2208      	movs	r2, #8
 8001c74:	60da      	str	r2, [r3, #12]
    item->valuedouble = num;
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c7c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (num >= INT_MAX) {
 8001c80:	a315      	add	r3, pc, #84	; (adr r3, 8001cd8 <cJSON_CreateNumber+0x80>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c8a:	f7fe ff17 	bl	8000abc <__aeabi_dcmpge>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <cJSON_CreateNumber+0x46>
      item->valueint = INT_MAX;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	e015      	b.n	8001cca <cJSON_CreateNumber+0x72>
    } else if (num <= (double)INT_MIN) {
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <cJSON_CreateNumber+0x8c>)
 8001ca4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca8:	f7fe fefe 	bl	8000aa8 <__aeabi_dcmple>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <cJSON_CreateNumber+0x64>
      item->valueint = INT_MIN;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cb8:	615a      	str	r2, [r3, #20]
 8001cba:	e006      	b.n	8001cca <cJSON_CreateNumber+0x72>
    } else {
      item->valueint = (int)num;
 8001cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cc0:	f7fe ff26 	bl	8000b10 <__aeabi_d2iz>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	615a      	str	r2, [r3, #20]
    }
  }

  return item;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	ffc00000 	.word	0xffc00000
 8001cdc:	41dfffff 	.word	0x41dfffff
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	c1e00000 	.word	0xc1e00000

08001ce8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  cJSON *item = cJSON_New_Item(&global_hooks);
 8001cf0:	480f      	ldr	r0, [pc, #60]	; (8001d30 <cJSON_CreateString+0x48>)
 8001cf2:	f7ff f81f 	bl	8000d34 <cJSON_New_Item>
 8001cf6:	60f8      	str	r0, [r7, #12]
  if (item) {
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d012      	beq.n	8001d24 <cJSON_CreateString+0x3c>
    item->type = cJSON_String;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2210      	movs	r2, #16
 8001d02:	60da      	str	r2, [r3, #12]
    item->valuestring =
        (char *)cJSON_strdup((const unsigned char *)string, &global_hooks);
 8001d04:	490a      	ldr	r1, [pc, #40]	; (8001d30 <cJSON_CreateString+0x48>)
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe ffec 	bl	8000ce4 <cJSON_strdup>
 8001d0c:	4602      	mov	r2, r0
    item->valuestring =
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	611a      	str	r2, [r3, #16]
    if (!item->valuestring) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d104      	bne.n	8001d24 <cJSON_CreateString+0x3c>
      cJSON_Delete(item);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff f820 	bl	8000d60 <cJSON_Delete>
      return NULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <cJSON_CreateString+0x3e>
    }
  }

  return item;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <cJSON_CreateObject>:
  }

  return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  cJSON *item = cJSON_New_Item(&global_hooks);
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <cJSON_CreateObject+0x24>)
 8001d3c:	f7fe fffa 	bl	8000d34 <cJSON_New_Item>
 8001d40:	6078      	str	r0, [r7, #4]
  if (item) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <cJSON_CreateObject+0x1a>
    item->type = cJSON_Object;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	60da      	str	r2, [r3, #12]
  }

  return item;
 8001d4e:	687b      	ldr	r3, [r7, #4]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000000 	.word	0x20000000

08001d5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a2d      	ldr	r2, [pc, #180]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001d8e:	f043 0320 	orr.w	r3, r3, #32
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <MX_GPIO_Init+0xd0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001dd6:	4816      	ldr	r0, [pc, #88]	; (8001e30 <MX_GPIO_Init+0xd4>)
 8001dd8:	f001 fbb6 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Side_Pin|LED_G_Side_Pin|LED_Y_Side_Pin, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001de2:	4814      	ldr	r0, [pc, #80]	; (8001e34 <MX_GPIO_Init+0xd8>)
 8001de4:	f001 fbb0 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_Y_Pin|LED_G_Pin;
 8001de8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <MX_GPIO_Init+0xd4>)
 8001e02:	f001 fa0d 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Side_Pin|LED_G_Side_Pin|LED_Y_Side_Pin;
 8001e06:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_GPIO_Init+0xd8>)
 8001e20:	f001 f9fe 	bl	8003220 <HAL_GPIO_Init>

}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010c00 	.word	0x40010c00
 8001e34:	40011000 	.word	0x40011000

08001e38 <Light_init>:
    0xFF, 0xFF, 0xFF, 0x00,                         // Length,4
    0x00, 0x00, 0x00,
};
// uint8_t Transmit_Buff[65] = {0};

void Light_init(void) {
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  strcpy(Light.VIN, "OPTIMUSPRIMERYG01");
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <Light_init+0x64>)
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <Light_init+0x68>)
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	8023      	strh	r3, [r4, #0]
  // strcpy(Light.VIN, "GCYLGSWC5GBL8A006");
  Light.Light_Red_time = 40;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <Light_init+0x64>)
 8001e4e:	2228      	movs	r2, #40	; 0x28
 8001e50:	745a      	strb	r2, [r3, #17]
  Light.Light_Yellow_time = 3;
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <Light_init+0x64>)
 8001e54:	2203      	movs	r2, #3
 8001e56:	749a      	strb	r2, [r3, #18]
  Light.Light_Green_time = 20;
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <Light_init+0x64>)
 8001e5a:	2214      	movs	r2, #20
 8001e5c:	74da      	strb	r2, [r3, #19]
  Light.Light_status = Light_Status_Red_ON;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <Light_init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	755a      	strb	r2, [r3, #21]

  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <Light_init+0x6c>)
 8001e6c:	f001 fb6c 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e76:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <Light_init+0x6c>)
 8001e78:	f001 fb66 	bl	8003548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <Light_init+0x6c>)
 8001e84:	f001 fb60 	bl	8003548 <HAL_GPIO_WritePin>
  Light.Light_time = Light.Light_Red_time;
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <Light_init+0x64>)
 8001e8a:	7c5a      	ldrb	r2, [r3, #17]
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <Light_init+0x64>)
 8001e8e:	751a      	strb	r2, [r3, #20]
  HAL_TIM_Base_Start_IT(&htim6);
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <Light_init+0x70>)
 8001e92:	f002 f84b 	bl	8003f2c <HAL_TIM_Base_Start_IT>
}
 8001e96:	bf00      	nop
 8001e98:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000000c 	.word	0x2000000c
 8001ea0:	0800a1b0 	.word	0x0800a1b0
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	200006e4 	.word	0x200006e4

08001eac <Light_Data_Transmit>:

/* Transmit Data */
/**
 * @brief Transmit Light Data by zigbee
 */
void Light_Data_Transmit(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t current_time = HAL_GetTick();
 8001eb2:	f000 ff9f 	bl	8002df4 <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]
  uint32_t Data_length = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  // uint8_t point = 0;

  Transmit_Buff[8] = (uint8_t)(current_time);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001ec2:	721a      	strb	r2, [r3, #8]
  Transmit_Buff[9] = (uint8_t)(current_time >> 8);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001ecc:	725a      	strb	r2, [r3, #9]
  Transmit_Buff[10] = (uint8_t)(current_time >> 16);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001ed6:	729a      	strb	r2, [r3, #10]
  Transmit_Buff[11] = (uint8_t)(current_time >> 24);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	0e1b      	lsrs	r3, r3, #24
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001ee0:	72da      	strb	r2, [r3, #11]

  cJSON *Light_Data_json = cJSON_CreateObject();
 8001ee2:	f7ff ff27 	bl	8001d34 <cJSON_CreateObject>
 8001ee6:	6078      	str	r0, [r7, #4]

  cJSON_AddNumberToObject(Light_Data_json, "command", 0x09);
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <Light_Data_Transmit+0x124>)
 8001eee:	4939      	ldr	r1, [pc, #228]	; (8001fd4 <Light_Data_Transmit+0x128>)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fe69 	bl	8001bc8 <cJSON_AddNumberToObject>
  cJSON_AddNumberToObject(Light_Data_json, "type", 0x03);
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <Light_Data_Transmit+0x12c>)
 8001efc:	4937      	ldr	r1, [pc, #220]	; (8001fdc <Light_Data_Transmit+0x130>)
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe62 	bl	8001bc8 <cJSON_AddNumberToObject>
  cJSON_AddStringToObject(Light_Data_json, "vin", "OPTIMUSPRIMERYG01");
 8001f04:	4a36      	ldr	r2, [pc, #216]	; (8001fe0 <Light_Data_Transmit+0x134>)
 8001f06:	4937      	ldr	r1, [pc, #220]	; (8001fe4 <Light_Data_Transmit+0x138>)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fe81 	bl	8001c10 <cJSON_AddStringToObject>
  // cJSON_AddNumberToObject(Light_Data_json, "signalStrength",
  //                         drf1609_signal.linkEndRouter_Singal);
  // cJSON_AddNumberToObject(Light_Data_json, "settingFlag", Setting_Flag);
  cJSON_AddNumberToObject(Light_Data_json, "runningStatus", Light.Light_status);
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <Light_Data_Transmit+0x13c>)
 8001f10:	7d5b      	ldrb	r3, [r3, #21]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fad1 	bl	80004bc <__aeabi_ui2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4933      	ldr	r1, [pc, #204]	; (8001fec <Light_Data_Transmit+0x140>)
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fe51 	bl	8001bc8 <cJSON_AddNumberToObject>
  cJSON_AddNumberToObject(Light_Data_json, "realTime", Light.Light_time);
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <Light_Data_Transmit+0x13c>)
 8001f28:	7d1b      	ldrb	r3, [r3, #20]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fac6 	bl	80004bc <__aeabi_ui2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	492e      	ldr	r1, [pc, #184]	; (8001ff0 <Light_Data_Transmit+0x144>)
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fe46 	bl	8001bc8 <cJSON_AddNumberToObject>
  cJSON_AddNumberToObject(Light_Data_json, "redTime", Light.Light_Red_time);
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <Light_Data_Transmit+0x13c>)
 8001f3e:	7c5b      	ldrb	r3, [r3, #17]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fabb 	bl	80004bc <__aeabi_ui2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	492a      	ldr	r1, [pc, #168]	; (8001ff4 <Light_Data_Transmit+0x148>)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fe3b 	bl	8001bc8 <cJSON_AddNumberToObject>
  cJSON_AddNumberToObject(Light_Data_json, "greenTime", Light.Light_Green_time);
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <Light_Data_Transmit+0x13c>)
 8001f54:	7cdb      	ldrb	r3, [r3, #19]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fab0 	bl	80004bc <__aeabi_ui2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4925      	ldr	r1, [pc, #148]	; (8001ff8 <Light_Data_Transmit+0x14c>)
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fe30 	bl	8001bc8 <cJSON_AddNumberToObject>

  char *out = cJSON_Print(Light_Data_json);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff faef 	bl	800154c <cJSON_Print>
 8001f6e:	6038      	str	r0, [r7, #0]

  Data_length = strlen(out) + 1;
 8001f70:	6838      	ldr	r0, [r7, #0]
 8001f72:	f7fe f959 	bl	8000228 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
  Transmit_Buff[20] = (uint8_t)(Data_length);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001f82:	751a      	strb	r2, [r3, #20]
  Transmit_Buff[21] = (uint8_t)(Data_length >> 8);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001f8c:	755a      	strb	r2, [r3, #21]
  Transmit_Buff[22] = (uint8_t)(Data_length >> 16);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001f96:	759a      	strb	r2, [r3, #22]
  Transmit_Buff[23] = (uint8_t)(Data_length >> 24);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	0e1b      	lsrs	r3, r3, #24
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001fa0:	75da      	strb	r2, [r3, #23]

  HAL_UART_Transmit(&huart1, Transmit_Buff,
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	2218      	movs	r2, #24
 8001fa8:	4908      	ldr	r1, [pc, #32]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001faa:	4814      	ldr	r0, [pc, #80]	; (8001ffc <Light_Data_Transmit+0x150>)
 8001fac:	f002 fbe9 	bl	8004782 <HAL_UART_Transmit>
                    (sizeof(Transmit_Buff) / sizeof(Transmit_Buff[0])), 1000);

  send_data_to_dtu(Transmit_Buff,
 8001fb0:	2118      	movs	r1, #24
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <Light_Data_Transmit+0x120>)
 8001fb4:	f7fe fe7c 	bl	8000cb0 <send_data_to_dtu>
                   (sizeof(Transmit_Buff) / sizeof(Transmit_Buff[0]))); // DTU
  printf("%s\n", out);
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f003 ffa1 	bl	8005f00 <puts>
  cJSON_Delete(Light_Data_json);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fece 	bl	8000d60 <cJSON_Delete>
  //                  (sizeof(Transmit_Buff) / sizeof(Transmit_Buff[0]))); //
  //                  DTU
  // HAL_UART_Transmit(&huart5, Transmit_Buff,
  //                   (sizeof(Transmit_Buff) / sizeof(Transmit_Buff[0])),
  //                   1000);
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000024 	.word	0x20000024
 8001fd0:	40220000 	.word	0x40220000
 8001fd4:	0800a1c4 	.word	0x0800a1c4
 8001fd8:	40080000 	.word	0x40080000
 8001fdc:	0800a1cc 	.word	0x0800a1cc
 8001fe0:	0800a1b0 	.word	0x0800a1b0
 8001fe4:	0800a1d4 	.word	0x0800a1d4
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	0800a1d8 	.word	0x0800a1d8
 8001ff0:	0800a1e8 	.word	0x0800a1e8
 8001ff4:	0800a1f4 	.word	0x0800a1f4
 8001ff8:	0800a1fc 	.word	0x0800a1fc
 8001ffc:	200007ac 	.word	0x200007ac

08002000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002004:	f000 fece 	bl	8002da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002008:	f000 f81e 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200c:	f7ff fea6 	bl	8001d5c <MX_GPIO_Init>
  MX_TIM6_Init();
 8002010:	f000 fbf0 	bl	80027f4 <MX_TIM6_Init>
  MX_UART4_Init();
 8002014:	f000 fc66 	bl	80028e4 <MX_UART4_Init>
  MX_UART5_Init();
 8002018:	f000 fc8e 	bl	8002938 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800201c:	f000 fcb6 	bl	800298c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002020:	f000 fcde 	bl	80029e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002024:	f000 fd06 	bl	8002a34 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8002028:	f000 fb96 	bl	8002758 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Light_init();
 800202c:	f7ff ff04 	bl	8001e38 <Light_init>
  HAL_TIM_Base_Start_IT(&htim5);
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <main+0x44>)
 8002032:	f001 ff7b 	bl	8003f2c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Light_Data_Transmit();
 8002036:	f7ff ff39 	bl	8001eac <Light_Data_Transmit>
    HAL_Delay(300);
 800203a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800203e:	f000 fee3 	bl	8002e08 <HAL_Delay>
    Light_Data_Transmit();
 8002042:	e7f8      	b.n	8002036 <main+0x36>
 8002044:	2000069c 	.word	0x2000069c

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	2228      	movs	r2, #40	; 0x28
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f002 ffc4 	bl	8004fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800206e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002072:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002078:	2301      	movs	r3, #1
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207c:	2302      	movs	r3, #2
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002084:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002086:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	4618      	mov	r0, r3
 8002092:	f001 fa8b 	bl	80035ac <HAL_RCC_OscConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800209c:	f000 f986 	bl	80023ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a0:	230f      	movs	r3, #15
 80020a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a4:	2302      	movs	r3, #2
 80020a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2102      	movs	r1, #2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fcf6 	bl	8003aac <HAL_RCC_ClockConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80020c6:	f000 f971 	bl	80023ac <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80020ca:	f001 fdd9 	bl	8003c80 <HAL_RCC_EnableCSS>
}
 80020ce:	bf00      	nop
 80020d0:	3740      	adds	r7, #64	; 0x40
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM5) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a8c      	ldr	r2, [pc, #560]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d153      	bne.n	8002192 <HAL_TIM_PeriodElapsedCallback+0xba>
    if (Light.Light_status == Light_Status_Red_Flashing) {
 80020ea:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80020ec:	7d5b      	ldrb	r3, [r3, #21]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d114      	bne.n	800211e <HAL_TIM_PeriodElapsedCallback+0x46>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80020f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f8:	4889      	ldr	r0, [pc, #548]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80020fa:	f001 fa3d 	bl	8003578 <HAL_GPIO_TogglePin>

      /* Side LAMP */
      HAL_GPIO_TogglePin(LED_Y_Side_GPIO_Port, LED_Y_Side_Pin);
 80020fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002102:	4888      	ldr	r0, [pc, #544]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002104:	f001 fa38 	bl	8003578 <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LED_R_Side_GPIO_Port, LED_R_Side_Pin, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	4885      	ldr	r0, [pc, #532]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800210e:	f001 fa1b 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_G_Side_GPIO_Port, LED_G_Side_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	4883      	ldr	r0, [pc, #524]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002118:	f001 fa16 	bl	8003548 <HAL_GPIO_WritePin>
 800211c:	e018      	b.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x78>
    } else if (Light.Light_status == Light_Status_Yellow_Flashing) {
 800211e:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002120:	7d5b      	ldrb	r3, [r3, #21]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d109      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0x64>
      HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8002128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800212c:	487c      	ldr	r0, [pc, #496]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800212e:	f001 fa23 	bl	8003578 <HAL_GPIO_TogglePin>

      /* Side LAMP */
      HAL_GPIO_TogglePin(LED_R_Side_GPIO_Port, LED_R_Side_Pin);
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	487b      	ldr	r0, [pc, #492]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002136:	f001 fa1f 	bl	8003578 <HAL_GPIO_TogglePin>
 800213a:	e009      	b.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x78>
    } else if (Light.Light_status == Light_Status_Green_Flashing) {
 800213c:	4b77      	ldr	r3, [pc, #476]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800213e:	7d5b      	ldrb	r3, [r3, #21]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b04      	cmp	r3, #4
 8002144:	d104      	bne.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x78>
      HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8002146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800214a:	4875      	ldr	r0, [pc, #468]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800214c:	f001 fa14 	bl	8003578 <HAL_GPIO_TogglePin>
    }
    if (((Light.Light_time > Light.Light_Yellow_time) &&
 8002150:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002152:	7d1a      	ldrb	r2, [r3, #20]
 8002154:	4b71      	ldr	r3, [pc, #452]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002156:	7c9b      	ldrb	r3, [r3, #18]
 8002158:	429a      	cmp	r2, r3
 800215a:	d91a      	bls.n	8002192 <HAL_TIM_PeriodElapsedCallback+0xba>
         (Light.Light_time < Light.Light_Yellow_time + 4)) &&
 800215c:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800215e:	7c9b      	ldrb	r3, [r3, #18]
 8002160:	3303      	adds	r3, #3
 8002162:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002164:	7d12      	ldrb	r2, [r2, #20]
    if (((Light.Light_time > Light.Light_Yellow_time) &&
 8002166:	4293      	cmp	r3, r2
 8002168:	db13      	blt.n	8002192 <HAL_TIM_PeriodElapsedCallback+0xba>
        (Light.Light_status == Light_Status_Red_ON)) {
 800216a:	4b6c      	ldr	r3, [pc, #432]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800216c:	7d5b      	ldrb	r3, [r3, #21]
 800216e:	b2db      	uxtb	r3, r3
         (Light.Light_time < Light.Light_Yellow_time + 4)) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10e      	bne.n	8002192 <HAL_TIM_PeriodElapsedCallback+0xba>

      /* Side LAMP */
      HAL_GPIO_TogglePin(LED_G_Side_GPIO_Port, LED_G_Side_Pin);
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	486b      	ldr	r0, [pc, #428]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002178:	f001 f9fe 	bl	8003578 <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LED_R_Side_GPIO_Port, LED_R_Side_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	4868      	ldr	r0, [pc, #416]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002182:	f001 f9e1 	bl	8003548 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_Y_Side_GPIO_Port, LED_Y_Side_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218c:	4865      	ldr	r0, [pc, #404]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800218e:	f001 f9db 	bl	8003548 <HAL_GPIO_WritePin>
    }
  }
  if (htim->Instance == TIM6) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a64      	ldr	r2, [pc, #400]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 80b2 	bne.w	8002302 <HAL_TIM_PeriodElapsedCallback+0x22a>
    Light.Light_time--;
 800219e:	4b5f      	ldr	r3, [pc, #380]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021a0:	7d1b      	ldrb	r3, [r3, #20]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021a8:	751a      	strb	r2, [r3, #20]

    if (Light.Light_time > 0 &&
 80021aa:	4b5c      	ldr	r3, [pc, #368]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021ac:	7d1b      	ldrb	r3, [r3, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x108>
        Light.Light_time < (Light.Light_Yellow_time + 1)) {
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021b4:	7c9a      	ldrb	r2, [r3, #18]
 80021b6:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021b8:	7d1b      	ldrb	r3, [r3, #20]
    if (Light.Light_time > 0 &&
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d310      	bcc.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x108>
      if (Light.Light_status == Light_Status_Red_ON) {
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021c0:	7d5b      	ldrb	r3, [r3, #21]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <HAL_TIM_PeriodElapsedCallback+0xf8>
        Light.Light_status = Light_Status_Red_Flashing;
 80021c8:	4b54      	ldr	r3, [pc, #336]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	755a      	strb	r2, [r3, #21]
 80021ce:	e007      	b.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x108>
      } else if (Light.Light_status == Light_Status_Green_ON) {
 80021d0:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021d2:	7d5b      	ldrb	r3, [r3, #21]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d102      	bne.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x108>
        Light.Light_status = Light_Status_Green_Flashing;
 80021da:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021dc:	2204      	movs	r2, #4
 80021de:	755a      	strb	r2, [r3, #21]
      }
    }
    if (Light.Light_time == 0) {
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021e2:	7d1b      	ldrb	r3, [r3, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 808c 	bne.w	8002302 <HAL_TIM_PeriodElapsedCallback+0x22a>
      if (Light.Light_status == Light_Status_Red_Flashing) {
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021ec:	7d5b      	ldrb	r3, [r3, #21]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d129      	bne.n	8002248 <HAL_TIM_PeriodElapsedCallback+0x170>
        Light.Light_status = Light_Status_Green_ON;
 80021f4:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021f6:	2203      	movs	r2, #3
 80021f8:	755a      	strb	r2, [r3, #21]
        Light.Light_time = Light.Light_Green_time;
 80021fa:	4b48      	ldr	r3, [pc, #288]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021fc:	7cda      	ldrb	r2, [r3, #19]
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002200:	751a      	strb	r2, [r3, #20]
        HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002208:	4845      	ldr	r0, [pc, #276]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800220a:	f001 f99d 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002214:	4842      	ldr	r0, [pc, #264]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002216:	f001 f997 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002220:	483f      	ldr	r0, [pc, #252]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002222:	f001 f991 	bl	8003548 <HAL_GPIO_WritePin>

        /* Side LAMP */
        HAL_GPIO_WritePin(LED_R_Side_GPIO_Port, LED_R_Side_Pin, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	483e      	ldr	r0, [pc, #248]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800222c:	f001 f98c 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_Y_Side_GPIO_Port, LED_Y_Side_Pin, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002236:	483b      	ldr	r0, [pc, #236]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002238:	f001 f986 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_G_Side_GPIO_Port, LED_G_Side_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	4838      	ldr	r0, [pc, #224]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002242:	f001 f981 	bl	8003548 <HAL_GPIO_WritePin>
 8002246:	e05c      	b.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x22a>
      } else if (Light.Light_status == Light_Status_Green_Flashing) {
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800224a:	7d5b      	ldrb	r3, [r3, #21]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b04      	cmp	r3, #4
 8002250:	d129      	bne.n	80022a6 <HAL_TIM_PeriodElapsedCallback+0x1ce>
        Light.Light_status = Light_Status_Yellow_Flashing;
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002254:	2202      	movs	r2, #2
 8002256:	755a      	strb	r2, [r3, #21]
        Light.Light_time = Light.Light_Yellow_time;
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800225a:	7c9a      	ldrb	r2, [r3, #18]
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800225e:	751a      	strb	r2, [r3, #20]
        HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002266:	482e      	ldr	r0, [pc, #184]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002268:	f001 f96e 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002272:	482b      	ldr	r0, [pc, #172]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002274:	f001 f968 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800227e:	4828      	ldr	r0, [pc, #160]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002280:	f001 f962 	bl	8003548 <HAL_GPIO_WritePin>

        /* Side LAMP */
        HAL_GPIO_WritePin(LED_R_Side_GPIO_Port, LED_R_Side_Pin, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	2140      	movs	r1, #64	; 0x40
 8002288:	4826      	ldr	r0, [pc, #152]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800228a:	f001 f95d 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_Y_Side_GPIO_Port, LED_Y_Side_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002294:	4823      	ldr	r0, [pc, #140]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002296:	f001 f957 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_G_Side_GPIO_Port, LED_G_Side_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	4821      	ldr	r0, [pc, #132]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80022a0:	f001 f952 	bl	8003548 <HAL_GPIO_WritePin>
 80022a4:	e02d      	b.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x22a>
      } else if (Light.Light_status == Light_Status_Yellow_Flashing) {
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80022a8:	7d5b      	ldrb	r3, [r3, #21]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d128      	bne.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x22a>
        Light.Light_status = Light_Status_Red_ON;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	755a      	strb	r2, [r3, #21]
        Light.Light_time = Light.Light_Red_time;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80022b8:	7c5a      	ldrb	r2, [r3, #17]
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80022bc:	751a      	strb	r2, [r3, #20]
        HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4816      	ldr	r0, [pc, #88]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80022c6:	f001 f93f 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d0:	4813      	ldr	r0, [pc, #76]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80022d2:	f001 f939 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022dc:	4810      	ldr	r0, [pc, #64]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80022de:	f001 f933 	bl	8003548 <HAL_GPIO_WritePin>

        /* Side LAMP */
        HAL_GPIO_WritePin(LED_R_Side_GPIO_Port, LED_R_Side_Pin, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2140      	movs	r1, #64	; 0x40
 80022e6:	480f      	ldr	r0, [pc, #60]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80022e8:	f001 f92e 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_Y_Side_GPIO_Port, LED_Y_Side_Pin, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f2:	480c      	ldr	r0, [pc, #48]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80022f4:	f001 f928 	bl	8003548 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_G_Side_GPIO_Port, LED_G_Side_Pin, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80022fe:	f001 f923 	bl	8003548 <HAL_GPIO_WritePin>
      }
    }
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_TIM_PeriodElapsedCallback+0x238>
    HAL_IncTick();
 800230c:	f000 fd60 	bl	8002dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40000c00 	.word	0x40000c00
 800231c:	2000000c 	.word	0x2000000c
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	40001000 	.word	0x40001000
 800232c:	40001400 	.word	0x40001400

08002330 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART5) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_UART_RxCpltCallback+0x60>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d122      	bne.n	8002388 <HAL_UART_RxCpltCallback+0x58>
    if (0xA5 == Transmit_Buff[0]) {
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_UART_RxCpltCallback+0x64>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2ba5      	cmp	r3, #165	; 0xa5
 8002348:	d102      	bne.n	8002350 <HAL_UART_RxCpltCallback+0x20>
      UART5_Rx_Cnt = 0;
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_UART_RxCpltCallback+0x68>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
    }
    UART5_RxBuff[UART5_Rx_Cnt] = Transmit_Buff[0];
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_RxCpltCallback+0x68>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_UART_RxCpltCallback+0x64>)
 8002358:	7819      	ldrb	r1, [r3, #0]
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_UART_RxCpltCallback+0x6c>)
 800235c:	5499      	strb	r1, [r3, r2]
    UART5_Rx_Cnt++;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_UART_RxCpltCallback+0x68>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_UART_RxCpltCallback+0x68>)
 8002368:	701a      	strb	r2, [r3, #0]

    if (UART5_Rx_Cnt == 40) {
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_UART_RxCpltCallback+0x68>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b28      	cmp	r3, #40	; 0x28
 8002370:	d105      	bne.n	800237e <HAL_UART_RxCpltCallback+0x4e>
      UART5_Rx_Cnt = 0;
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_UART_RxCpltCallback+0x68>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
      UART5_Rx_Flag = 1;
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_UART_RxCpltCallback+0x70>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
      UART5_Rx_Cnt = 0;
      UART5_Rx_Flag = 0;
      memset(UART5_RxBuff, 0x00, sizeof(UART5_RxBuff));
    }
    // RingBuffer_In(p_uart3_rxbuf, &uart_temp, 1);
    HAL_UART_Receive_IT(&huart5, &uart_temp, 1);
 800237e:	2201      	movs	r2, #1
 8002380:	4908      	ldr	r1, [pc, #32]	; (80023a4 <HAL_UART_RxCpltCallback+0x74>)
 8002382:	4809      	ldr	r0, [pc, #36]	; (80023a8 <HAL_UART_RxCpltCallback+0x78>)
 8002384:	f002 fa8f 	bl	80048a6 <HAL_UART_Receive_IT>
  }

  /* USER CODE END Callback 1 */
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40005000 	.word	0x40005000
 8002394:	20000024 	.word	0x20000024
 8002398:	20000238 	.word	0x20000238
 800239c:	2000023c 	.word	0x2000023c
 80023a0:	2000063c 	.word	0x2000063c
 80023a4:	20000650 	.word	0x20000650
 80023a8:	2000076c 	.word	0x2000076c

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_MspInit+0x5c>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_MspInit+0x5c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6193      	str	r3, [r2, #24]
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_MspInit+0x5c>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_MspInit+0x5c>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a0e      	ldr	r2, [pc, #56]	; (8002414 <HAL_MspInit+0x5c>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_MspInit+0x5c>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_MspInit+0x60>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_MspInit+0x60>)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000
 8002418:	40010000 	.word	0x40010000

0800241c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	2037      	movs	r0, #55	; 0x37
 8002432:	f000 fdc2 	bl	8002fba <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002436:	2037      	movs	r0, #55	; 0x37
 8002438:	f000 fddb 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_InitTick+0xa0>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_InitTick+0xa0>)
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	61d3      	str	r3, [r2, #28]
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_InitTick+0xa0>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002454:	f107 0210 	add.w	r2, r7, #16
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f001 fcac 	bl	8003dbc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002464:	f001 fc82 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8002468:	4603      	mov	r3, r0
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_InitTick+0xa4>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	3b01      	subs	r3, #1
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_InitTick+0xa8>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_InitTick+0xac>)
 8002480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_InitTick+0xa8>)
 8002484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002488:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_InitTick+0xa8>)
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_InitTick+0xa8>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_InitTick+0xa8>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <HAL_InitTick+0xa8>)
 800249e:	f001 fcf5 	bl	8003e8c <HAL_TIM_Base_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <HAL_InitTick+0xa8>)
 80024aa:	f001 fd3f 	bl	8003f2c <HAL_TIM_Base_Start_IT>
 80024ae:	4603      	mov	r3, r0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	20000654 	.word	0x20000654
 80024c8:	40001400 	.word	0x40001400

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80024d0:	f001 fca4 	bl	8003e1c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <HardFault_Handler+0x4>

080024de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <MemManage_Handler+0x4>

080024e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <BusFault_Handler+0x4>

080024ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <UsageFault_Handler+0x4>

080024f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <TIM5_IRQHandler+0x10>)
 8002526:	f001 fd61 	bl	8003fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000069c 	.word	0x2000069c

08002534 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <UART5_IRQHandler+0x10>)
 800253a:	f002 fa09 	bl	8004950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000076c 	.word	0x2000076c

08002548 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <TIM6_IRQHandler+0x10>)
 800254e:	f001 fd4d 	bl	8003fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200006e4 	.word	0x200006e4

0800255c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM7_IRQHandler+0x10>)
 8002562:	f001 fd43 	bl	8003fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000654 	.word	0x20000654

08002570 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
	return 1;
 8002574:	2301      	movs	r3, #1
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_kill>:

int _kill(int pid, int sig) {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002588:	f002 fce4 	bl	8004f54 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	2216      	movs	r2, #22
 8002590:	601a      	str	r2, [r3, #0]
	return -1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_exit>:

void _exit(int status) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025a6:	f04f 31ff 	mov.w	r1, #4294967295
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffe7 	bl	800257e <_kill>
	while (1) {
 80025b0:	e7fe      	b.n	80025b0 <_exit+0x12>

080025b2 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e00a      	b.n	80025da <_read+0x28>
		*ptr++ = __io_getchar();
 80025c4:	f3af 8000 	nop.w
 80025c8:	4601      	mov	r1, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	60ba      	str	r2, [r7, #8]
 80025d0:	b2ca      	uxtb	r2, r1
 80025d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbf0      	blt.n	80025c4 <_read+0x12>
	}

	return len;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e009      	b.n	8002612 <_write+0x26>
		__io_putchar(*ptr++);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	60ba      	str	r2, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fb8a 	bl	8002d20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	dbf1      	blt.n	80025fe <_write+0x12>
	}
	return len;
 800261a:	687b      	ldr	r3, [r7, #4]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_close>:

int _close(int file) {
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <_fstat>:

int _fstat(int file, struct stat *st) {
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800264a:	605a      	str	r2, [r3, #4]
	return 0;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <_isatty>:

int _isatty(int file) {
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <_sbrk+0x64>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <_sbrk+0x68>)
 80026a4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d207      	bcs.n	80026c4 <_sbrk+0x40>
		errno = ENOMEM;
 80026b4:	f002 fc4e 	bl	8004f54 <__errno>
 80026b8:	4603      	mov	r3, r0
 80026ba:	220c      	movs	r2, #12
 80026bc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e009      	b.n	80026d8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <_sbrk+0x64>)
 80026d4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000c000 	.word	0x2000c000
 80026e4:	00000400 	.word	0x00000400
 80026e8:	20000640 	.word	0x20000640
 80026ec:	20000880 	.word	0x20000880

080026f0 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	/* Reset the RCC clock configuration to the default reset state(for debug purpose) */
	/* Set HSION bit */
	RCC->CR |= 0x00000001U;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <SystemInit+0x5c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a14      	ldr	r2, [pc, #80]	; (800274c <SystemInit+0x5c>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6013      	str	r3, [r2, #0]

	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
	RCC->CFGR &= 0xF8FF0000U;
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <SystemInit+0x5c>)
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4911      	ldr	r1, [pc, #68]	; (800274c <SystemInit+0x5c>)
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <SystemInit+0x60>)
 8002708:	4013      	ands	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
#else
	RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= 0xFEF6FFFFU;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <SystemInit+0x5c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0e      	ldr	r2, [pc, #56]	; (800274c <SystemInit+0x5c>)
 8002712:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <SystemInit+0x5c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <SystemInit+0x5c>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
	RCC->CFGR &= 0xFF80FFFFU;
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <SystemInit+0x5c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <SystemInit+0x5c>)
 800272e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002732:	6053      	str	r3, [r2, #4]

	/* Reset CFGR2 register */
	RCC->CFGR2 = 0x00000000U;
#else
	/* Disable all interrupts and clear pending bits  */
	RCC->CIR = 0x009F0000U;
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SystemInit+0x5c>)
 8002736:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800273a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <SystemInit+0x64>)
 800273e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002742:	609a      	str	r2, [r3, #8]
#endif 
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000
 8002750:	f8ff0000 	.word	0xf8ff0000
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	463b      	mov	r3, r7
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <MX_TIM5_Init+0x94>)
 8002776:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <MX_TIM5_Init+0x98>)
 8002778:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7200-1;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_TIM5_Init+0x94>)
 800277c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002780:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_TIM5_Init+0x94>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3000-1;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_TIM5_Init+0x94>)
 800278a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800278e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_TIM5_Init+0x94>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_TIM5_Init+0x94>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800279c:	4813      	ldr	r0, [pc, #76]	; (80027ec <MX_TIM5_Init+0x94>)
 800279e:	f001 fb75 	bl	8003e8c <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027a8:	f7ff fe00 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4619      	mov	r1, r3
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <MX_TIM5_Init+0x94>)
 80027ba:	f001 fd1f 	bl	80041fc <HAL_TIM_ConfigClockSource>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027c4:	f7ff fdf2 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_TIM5_Init+0x94>)
 80027d6:	f001 ff09 	bl	80045ec <HAL_TIMEx_MasterConfigSynchronization>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027e0:	f7ff fde4 	bl	80023ac <Error_Handler>
  }

}
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2000069c 	.word	0x2000069c
 80027f0:	40000c00 	.word	0x40000c00

080027f4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fa:	463b      	mov	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <MX_TIM6_Init+0x64>)
 8002804:	4a15      	ldr	r2, [pc, #84]	; (800285c <MX_TIM6_Init+0x68>)
 8002806:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <MX_TIM6_Init+0x64>)
 800280a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800280e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_TIM6_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <MX_TIM6_Init+0x64>)
 8002818:	f242 720f 	movw	r2, #9999	; 0x270f
 800281c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_TIM6_Init+0x64>)
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002824:	480c      	ldr	r0, [pc, #48]	; (8002858 <MX_TIM6_Init+0x64>)
 8002826:	f001 fb31 	bl	8003e8c <HAL_TIM_Base_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002830:	f7ff fdbc 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800283c:	463b      	mov	r3, r7
 800283e:	4619      	mov	r1, r3
 8002840:	4805      	ldr	r0, [pc, #20]	; (8002858 <MX_TIM6_Init+0x64>)
 8002842:	f001 fed3 	bl	80045ec <HAL_TIMEx_MasterConfigSynchronization>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800284c:	f7ff fdae 	bl	80023ac <Error_Handler>
  }

}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200006e4 	.word	0x200006e4
 800285c:	40001000 	.word	0x40001000

08002860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_TIM_Base_MspInit+0x78>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d114      	bne.n	800289c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_TIM_Base_MspInit+0x7c>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_TIM_Base_MspInit+0x7c>)
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	61d3      	str	r3, [r2, #28]
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_TIM_Base_MspInit+0x7c>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2032      	movs	r0, #50	; 0x32
 8002890:	f000 fb93 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002894:	2032      	movs	r0, #50	; 0x32
 8002896:	f000 fbac 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800289a:	e018      	b.n	80028ce <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_TIM_Base_MspInit+0x80>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d113      	bne.n	80028ce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_TIM_Base_MspInit+0x7c>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <HAL_TIM_Base_MspInit+0x7c>)
 80028ac:	f043 0310 	orr.w	r3, r3, #16
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_TIM_Base_MspInit+0x7c>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2036      	movs	r0, #54	; 0x36
 80028c4:	f000 fb79 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80028c8:	2036      	movs	r0, #54	; 0x36
 80028ca:	f000 fb92 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40000c00 	.word	0x40000c00
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40001000 	.word	0x40001000

080028e4 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_UART4_Init+0x4c>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <MX_UART4_Init+0x50>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_UART4_Init+0x4c>)
 80028f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_UART4_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_UART4_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_UART4_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_UART4_Init+0x4c>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_UART4_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_UART4_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK) {
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_UART4_Init+0x4c>)
 800291c:	f001 fee4 	bl	80046e8 <HAL_UART_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_UART4_Init+0x46>
    Error_Handler();
 8002926:	f7ff fd41 	bl	80023ac <Error_Handler>
  }
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200007ec 	.word	0x200007ec
 8002934:	40004c00 	.word	0x40004c00

08002938 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_UART5_Init+0x4c>)
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <MX_UART5_Init+0x50>)
 8002940:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <MX_UART5_Init+0x4c>)
 8002944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002948:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_UART5_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_UART5_Init+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <MX_UART5_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_UART5_Init+0x4c>)
 800295e:	220c      	movs	r2, #12
 8002960:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <MX_UART5_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_UART5_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK) {
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_UART5_Init+0x4c>)
 8002970:	f001 feba 	bl	80046e8 <HAL_UART_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_UART5_Init+0x46>
    Error_Handler();
 800297a:	f7ff fd17 	bl	80023ac <Error_Handler>
  }
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000076c 	.word	0x2000076c
 8002988:	40005000 	.word	0x40005000

0800298c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void) {
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <MX_USART1_UART_Init+0x50>)
 8002994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 8002998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800299c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029b2:	220c      	movs	r2, #12
 80029b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_USART1_UART_Init+0x4c>)
 80029c4:	f001 fe90 	bl	80046e8 <HAL_UART_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 80029ce:	f7ff fced 	bl	80023ac <Error_Handler>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200007ac 	.word	0x200007ac
 80029dc:	40013800 	.word	0x40013800

080029e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 80029e6:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <MX_USART2_UART_Init+0x4c>)
 80029e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 384000;
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 80029ec:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <MX_USART2_UART_Init+0x50>)
 80029ee:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 8002a04:	220c      	movs	r2, #12
 8002a06:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002a14:	4804      	ldr	r0, [pc, #16]	; (8002a28 <MX_USART2_UART_Init+0x48>)
 8002a16:	f001 fe67 	bl	80046e8 <HAL_UART_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_USART2_UART_Init+0x44>
    Error_Handler();
 8002a20:	f7ff fcc4 	bl	80023ac <Error_Handler>
  }
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000082c 	.word	0x2000082c
 8002a2c:	40004400 	.word	0x40004400
 8002a30:	0005dc00 	.word	0x0005dc00

08002a34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <MX_USART3_UART_Init+0x50>)
 8002a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002a6a:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_USART3_UART_Init+0x4c>)
 8002a6c:	f001 fe3c 	bl	80046e8 <HAL_UART_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_USART3_UART_Init+0x46>
    Error_Handler();
 8002a76:	f7ff fc99 	bl	80023ac <Error_Handler>
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000072c 	.word	0x2000072c
 8002a84:	40004800 	.word	0x40004800

08002a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b092      	sub	sp, #72	; 0x48
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == UART4) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a95      	ldr	r2, [pc, #596]	; (8002cf8 <HAL_UART_MspInit+0x270>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d132      	bne.n	8002b0e <HAL_UART_MspInit+0x86>
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002aa8:	4b94      	ldr	r3, [pc, #592]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a93      	ldr	r2, [pc, #588]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ab2:	61d3      	str	r3, [r2, #28]
 8002ab4:	4b91      	ldr	r3, [pc, #580]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac0:	4b8e      	ldr	r3, [pc, #568]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a8d      	ldr	r2, [pc, #564]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002ac6:	f043 0310 	orr.w	r3, r3, #16
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002adc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002aea:	4619      	mov	r1, r3
 8002aec:	4884      	ldr	r0, [pc, #528]	; (8002d00 <HAL_UART_MspInit+0x278>)
 8002aee:	f000 fb97 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002b00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b04:	4619      	mov	r1, r3
 8002b06:	487e      	ldr	r0, [pc, #504]	; (8002d00 <HAL_UART_MspInit+0x278>)
 8002b08:	f000 fb8a 	bl	8003220 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b0c:	e0ef      	b.n	8002cee <HAL_UART_MspInit+0x266>
  } else if (uartHandle->Instance == UART5) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7c      	ldr	r2, [pc, #496]	; (8002d04 <HAL_UART_MspInit+0x27c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d145      	bne.n	8002ba4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b18:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a77      	ldr	r2, [pc, #476]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	61d3      	str	r3, [r2, #28]
 8002b24:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b30:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4a71      	ldr	r2, [pc, #452]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b36:	f043 0310 	orr.w	r3, r3, #16
 8002b3a:	6193      	str	r3, [r2, #24]
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a6b      	ldr	r2, [pc, #428]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b4e:	f043 0320 	orr.w	r3, r3, #32
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b69      	ldr	r3, [pc, #420]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = DTU4G_TX_Pin;
 8002b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(DTU4G_TX_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b72:	4619      	mov	r1, r3
 8002b74:	4862      	ldr	r0, [pc, #392]	; (8002d00 <HAL_UART_MspInit+0x278>)
 8002b76:	f000 fb53 	bl	8003220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DTU4G_RX_Pin;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(DTU4G_RX_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	485e      	ldr	r0, [pc, #376]	; (8002d08 <HAL_UART_MspInit+0x280>)
 8002b8e:	f000 fb47 	bl	8003220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	2035      	movs	r0, #53	; 0x35
 8002b98:	f000 fa0f 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b9c:	2035      	movs	r0, #53	; 0x35
 8002b9e:	f000 fa28 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8002ba2:	e0a4      	b.n	8002cee <HAL_UART_MspInit+0x266>
  } else if (uartHandle->Instance == USART1) {
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_UART_MspInit+0x284>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d132      	bne.n	8002c14 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bae:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb8:	6193      	str	r3, [r2, #24]
 8002bba:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	4b4d      	ldr	r3, [pc, #308]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	4a4c      	ldr	r2, [pc, #304]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6193      	str	r3, [r2, #24]
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4847      	ldr	r0, [pc, #284]	; (8002d10 <HAL_UART_MspInit+0x288>)
 8002bf4:	f000 fb14 	bl	8003220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4840      	ldr	r0, [pc, #256]	; (8002d10 <HAL_UART_MspInit+0x288>)
 8002c0e:	f000 fb07 	bl	8003220 <HAL_GPIO_Init>
}
 8002c12:	e06c      	b.n	8002cee <HAL_UART_MspInit+0x266>
  } else if (uartHandle->Instance == USART2) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <HAL_UART_MspInit+0x28c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d130      	bne.n	8002c80 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a36      	ldr	r2, [pc, #216]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	4a30      	ldr	r2, [pc, #192]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6193      	str	r3, [r2, #24]
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Zigbee_TX_Pin;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(Zigbee_TX_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c5e:	4619      	mov	r1, r3
 8002c60:	482b      	ldr	r0, [pc, #172]	; (8002d10 <HAL_UART_MspInit+0x288>)
 8002c62:	f000 fadd 	bl	8003220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Zigbee_RX_Pin;
 8002c66:	2308      	movs	r3, #8
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(Zigbee_RX_GPIO_Port, &GPIO_InitStruct);
 8002c72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c76:	4619      	mov	r1, r3
 8002c78:	4825      	ldr	r0, [pc, #148]	; (8002d10 <HAL_UART_MspInit+0x288>)
 8002c7a:	f000 fad1 	bl	8003220 <HAL_GPIO_Init>
}
 8002c7e:	e036      	b.n	8002cee <HAL_UART_MspInit+0x266>
  } else if (uartHandle->Instance == USART3) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_UART_MspInit+0x290>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d131      	bne.n	8002cee <HAL_UART_MspInit+0x266>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c94:	61d3      	str	r3, [r2, #28]
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6193      	str	r3, [r2, #24]
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <HAL_UART_MspInit+0x274>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESP8266_TX_Pin;
 8002cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ESP8266_TX_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4813      	ldr	r0, [pc, #76]	; (8002d1c <HAL_UART_MspInit+0x294>)
 8002cd0:	f000 faa6 	bl	8003220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESP8266_RX_Pin;
 8002cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(ESP8266_RX_GPIO_Port, &GPIO_InitStruct);
 8002ce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <HAL_UART_MspInit+0x294>)
 8002cea:	f000 fa99 	bl	8003220 <HAL_GPIO_Init>
}
 8002cee:	bf00      	nop
 8002cf0:	3748      	adds	r7, #72	; 0x48
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40004c00 	.word	0x40004c00
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40005000 	.word	0x40005000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40010800 	.word	0x40010800
 8002d14:	40004400 	.word	0x40004400
 8002d18:	40004800 	.word	0x40004800
 8002d1c:	40010c00 	.word	0x40010c00

08002d20 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of
   * transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002d28:	1d39      	adds	r1, r7, #4
 8002d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4807      	ldr	r0, [pc, #28]	; (8002d50 <__io_putchar+0x30>)
 8002d32:	f001 fd26 	bl	8004782 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xFFFF);
 8002d36:	1d39      	adds	r1, r7, #4
 8002d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <__io_putchar+0x34>)
 8002d40:	f001 fd1f 	bl	8004782 <HAL_UART_Transmit>
  return ch;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200007ac 	.word	0x200007ac
 8002d54:	2000076c 	.word	0x2000076c

08002d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d5a:	e003      	b.n	8002d64 <LoopCopyDataInit>

08002d5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d62:	3104      	adds	r1, #4

08002d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d64:	480a      	ldr	r0, [pc, #40]	; (8002d90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d6c:	d3f6      	bcc.n	8002d5c <CopyDataInit>
  ldr r2, =_sbss
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d70:	e002      	b.n	8002d78 <LoopFillZerobss>

08002d72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d74:	f842 3b04 	str.w	r3, [r2], #4

08002d78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d7c:	d3f9      	bcc.n	8002d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d7e:	f7ff fcb7 	bl	80026f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d82:	f002 f8ed 	bl	8004f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d86:	f7ff f93b 	bl	8002000 <main>
  bx lr
 8002d8a:	4770      	bx	lr
  ldr r3, =_sidata
 8002d8c:	0800a714 	.word	0x0800a714
  ldr r0, =_sdata
 8002d90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d94:	2000021c 	.word	0x2000021c
  ldr r2, =_sbss
 8002d98:	2000021c 	.word	0x2000021c
  ldr r3, = _ebss
 8002d9c:	20000880 	.word	0x20000880

08002da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002da0:	e7fe      	b.n	8002da0 <ADC1_2_IRQHandler>
	...

08002da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_Init+0x28>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_Init+0x28>)
 8002dae:	f043 0310 	orr.w	r3, r3, #16
 8002db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db4:	2003      	movs	r0, #3
 8002db6:	f000 f8f5 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7ff fb2e 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc0:	f7ff fafa 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_IncTick+0x1c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_IncTick+0x20>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <HAL_IncTick+0x20>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	20000044 	.word	0x20000044
 8002df0:	2000086c 	.word	0x2000086c

08002df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <HAL_GetTick+0x10>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	2000086c 	.word	0x2000086c

08002e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d005      	beq.n	8002e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_Delay+0x44>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e2e:	bf00      	nop
 8002e30:	f7ff ffe0 	bl	8002df4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d8f7      	bhi.n	8002e30 <HAL_Delay+0x28>
  {
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000044 	.word	0x20000044

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4906      	ldr	r1, [pc, #24]	; (8002ee8 <__NVIC_EnableIRQ+0x34>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db0a      	blt.n	8002f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	490c      	ldr	r1, [pc, #48]	; (8002f38 <__NVIC_SetPriority+0x4c>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f14:	e00a      	b.n	8002f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <__NVIC_SetPriority+0x50>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3b04      	subs	r3, #4
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	761a      	strb	r2, [r3, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf28      	it	cs
 8002f5e:	2304      	movcs	r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d902      	bls.n	8002f70 <NVIC_EncodePriority+0x30>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <NVIC_EncodePriority+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	4313      	orrs	r3, r2
         );
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff4f 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff64 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ffb2 	bl	8002f40 <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff81 	bl	8002eec <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff57 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003022:	2b02      	cmp	r3, #2
 8003024:	d005      	beq.n	8003032 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2204      	movs	r2, #4
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e0d6      	b.n	80031e0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 020e 	bic.w	r2, r2, #14
 8003040:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	4b64      	ldr	r3, [pc, #400]	; (80031ec <HAL_DMA_Abort_IT+0x1dc>)
 800305a:	429a      	cmp	r2, r3
 800305c:	d958      	bls.n	8003110 <HAL_DMA_Abort_IT+0x100>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_DMA_Abort_IT+0x1e0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04f      	beq.n	8003108 <HAL_DMA_Abort_IT+0xf8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a61      	ldr	r2, [pc, #388]	; (80031f4 <HAL_DMA_Abort_IT+0x1e4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d048      	beq.n	8003104 <HAL_DMA_Abort_IT+0xf4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a60      	ldr	r2, [pc, #384]	; (80031f8 <HAL_DMA_Abort_IT+0x1e8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d040      	beq.n	80030fe <HAL_DMA_Abort_IT+0xee>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5e      	ldr	r2, [pc, #376]	; (80031fc <HAL_DMA_Abort_IT+0x1ec>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d038      	beq.n	80030f8 <HAL_DMA_Abort_IT+0xe8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a5d      	ldr	r2, [pc, #372]	; (8003200 <HAL_DMA_Abort_IT+0x1f0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d030      	beq.n	80030f2 <HAL_DMA_Abort_IT+0xe2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a5b      	ldr	r2, [pc, #364]	; (8003204 <HAL_DMA_Abort_IT+0x1f4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d028      	beq.n	80030ec <HAL_DMA_Abort_IT+0xdc>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a53      	ldr	r2, [pc, #332]	; (80031ec <HAL_DMA_Abort_IT+0x1dc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d020      	beq.n	80030e6 <HAL_DMA_Abort_IT+0xd6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a57      	ldr	r2, [pc, #348]	; (8003208 <HAL_DMA_Abort_IT+0x1f8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_DMA_Abort_IT+0xd2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a56      	ldr	r2, [pc, #344]	; (800320c <HAL_DMA_Abort_IT+0x1fc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d012      	beq.n	80030de <HAL_DMA_Abort_IT+0xce>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a54      	ldr	r2, [pc, #336]	; (8003210 <HAL_DMA_Abort_IT+0x200>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00a      	beq.n	80030d8 <HAL_DMA_Abort_IT+0xc8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a53      	ldr	r2, [pc, #332]	; (8003214 <HAL_DMA_Abort_IT+0x204>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d102      	bne.n	80030d2 <HAL_DMA_Abort_IT+0xc2>
 80030cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d0:	e01b      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d6:	e018      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030dc:	e015      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030de:	2310      	movs	r3, #16
 80030e0:	e013      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e011      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ea:	e00e      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030f0:	e00b      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f6:	e008      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fc:	e005      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 80030fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003102:	e002      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 8003104:	2310      	movs	r3, #16
 8003106:	e000      	b.n	800310a <HAL_DMA_Abort_IT+0xfa>
 8003108:	2301      	movs	r3, #1
 800310a:	4a43      	ldr	r2, [pc, #268]	; (8003218 <HAL_DMA_Abort_IT+0x208>)
 800310c:	6053      	str	r3, [r2, #4]
 800310e:	e057      	b.n	80031c0 <HAL_DMA_Abort_IT+0x1b0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a36      	ldr	r2, [pc, #216]	; (80031f0 <HAL_DMA_Abort_IT+0x1e0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d04f      	beq.n	80031ba <HAL_DMA_Abort_IT+0x1aa>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a35      	ldr	r2, [pc, #212]	; (80031f4 <HAL_DMA_Abort_IT+0x1e4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d048      	beq.n	80031b6 <HAL_DMA_Abort_IT+0x1a6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a33      	ldr	r2, [pc, #204]	; (80031f8 <HAL_DMA_Abort_IT+0x1e8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d040      	beq.n	80031b0 <HAL_DMA_Abort_IT+0x1a0>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a32      	ldr	r2, [pc, #200]	; (80031fc <HAL_DMA_Abort_IT+0x1ec>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d038      	beq.n	80031aa <HAL_DMA_Abort_IT+0x19a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a30      	ldr	r2, [pc, #192]	; (8003200 <HAL_DMA_Abort_IT+0x1f0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d030      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x194>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <HAL_DMA_Abort_IT+0x1f4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d028      	beq.n	800319e <HAL_DMA_Abort_IT+0x18e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_DMA_Abort_IT+0x1dc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d020      	beq.n	8003198 <HAL_DMA_Abort_IT+0x188>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <HAL_DMA_Abort_IT+0x1f8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d019      	beq.n	8003194 <HAL_DMA_Abort_IT+0x184>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_DMA_Abort_IT+0x1fc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d012      	beq.n	8003190 <HAL_DMA_Abort_IT+0x180>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a28      	ldr	r2, [pc, #160]	; (8003210 <HAL_DMA_Abort_IT+0x200>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00a      	beq.n	800318a <HAL_DMA_Abort_IT+0x17a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_DMA_Abort_IT+0x204>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d102      	bne.n	8003184 <HAL_DMA_Abort_IT+0x174>
 800317e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003182:	e01b      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 8003184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003188:	e018      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 800318a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800318e:	e015      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 8003190:	2310      	movs	r3, #16
 8003192:	e013      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 8003194:	2301      	movs	r3, #1
 8003196:	e011      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 8003198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800319c:	e00e      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 800319e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031a2:	e00b      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 80031a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a8:	e008      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 80031aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ae:	e005      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 80031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b4:	e002      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 80031b6:	2310      	movs	r3, #16
 80031b8:	e000      	b.n	80031bc <HAL_DMA_Abort_IT+0x1ac>
 80031ba:	2301      	movs	r3, #1
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_DMA_Abort_IT+0x20c>)
 80031be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
    } 
  }
  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40020080 	.word	0x40020080
 80031f0:	40020008 	.word	0x40020008
 80031f4:	4002001c 	.word	0x4002001c
 80031f8:	40020030 	.word	0x40020030
 80031fc:	40020044 	.word	0x40020044
 8003200:	40020058 	.word	0x40020058
 8003204:	4002006c 	.word	0x4002006c
 8003208:	40020408 	.word	0x40020408
 800320c:	4002041c 	.word	0x4002041c
 8003210:	40020430 	.word	0x40020430
 8003214:	40020444 	.word	0x40020444
 8003218:	40020400 	.word	0x40020400
 800321c:	40020000 	.word	0x40020000

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b08b      	sub	sp, #44	; 0x2c
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	e179      	b.n	8003528 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003234:	2201      	movs	r2, #1
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 8168 	bne.w	8003522 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4aa0      	ldr	r2, [pc, #640]	; (80034d8 <HAL_GPIO_Init+0x2b8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d05e      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 800325c:	4a9e      	ldr	r2, [pc, #632]	; (80034d8 <HAL_GPIO_Init+0x2b8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d875      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 8003262:	4a9e      	ldr	r2, [pc, #632]	; (80034dc <HAL_GPIO_Init+0x2bc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d058      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 8003268:	4a9c      	ldr	r2, [pc, #624]	; (80034dc <HAL_GPIO_Init+0x2bc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d86f      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 800326e:	4a9c      	ldr	r2, [pc, #624]	; (80034e0 <HAL_GPIO_Init+0x2c0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d052      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 8003274:	4a9a      	ldr	r2, [pc, #616]	; (80034e0 <HAL_GPIO_Init+0x2c0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d869      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 800327a:	4a9a      	ldr	r2, [pc, #616]	; (80034e4 <HAL_GPIO_Init+0x2c4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d04c      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 8003280:	4a98      	ldr	r2, [pc, #608]	; (80034e4 <HAL_GPIO_Init+0x2c4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d863      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 8003286:	4a98      	ldr	r2, [pc, #608]	; (80034e8 <HAL_GPIO_Init+0x2c8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d046      	beq.n	800331a <HAL_GPIO_Init+0xfa>
 800328c:	4a96      	ldr	r2, [pc, #600]	; (80034e8 <HAL_GPIO_Init+0x2c8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d85d      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 8003292:	2b12      	cmp	r3, #18
 8003294:	d82a      	bhi.n	80032ec <HAL_GPIO_Init+0xcc>
 8003296:	2b12      	cmp	r3, #18
 8003298:	d859      	bhi.n	800334e <HAL_GPIO_Init+0x12e>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_GPIO_Init+0x80>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	0800331b 	.word	0x0800331b
 80032a4:	080032f5 	.word	0x080032f5
 80032a8:	08003307 	.word	0x08003307
 80032ac:	08003349 	.word	0x08003349
 80032b0:	0800334f 	.word	0x0800334f
 80032b4:	0800334f 	.word	0x0800334f
 80032b8:	0800334f 	.word	0x0800334f
 80032bc:	0800334f 	.word	0x0800334f
 80032c0:	0800334f 	.word	0x0800334f
 80032c4:	0800334f 	.word	0x0800334f
 80032c8:	0800334f 	.word	0x0800334f
 80032cc:	0800334f 	.word	0x0800334f
 80032d0:	0800334f 	.word	0x0800334f
 80032d4:	0800334f 	.word	0x0800334f
 80032d8:	0800334f 	.word	0x0800334f
 80032dc:	0800334f 	.word	0x0800334f
 80032e0:	0800334f 	.word	0x0800334f
 80032e4:	080032fd 	.word	0x080032fd
 80032e8:	08003311 	.word	0x08003311
 80032ec:	4a7f      	ldr	r2, [pc, #508]	; (80034ec <HAL_GPIO_Init+0x2cc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032f2:	e02c      	b.n	800334e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	623b      	str	r3, [r7, #32]
          break;
 80032fa:	e029      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	3304      	adds	r3, #4
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e024      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	3308      	adds	r3, #8
 800330c:	623b      	str	r3, [r7, #32]
          break;
 800330e:	e01f      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	330c      	adds	r3, #12
 8003316:	623b      	str	r3, [r7, #32]
          break;
 8003318:	e01a      	b.n	8003350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003322:	2304      	movs	r3, #4
 8003324:	623b      	str	r3, [r7, #32]
          break;
 8003326:	e013      	b.n	8003350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003330:	2308      	movs	r3, #8
 8003332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	611a      	str	r2, [r3, #16]
          break;
 800333a:	e009      	b.n	8003350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800333c:	2308      	movs	r3, #8
 800333e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	615a      	str	r2, [r3, #20]
          break;
 8003346:	e003      	b.n	8003350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
          break;
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x130>
          break;
 800334e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2bff      	cmp	r3, #255	; 0xff
 8003354:	d801      	bhi.n	800335a <HAL_GPIO_Init+0x13a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	e001      	b.n	800335e <HAL_GPIO_Init+0x13e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2bff      	cmp	r3, #255	; 0xff
 8003364:	d802      	bhi.n	800336c <HAL_GPIO_Init+0x14c>
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	e002      	b.n	8003372 <HAL_GPIO_Init+0x152>
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	3b08      	subs	r3, #8
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	210f      	movs	r1, #15
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	6a39      	ldr	r1, [r7, #32]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	431a      	orrs	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80c1 	beq.w	8003522 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6193      	str	r3, [r2, #24]
 80033ac:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <HAL_GPIO_Init+0x2d0>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033b8:	4a4e      	ldr	r2, [pc, #312]	; (80034f4 <HAL_GPIO_Init+0x2d4>)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <HAL_GPIO_Init+0x2d8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d01f      	beq.n	8003424 <HAL_GPIO_Init+0x204>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a45      	ldr	r2, [pc, #276]	; (80034fc <HAL_GPIO_Init+0x2dc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d019      	beq.n	8003420 <HAL_GPIO_Init+0x200>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a44      	ldr	r2, [pc, #272]	; (8003500 <HAL_GPIO_Init+0x2e0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_GPIO_Init+0x1fc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_GPIO_Init+0x2e4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00d      	beq.n	8003418 <HAL_GPIO_Init+0x1f8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a42      	ldr	r2, [pc, #264]	; (8003508 <HAL_GPIO_Init+0x2e8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d007      	beq.n	8003414 <HAL_GPIO_Init+0x1f4>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a41      	ldr	r2, [pc, #260]	; (800350c <HAL_GPIO_Init+0x2ec>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_GPIO_Init+0x1f0>
 800340c:	2305      	movs	r3, #5
 800340e:	e00a      	b.n	8003426 <HAL_GPIO_Init+0x206>
 8003410:	2306      	movs	r3, #6
 8003412:	e008      	b.n	8003426 <HAL_GPIO_Init+0x206>
 8003414:	2304      	movs	r3, #4
 8003416:	e006      	b.n	8003426 <HAL_GPIO_Init+0x206>
 8003418:	2303      	movs	r3, #3
 800341a:	e004      	b.n	8003426 <HAL_GPIO_Init+0x206>
 800341c:	2302      	movs	r3, #2
 800341e:	e002      	b.n	8003426 <HAL_GPIO_Init+0x206>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_GPIO_Init+0x206>
 8003424:	2300      	movs	r3, #0
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	f002 0203 	and.w	r2, r2, #3
 800342c:	0092      	lsls	r2, r2, #2
 800342e:	4093      	lsls	r3, r2
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003436:	492f      	ldr	r1, [pc, #188]	; (80034f4 <HAL_GPIO_Init+0x2d4>)
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d006      	beq.n	800345e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003450:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	492e      	ldr	r1, [pc, #184]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e006      	b.n	800346c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	43db      	mvns	r3, r3
 8003466:	492a      	ldr	r1, [pc, #168]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 8003468:	4013      	ands	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4924      	ldr	r1, [pc, #144]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
 8003484:	e006      	b.n	8003494 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	43db      	mvns	r3, r3
 800348e:	4920      	ldr	r1, [pc, #128]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 8003490:	4013      	ands	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	491a      	ldr	r1, [pc, #104]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]
 80034ac:	e006      	b.n	80034bc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4916      	ldr	r1, [pc, #88]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d025      	beq.n	8003514 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	4910      	ldr	r1, [pc, #64]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60cb      	str	r3, [r1, #12]
 80034d4:	e025      	b.n	8003522 <HAL_GPIO_Init+0x302>
 80034d6:	bf00      	nop
 80034d8:	10320000 	.word	0x10320000
 80034dc:	10310000 	.word	0x10310000
 80034e0:	10220000 	.word	0x10220000
 80034e4:	10210000 	.word	0x10210000
 80034e8:	10120000 	.word	0x10120000
 80034ec:	10110000 	.word	0x10110000
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40010800 	.word	0x40010800
 80034fc:	40010c00 	.word	0x40010c00
 8003500:	40011000 	.word	0x40011000
 8003504:	40011400 	.word	0x40011400
 8003508:	40011800 	.word	0x40011800
 800350c:	40011c00 	.word	0x40011c00
 8003510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_GPIO_Init+0x324>)
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	43db      	mvns	r3, r3
 800351c:	4909      	ldr	r1, [pc, #36]	; (8003544 <HAL_GPIO_Init+0x324>)
 800351e:	4013      	ands	r3, r2
 8003520:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	3301      	adds	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f47f ae7e 	bne.w	8003234 <HAL_GPIO_Init+0x14>
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	372c      	adds	r7, #44	; 0x2c
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003564:	e003      	b.n	800356e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	041a      	lsls	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43d9      	mvns	r1, r3
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	400b      	ands	r3, r1
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	611a      	str	r2, [r3, #16]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e26c      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8087 	beq.w	80036da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035cc:	4b92      	ldr	r3, [pc, #584]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d00c      	beq.n	80035f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035d8:	4b8f      	ldr	r3, [pc, #572]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d112      	bne.n	800360a <HAL_RCC_OscConfig+0x5e>
 80035e4:	4b8c      	ldr	r3, [pc, #560]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d10b      	bne.n	800360a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f2:	4b89      	ldr	r3, [pc, #548]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d06c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x12c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d168      	bne.n	80036d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e246      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x76>
 8003614:	4b80      	ldr	r3, [pc, #512]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7f      	ldr	r2, [pc, #508]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e02e      	b.n	8003680 <HAL_RCC_OscConfig+0xd4>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x98>
 800362a:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7a      	ldr	r2, [pc, #488]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b78      	ldr	r3, [pc, #480]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a77      	ldr	r2, [pc, #476]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800363c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0xd4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0xbc>
 800364e:	4b72      	ldr	r3, [pc, #456]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a71      	ldr	r2, [pc, #452]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xd4>
 8003668:	4b6b      	ldr	r3, [pc, #428]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6a      	ldr	r2, [pc, #424]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b68      	ldr	r3, [pc, #416]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a67      	ldr	r2, [pc, #412]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7ff fbb4 	bl	8002df4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003690:	f7ff fbb0 	bl	8002df4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1fa      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0xe4>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff fba0 	bl	8002df4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff fb9c 	bl	8002df4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1e6      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x10c>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e6:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036f2:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11c      	bne.n	8003738 <HAL_RCC_OscConfig+0x18c>
 80036fe:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d116      	bne.n	8003738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x176>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e1ba      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4939      	ldr	r1, [pc, #228]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	e03a      	b.n	80037ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003740:	4b36      	ldr	r3, [pc, #216]	; (800381c <HAL_RCC_OscConfig+0x270>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7ff fb55 	bl	8002df4 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374e:	f7ff fb51 	bl	8002df4 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e19b      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4927      	ldr	r1, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <HAL_RCC_OscConfig+0x270>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7ff fb34 	bl	8002df4 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7ff fb30 	bl	8002df4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e17a      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03a      	beq.n	8003830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d019      	beq.n	80037f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_RCC_OscConfig+0x274>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7ff fb14 	bl	8002df4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7ff fb10 	bl	8002df4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e15a      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f000 fb28 	bl	8003e44 <RCC_Delay>
 80037f4:	e01c      	b.n	8003830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_OscConfig+0x274>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fc:	f7ff fafa 	bl	8002df4 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003802:	e00f      	b.n	8003824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003804:	f7ff faf6 	bl	8002df4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d908      	bls.n	8003824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e140      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	42420000 	.word	0x42420000
 8003820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b9e      	ldr	r3, [pc, #632]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e9      	bne.n	8003804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a6 	beq.w	800398a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b97      	ldr	r3, [pc, #604]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	4b94      	ldr	r3, [pc, #592]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4a93      	ldr	r2, [pc, #588]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	61d3      	str	r3, [r2, #28]
 800385a:	4b91      	ldr	r3, [pc, #580]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <HAL_RCC_OscConfig+0x4f8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d118      	bne.n	80038a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b8b      	ldr	r3, [pc, #556]	; (8003aa4 <HAL_RCC_OscConfig+0x4f8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a8a      	ldr	r2, [pc, #552]	; (8003aa4 <HAL_RCC_OscConfig+0x4f8>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7ff fab7 	bl	8002df4 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388a:	f7ff fab3 	bl	8002df4 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b64      	cmp	r3, #100	; 0x64
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0fd      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	4b81      	ldr	r3, [pc, #516]	; (8003aa4 <HAL_RCC_OscConfig+0x4f8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x312>
 80038b0:	4b7b      	ldr	r3, [pc, #492]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4a7a      	ldr	r2, [pc, #488]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6213      	str	r3, [r2, #32]
 80038bc:	e02d      	b.n	800391a <HAL_RCC_OscConfig+0x36e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x334>
 80038c6:	4b76      	ldr	r3, [pc, #472]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4a75      	ldr	r2, [pc, #468]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6213      	str	r3, [r2, #32]
 80038d2:	4b73      	ldr	r3, [pc, #460]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a72      	ldr	r2, [pc, #456]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6213      	str	r3, [r2, #32]
 80038de:	e01c      	b.n	800391a <HAL_RCC_OscConfig+0x36e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d10c      	bne.n	8003902 <HAL_RCC_OscConfig+0x356>
 80038e8:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4a6c      	ldr	r2, [pc, #432]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6213      	str	r3, [r2, #32]
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4a69      	ldr	r2, [pc, #420]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6213      	str	r3, [r2, #32]
 8003900:	e00b      	b.n	800391a <HAL_RCC_OscConfig+0x36e>
 8003902:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a66      	ldr	r2, [pc, #408]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a63      	ldr	r2, [pc, #396]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d015      	beq.n	800394e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7ff fa67 	bl	8002df4 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7ff fa63 	bl	8002df4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0ab      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	4b57      	ldr	r3, [pc, #348]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ee      	beq.n	800392a <HAL_RCC_OscConfig+0x37e>
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394e:	f7ff fa51 	bl	8002df4 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7ff fa4d 	bl	8002df4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e095      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ee      	bne.n	8003956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397e:	4b48      	ldr	r3, [pc, #288]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4a47      	ldr	r2, [pc, #284]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8081 	beq.w	8003a96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d061      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d146      	bne.n	8003a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <HAL_RCC_OscConfig+0x4fc>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7ff fa21 	bl	8002df4 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7ff fa1d 	bl	8002df4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e067      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d108      	bne.n	80039f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039de:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	492d      	ldr	r1, [pc, #180]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a19      	ldr	r1, [r3, #32]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	430b      	orrs	r3, r1
 8003a02:	4927      	ldr	r1, [pc, #156]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <HAL_RCC_OscConfig+0x4fc>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7ff f9f1 	bl	8002df4 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a16:	f7ff f9ed 	bl	8002df4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e037      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x46a>
 8003a34:	e02f      	b.n	8003a96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <HAL_RCC_OscConfig+0x4fc>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7ff f9da 	bl	8002df4 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a44:	f7ff f9d6 	bl	8002df4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e020      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x498>
 8003a62:	e018      	b.n	8003a96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e013      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	42420060 	.word	0x42420060

08003aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0d0      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d910      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 0207 	bic.w	r2, r3, #7
 8003ad6:	4965      	ldr	r1, [pc, #404]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b8      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	494d      	ldr	r1, [pc, #308]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d040      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d115      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e07f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e073      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06b      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4936      	ldr	r1, [pc, #216]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7ff f92a 	bl	8002df4 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7ff f926 	bl	8002df4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e053      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d210      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0207 	bic.w	r2, r3, #7
 8003be2:	4922      	ldr	r1, [pc, #136]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e032      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4916      	ldr	r1, [pc, #88]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	490e      	ldr	r1, [pc, #56]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c3a:	f000 f82d 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	490a      	ldr	r1, [pc, #40]	; (8003c74 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	5ccb      	ldrb	r3, [r1, r3]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1cc>)
 8003c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x1d0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fbde 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40022000 	.word	0x40022000
 8003c70:	40021000 	.word	0x40021000
 8003c74:	0800a228 	.word	0x0800a228
 8003c78:	2000003c 	.word	0x2000003c
 8003c7c:	20000040 	.word	0x20000040

08003c80 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_EnableCSS+0x14>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	4242004c 	.word	0x4242004c

08003c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c98:	b490      	push	{r4, r7}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ca0:	1d3c      	adds	r4, r7, #4
 8003ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ca8:	f240 2301 	movw	r3, #513	; 0x201
 8003cac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d002      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d003      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x46>
 8003cd6:	e02d      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cda:	623b      	str	r3, [r7, #32]
      break;
 8003cdc:	e02d      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cea:	4413      	add	r3, r2
 8003cec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cfc:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0c5b      	lsrs	r3, r3, #17
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d16:	fb02 f203 	mul.w	r2, r2, r3
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	e004      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	623b      	str	r3, [r7, #32]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d36:	623b      	str	r3, [r7, #32]
      break;
 8003d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3728      	adds	r7, #40	; 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc90      	pop	{r4, r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	0800a208 	.word	0x0800a208
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	007a1200 	.word	0x007a1200
 8003d54:	003d0900 	.word	0x003d0900

08003d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d5c:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	2000003c 	.word	0x2000003c

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d70:	f7ff fff2 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	0800a238 	.word	0x0800a238

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d98:	f7ff ffde 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0adb      	lsrs	r3, r3, #11
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	0800a238 	.word	0x0800a238

08003dbc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	220f      	movs	r2, #15
 8003dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_RCC_GetClockConfig+0x58>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0203 	and.w	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_RCC_GetClockConfig+0x58>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_GetClockConfig+0x58>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCC_GetClockConfig+0x58>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	08db      	lsrs	r3, r3, #3
 8003df6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0207 	and.w	r2, r3, #7
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40022000 	.word	0x40022000

08003e1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d104      	bne.n	8003e36 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003e2c:	f000 f828 	bl	8003e80 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	701a      	strb	r2, [r3, #0]
  }
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	4002100a 	.word	0x4002100a

08003e44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <RCC_Delay+0x34>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <RCC_Delay+0x38>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0a5b      	lsrs	r3, r3, #9
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e60:	bf00      	nop
  }
  while (Delay --);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	60fa      	str	r2, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f9      	bne.n	8003e60 <RCC_Delay+0x1c>
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	2000003c 	.word	0x2000003c
 8003e7c:	10624dd3 	.word	0x10624dd3

08003e80 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e041      	b.n	8003f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe fcd4 	bl	8002860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f000 fa7e 	bl	80043cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d001      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e044      	b.n	8003fce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xac>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d018      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x6c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_TIM_Base_Start_IT+0xb0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x6c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d00e      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x6c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x6c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x6c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d111      	bne.n	8003fbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d010      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fba:	e007      	b.n	8003fcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40013400 	.word	0x40013400
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00

08003fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b02      	cmp	r3, #2
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0202 	mvn.w	r2, #2
 8004018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9b1 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9a4 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f9b3 	bl	80043a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b04      	cmp	r3, #4
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0204 	mvn.w	r2, #4
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f987 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f97a 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f989 	bl	80043a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0208 	mvn.w	r2, #8
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2204      	movs	r2, #4
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f95d 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f950 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f95f 	bl	80043a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b10      	cmp	r3, #16
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0210 	mvn.w	r2, #16
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2208      	movs	r2, #8
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f933 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f926 	bl	8004384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f935 	bl	80043a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0201 	mvn.w	r2, #1
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd ffb4 	bl	80020d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004188:	2b80      	cmp	r3, #128	; 0x80
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa9d 	bl	80046d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8f9 	bl	80043ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0220 	mvn.w	r2, #32
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa68 	bl	80046c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIM_ConfigClockSource+0x18>
 8004210:	2302      	movs	r3, #2
 8004212:	e0b3      	b.n	800437c <HAL_TIM_ConfigClockSource+0x180>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800423a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424c:	d03e      	beq.n	80042cc <HAL_TIM_ConfigClockSource+0xd0>
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004252:	f200 8087 	bhi.w	8004364 <HAL_TIM_ConfigClockSource+0x168>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425a:	f000 8085 	beq.w	8004368 <HAL_TIM_ConfigClockSource+0x16c>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	d87f      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d01a      	beq.n	800429e <HAL_TIM_ConfigClockSource+0xa2>
 8004268:	2b70      	cmp	r3, #112	; 0x70
 800426a:	d87b      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d050      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x116>
 8004270:	2b60      	cmp	r3, #96	; 0x60
 8004272:	d877      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d03c      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004278:	2b50      	cmp	r3, #80	; 0x50
 800427a:	d873      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d058      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x136>
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d86f      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d064      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x156>
 8004288:	2b30      	cmp	r3, #48	; 0x30
 800428a:	d86b      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d060      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x156>
 8004290:	2b20      	cmp	r3, #32
 8004292:	d867      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05c      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x156>
 8004298:	2b10      	cmp	r3, #16
 800429a:	d05a      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800429c:	e062      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6899      	ldr	r1, [r3, #8]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f000 f97e 	bl	80045ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	609a      	str	r2, [r3, #8]
      break;
 80042ca:	e04e      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6899      	ldr	r1, [r3, #8]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f000 f967 	bl	80045ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e03b      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6859      	ldr	r1, [r3, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	461a      	mov	r2, r3
 8004300:	f000 f8de 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2150      	movs	r1, #80	; 0x50
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f935 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004310:	e02b      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	f000 f8fc 	bl	800451c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2160      	movs	r1, #96	; 0x60
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f925 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004330:	e01b      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	461a      	mov	r2, r3
 8004340:	f000 f8be 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2140      	movs	r1, #64	; 0x40
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f915 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004350:	e00b      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f000 f90c 	bl	800457a <TIM_ITRx_SetConfig>
        break;
 8004362:	e002      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004364:	bf00      	nop
 8004366:	e000      	b.n	800436a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a33      	ldr	r2, [pc, #204]	; (80044ac <TIM_Base_SetConfig+0xe0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a32      	ldr	r2, [pc, #200]	; (80044b0 <TIM_Base_SetConfig+0xe4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00f      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d00b      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a2f      	ldr	r2, [pc, #188]	; (80044b4 <TIM_Base_SetConfig+0xe8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a2e      	ldr	r2, [pc, #184]	; (80044b8 <TIM_Base_SetConfig+0xec>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <TIM_Base_SetConfig+0xf0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d108      	bne.n	800441e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a22      	ldr	r2, [pc, #136]	; (80044ac <TIM_Base_SetConfig+0xe0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <TIM_Base_SetConfig+0x82>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <TIM_Base_SetConfig+0xe4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00f      	beq.n	800444e <TIM_Base_SetConfig+0x82>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004434:	d00b      	beq.n	800444e <TIM_Base_SetConfig+0x82>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <TIM_Base_SetConfig+0xe8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_Base_SetConfig+0x82>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <TIM_Base_SetConfig+0xec>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_Base_SetConfig+0x82>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <TIM_Base_SetConfig+0xf0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a09      	ldr	r2, [pc, #36]	; (80044ac <TIM_Base_SetConfig+0xe0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_Base_SetConfig+0xc8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <TIM_Base_SetConfig+0xe4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	615a      	str	r2, [r3, #20]
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40013400 	.word	0x40013400
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00

080044c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 030a 	bic.w	r3, r3, #10
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 0210 	bic.w	r2, r3, #16
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004558:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	f043 0307 	orr.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b087      	sub	sp, #28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	021a      	lsls	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	609a      	str	r2, [r3, #8]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004600:	2302      	movs	r3, #2
 8004602:	e050      	b.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d00e      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a14      	ldr	r2, [pc, #80]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10c      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00

080046c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e03f      	b.n	800477a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fe f9ba 	bl	8002a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb83 	bl	8004e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b08a      	sub	sp, #40	; 0x28
 8004786:	af02      	add	r7, sp, #8
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d17c      	bne.n	800489c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_UART_Transmit+0x2c>
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e075      	b.n	800489e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit+0x3e>
 80047bc:	2302      	movs	r3, #2
 80047be:	e06e      	b.n	800489e <HAL_UART_Transmit+0x11c>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047d6:	f7fe fb0d 	bl	8002df4 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d108      	bne.n	8004804 <HAL_UART_Transmit+0x82>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004814:	e02a      	b.n	800486c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f9a7 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e036      	b.n	800489e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	3302      	adds	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e007      	b.n	800485e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1cf      	bne.n	8004816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f977 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e006      	b.n	800489e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d140      	bne.n	8004942 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_UART_Receive_IT+0x26>
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e039      	b.n	8004944 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_UART_Receive_IT+0x38>
 80048da:	2302      	movs	r3, #2
 80048dc:	e032      	b.n	8004944 <HAL_UART_Receive_IT+0x9e>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2222      	movs	r2, #34	; 0x22
 8004902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0220 	orr.w	r2, r2, #32
 800493c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e000      	b.n	8004944 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
	...

08004950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10d      	bne.n	80049a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_UART_IRQHandler+0x52>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f9cc 	bl	8004d38 <UART_Receive_IT>
      return;
 80049a0:	e0d0      	b.n	8004b44 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80b0 	beq.w	8004b0a <HAL_UART_IRQHandler+0x1ba>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_UART_IRQHandler+0x70>
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80a5 	beq.w	8004b0a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_UART_IRQHandler+0x90>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_UART_IRQHandler+0xb0>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	f043 0202 	orr.w	r2, r3, #2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_UART_IRQHandler+0xd0>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	f043 0204 	orr.w	r2, r3, #4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00f      	beq.n	8004a4a <HAL_UART_IRQHandler+0xfa>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_UART_IRQHandler+0xee>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	f043 0208 	orr.w	r2, r3, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d077      	beq.n	8004b42 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_UART_IRQHandler+0x11c>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f966 	bl	8004d38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <HAL_UART_IRQHandler+0x144>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d031      	beq.n	8004af8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8b7 	bl	8004c08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d023      	beq.n	8004af0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac4:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <HAL_UART_IRQHandler+0x1fc>)
 8004ac6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe fa9f 	bl	8003010 <HAL_DMA_Abort_IT>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d016      	beq.n	8004b06 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae6:	e00e      	b.n	8004b06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f83a 	bl	8004b62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aee:	e00a      	b.n	8004b06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f836 	bl	8004b62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af6:	e006      	b.n	8004b06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f832 	bl	8004b62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b04:	e01d      	b.n	8004b42 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b06:	bf00      	nop
    return;
 8004b08:	e01b      	b.n	8004b42 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1d6>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8a3 	bl	8004c6a <UART_Transmit_IT>
    return;
 8004b24:	e00e      	b.n	8004b44 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <HAL_UART_IRQHandler+0x1f4>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8e4 	bl	8004d08 <UART_EndTransmit_IT>
    return;
 8004b40:	e000      	b.n	8004b44 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004b42:	bf00      	nop
  }
}
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	08004c43 	.word	0x08004c43

08004b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b84:	e02c      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d028      	beq.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b94:	f7fe f92e 	bl	8002df4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d21d      	bcs.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e00f      	b.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4013      	ands	r3, r2
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d0c3      	beq.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr

08004c42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff80 	bl	8004b62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b21      	cmp	r3, #33	; 0x21
 8004c7c:	d13e      	bne.n	8004cfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	d114      	bne.n	8004cb2 <UART_Transmit_IT+0x48>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d110      	bne.n	8004cb2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	621a      	str	r2, [r3, #32]
 8004cb0:	e008      	b.n	8004cc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6211      	str	r1, [r2, #32]
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10f      	bne.n	8004cf8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr

08004d08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff ff11 	bl	8004b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b22      	cmp	r3, #34	; 0x22
 8004d4a:	d170      	bne.n	8004e2e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d54:	d117      	bne.n	8004d86 <UART_Receive_IT+0x4e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d113      	bne.n	8004d86 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
 8004d84:	e026      	b.n	8004dd4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d98:	d007      	beq.n	8004daa <UART_Receive_IT+0x72>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <UART_Receive_IT+0x80>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e008      	b.n	8004dca <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4619      	mov	r1, r3
 8004de2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d120      	bne.n	8004e2a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0220 	bic.w	r2, r2, #32
 8004df6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fd fa85 	bl	8002330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e002      	b.n	8004e30 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e000      	b.n	8004e30 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
  }
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e72:	f023 030c 	bic.w	r3, r3, #12
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	; (8004f4c <UART_SetConfig+0x114>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d103      	bne.n	8004ea8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7fe ff78 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	e002      	b.n	8004eae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ea8:	f7fe ff60 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8004eac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009a      	lsls	r2, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <UART_SetConfig+0x118>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	0119      	lsls	r1, r3, #4
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <UART_SetConfig+0x118>)
 8004ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2064      	movs	r0, #100	; 0x64
 8004eee:	fb00 f303 	mul.w	r3, r0, r3
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	3332      	adds	r3, #50	; 0x32
 8004ef8:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <UART_SetConfig+0x118>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f04:	4419      	add	r1, r3
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009a      	lsls	r2, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <UART_SetConfig+0x118>)
 8004f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2064      	movs	r0, #100	; 0x64
 8004f26:	fb00 f303 	mul.w	r3, r0, r3
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	3332      	adds	r3, #50	; 0x32
 8004f30:	4a07      	ldr	r2, [pc, #28]	; (8004f50 <UART_SetConfig+0x118>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f003 020f 	and.w	r2, r3, #15
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	440a      	add	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40013800 	.word	0x40013800
 8004f50:	51eb851f 	.word	0x51eb851f

08004f54 <__errno>:
 8004f54:	4b01      	ldr	r3, [pc, #4]	; (8004f5c <__errno+0x8>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20000048 	.word	0x20000048

08004f60 <__libc_init_array>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	2600      	movs	r6, #0
 8004f64:	4d0c      	ldr	r5, [pc, #48]	; (8004f98 <__libc_init_array+0x38>)
 8004f66:	4c0d      	ldr	r4, [pc, #52]	; (8004f9c <__libc_init_array+0x3c>)
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	42a6      	cmp	r6, r4
 8004f6e:	d109      	bne.n	8004f84 <__libc_init_array+0x24>
 8004f70:	f005 f8ec 	bl	800a14c <_init>
 8004f74:	2600      	movs	r6, #0
 8004f76:	4d0a      	ldr	r5, [pc, #40]	; (8004fa0 <__libc_init_array+0x40>)
 8004f78:	4c0a      	ldr	r4, [pc, #40]	; (8004fa4 <__libc_init_array+0x44>)
 8004f7a:	1b64      	subs	r4, r4, r5
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	42a6      	cmp	r6, r4
 8004f80:	d105      	bne.n	8004f8e <__libc_init_array+0x2e>
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f88:	4798      	blx	r3
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7ee      	b.n	8004f6c <__libc_init_array+0xc>
 8004f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f92:	4798      	blx	r3
 8004f94:	3601      	adds	r6, #1
 8004f96:	e7f2      	b.n	8004f7e <__libc_init_array+0x1e>
 8004f98:	0800a70c 	.word	0x0800a70c
 8004f9c:	0800a70c 	.word	0x0800a70c
 8004fa0:	0800a70c 	.word	0x0800a70c
 8004fa4:	0800a710 	.word	0x0800a710

08004fa8 <malloc>:
 8004fa8:	4b02      	ldr	r3, [pc, #8]	; (8004fb4 <malloc+0xc>)
 8004faa:	4601      	mov	r1, r0
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	f000 b86d 	b.w	800508c <_malloc_r>
 8004fb2:	bf00      	nop
 8004fb4:	20000048 	.word	0x20000048

08004fb8 <free>:
 8004fb8:	4b02      	ldr	r3, [pc, #8]	; (8004fc4 <free+0xc>)
 8004fba:	4601      	mov	r1, r0
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	f000 b819 	b.w	8004ff4 <_free_r>
 8004fc2:	bf00      	nop
 8004fc4:	20000048 	.word	0x20000048

08004fc8 <memcpy>:
 8004fc8:	440a      	add	r2, r1
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd0:	d100      	bne.n	8004fd4 <memcpy+0xc>
 8004fd2:	4770      	bx	lr
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe0:	d1f9      	bne.n	8004fd6 <memcpy+0xe>
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <memset>:
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4402      	add	r2, r0
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d100      	bne.n	8004fee <memset+0xa>
 8004fec:	4770      	bx	lr
 8004fee:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff2:	e7f9      	b.n	8004fe8 <memset+0x4>

08004ff4 <_free_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	d043      	beq.n	8005084 <_free_r+0x90>
 8004ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005000:	1f0c      	subs	r4, r1, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfb8      	it	lt
 8005006:	18e4      	addlt	r4, r4, r3
 8005008:	f003 fc00 	bl	800880c <__malloc_lock>
 800500c:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <_free_r+0x94>)
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	4610      	mov	r0, r2
 8005012:	b933      	cbnz	r3, 8005022 <_free_r+0x2e>
 8005014:	6063      	str	r3, [r4, #4]
 8005016:	6014      	str	r4, [r2, #0]
 8005018:	4628      	mov	r0, r5
 800501a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800501e:	f003 bbfb 	b.w	8008818 <__malloc_unlock>
 8005022:	42a3      	cmp	r3, r4
 8005024:	d90a      	bls.n	800503c <_free_r+0x48>
 8005026:	6821      	ldr	r1, [r4, #0]
 8005028:	1862      	adds	r2, r4, r1
 800502a:	4293      	cmp	r3, r2
 800502c:	bf01      	itttt	eq
 800502e:	681a      	ldreq	r2, [r3, #0]
 8005030:	685b      	ldreq	r3, [r3, #4]
 8005032:	1852      	addeq	r2, r2, r1
 8005034:	6022      	streq	r2, [r4, #0]
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	6004      	str	r4, [r0, #0]
 800503a:	e7ed      	b.n	8005018 <_free_r+0x24>
 800503c:	461a      	mov	r2, r3
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	b10b      	cbz	r3, 8005046 <_free_r+0x52>
 8005042:	42a3      	cmp	r3, r4
 8005044:	d9fa      	bls.n	800503c <_free_r+0x48>
 8005046:	6811      	ldr	r1, [r2, #0]
 8005048:	1850      	adds	r0, r2, r1
 800504a:	42a0      	cmp	r0, r4
 800504c:	d10b      	bne.n	8005066 <_free_r+0x72>
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	4401      	add	r1, r0
 8005052:	1850      	adds	r0, r2, r1
 8005054:	4283      	cmp	r3, r0
 8005056:	6011      	str	r1, [r2, #0]
 8005058:	d1de      	bne.n	8005018 <_free_r+0x24>
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4401      	add	r1, r0
 8005060:	6011      	str	r1, [r2, #0]
 8005062:	6053      	str	r3, [r2, #4]
 8005064:	e7d8      	b.n	8005018 <_free_r+0x24>
 8005066:	d902      	bls.n	800506e <_free_r+0x7a>
 8005068:	230c      	movs	r3, #12
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	e7d4      	b.n	8005018 <_free_r+0x24>
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	1821      	adds	r1, r4, r0
 8005072:	428b      	cmp	r3, r1
 8005074:	bf01      	itttt	eq
 8005076:	6819      	ldreq	r1, [r3, #0]
 8005078:	685b      	ldreq	r3, [r3, #4]
 800507a:	1809      	addeq	r1, r1, r0
 800507c:	6021      	streq	r1, [r4, #0]
 800507e:	6063      	str	r3, [r4, #4]
 8005080:	6054      	str	r4, [r2, #4]
 8005082:	e7c9      	b.n	8005018 <_free_r+0x24>
 8005084:	bd38      	pop	{r3, r4, r5, pc}
 8005086:	bf00      	nop
 8005088:	20000644 	.word	0x20000644

0800508c <_malloc_r>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	1ccd      	adds	r5, r1, #3
 8005090:	f025 0503 	bic.w	r5, r5, #3
 8005094:	3508      	adds	r5, #8
 8005096:	2d0c      	cmp	r5, #12
 8005098:	bf38      	it	cc
 800509a:	250c      	movcc	r5, #12
 800509c:	2d00      	cmp	r5, #0
 800509e:	4606      	mov	r6, r0
 80050a0:	db01      	blt.n	80050a6 <_malloc_r+0x1a>
 80050a2:	42a9      	cmp	r1, r5
 80050a4:	d903      	bls.n	80050ae <_malloc_r+0x22>
 80050a6:	230c      	movs	r3, #12
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	2000      	movs	r0, #0
 80050ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ae:	f003 fbad 	bl	800880c <__malloc_lock>
 80050b2:	4921      	ldr	r1, [pc, #132]	; (8005138 <_malloc_r+0xac>)
 80050b4:	680a      	ldr	r2, [r1, #0]
 80050b6:	4614      	mov	r4, r2
 80050b8:	b99c      	cbnz	r4, 80050e2 <_malloc_r+0x56>
 80050ba:	4f20      	ldr	r7, [pc, #128]	; (800513c <_malloc_r+0xb0>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	b923      	cbnz	r3, 80050ca <_malloc_r+0x3e>
 80050c0:	4621      	mov	r1, r4
 80050c2:	4630      	mov	r0, r6
 80050c4:	f000 ff2c 	bl	8005f20 <_sbrk_r>
 80050c8:	6038      	str	r0, [r7, #0]
 80050ca:	4629      	mov	r1, r5
 80050cc:	4630      	mov	r0, r6
 80050ce:	f000 ff27 	bl	8005f20 <_sbrk_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d123      	bne.n	800511e <_malloc_r+0x92>
 80050d6:	230c      	movs	r3, #12
 80050d8:	4630      	mov	r0, r6
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	f003 fb9c 	bl	8008818 <__malloc_unlock>
 80050e0:	e7e3      	b.n	80050aa <_malloc_r+0x1e>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	1b5b      	subs	r3, r3, r5
 80050e6:	d417      	bmi.n	8005118 <_malloc_r+0x8c>
 80050e8:	2b0b      	cmp	r3, #11
 80050ea:	d903      	bls.n	80050f4 <_malloc_r+0x68>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	441c      	add	r4, r3
 80050f0:	6025      	str	r5, [r4, #0]
 80050f2:	e004      	b.n	80050fe <_malloc_r+0x72>
 80050f4:	6863      	ldr	r3, [r4, #4]
 80050f6:	42a2      	cmp	r2, r4
 80050f8:	bf0c      	ite	eq
 80050fa:	600b      	streq	r3, [r1, #0]
 80050fc:	6053      	strne	r3, [r2, #4]
 80050fe:	4630      	mov	r0, r6
 8005100:	f003 fb8a 	bl	8008818 <__malloc_unlock>
 8005104:	f104 000b 	add.w	r0, r4, #11
 8005108:	1d23      	adds	r3, r4, #4
 800510a:	f020 0007 	bic.w	r0, r0, #7
 800510e:	1ac2      	subs	r2, r0, r3
 8005110:	d0cc      	beq.n	80050ac <_malloc_r+0x20>
 8005112:	1a1b      	subs	r3, r3, r0
 8005114:	50a3      	str	r3, [r4, r2]
 8005116:	e7c9      	b.n	80050ac <_malloc_r+0x20>
 8005118:	4622      	mov	r2, r4
 800511a:	6864      	ldr	r4, [r4, #4]
 800511c:	e7cc      	b.n	80050b8 <_malloc_r+0x2c>
 800511e:	1cc4      	adds	r4, r0, #3
 8005120:	f024 0403 	bic.w	r4, r4, #3
 8005124:	42a0      	cmp	r0, r4
 8005126:	d0e3      	beq.n	80050f0 <_malloc_r+0x64>
 8005128:	1a21      	subs	r1, r4, r0
 800512a:	4630      	mov	r0, r6
 800512c:	f000 fef8 	bl	8005f20 <_sbrk_r>
 8005130:	3001      	adds	r0, #1
 8005132:	d1dd      	bne.n	80050f0 <_malloc_r+0x64>
 8005134:	e7cf      	b.n	80050d6 <_malloc_r+0x4a>
 8005136:	bf00      	nop
 8005138:	20000644 	.word	0x20000644
 800513c:	20000648 	.word	0x20000648

08005140 <__cvt>:
 8005140:	2b00      	cmp	r3, #0
 8005142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005146:	461f      	mov	r7, r3
 8005148:	bfbb      	ittet	lt
 800514a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800514e:	461f      	movlt	r7, r3
 8005150:	2300      	movge	r3, #0
 8005152:	232d      	movlt	r3, #45	; 0x2d
 8005154:	b088      	sub	sp, #32
 8005156:	4614      	mov	r4, r2
 8005158:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800515a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800515c:	7013      	strb	r3, [r2, #0]
 800515e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005160:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005164:	f023 0820 	bic.w	r8, r3, #32
 8005168:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800516c:	d005      	beq.n	800517a <__cvt+0x3a>
 800516e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005172:	d100      	bne.n	8005176 <__cvt+0x36>
 8005174:	3501      	adds	r5, #1
 8005176:	2302      	movs	r3, #2
 8005178:	e000      	b.n	800517c <__cvt+0x3c>
 800517a:	2303      	movs	r3, #3
 800517c:	aa07      	add	r2, sp, #28
 800517e:	9204      	str	r2, [sp, #16]
 8005180:	aa06      	add	r2, sp, #24
 8005182:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005186:	e9cd 3500 	strd	r3, r5, [sp]
 800518a:	4622      	mov	r2, r4
 800518c:	463b      	mov	r3, r7
 800518e:	f001 ff93 	bl	80070b8 <_dtoa_r>
 8005192:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005196:	4606      	mov	r6, r0
 8005198:	d102      	bne.n	80051a0 <__cvt+0x60>
 800519a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800519c:	07db      	lsls	r3, r3, #31
 800519e:	d522      	bpl.n	80051e6 <__cvt+0xa6>
 80051a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051a4:	eb06 0905 	add.w	r9, r6, r5
 80051a8:	d110      	bne.n	80051cc <__cvt+0x8c>
 80051aa:	7833      	ldrb	r3, [r6, #0]
 80051ac:	2b30      	cmp	r3, #48	; 0x30
 80051ae:	d10a      	bne.n	80051c6 <__cvt+0x86>
 80051b0:	2200      	movs	r2, #0
 80051b2:	2300      	movs	r3, #0
 80051b4:	4620      	mov	r0, r4
 80051b6:	4639      	mov	r1, r7
 80051b8:	f7fb fc62 	bl	8000a80 <__aeabi_dcmpeq>
 80051bc:	b918      	cbnz	r0, 80051c6 <__cvt+0x86>
 80051be:	f1c5 0501 	rsb	r5, r5, #1
 80051c2:	f8ca 5000 	str.w	r5, [sl]
 80051c6:	f8da 3000 	ldr.w	r3, [sl]
 80051ca:	4499      	add	r9, r3
 80051cc:	2200      	movs	r2, #0
 80051ce:	2300      	movs	r3, #0
 80051d0:	4620      	mov	r0, r4
 80051d2:	4639      	mov	r1, r7
 80051d4:	f7fb fc54 	bl	8000a80 <__aeabi_dcmpeq>
 80051d8:	b108      	cbz	r0, 80051de <__cvt+0x9e>
 80051da:	f8cd 901c 	str.w	r9, [sp, #28]
 80051de:	2230      	movs	r2, #48	; 0x30
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	454b      	cmp	r3, r9
 80051e4:	d307      	bcc.n	80051f6 <__cvt+0xb6>
 80051e6:	4630      	mov	r0, r6
 80051e8:	9b07      	ldr	r3, [sp, #28]
 80051ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051ec:	1b9b      	subs	r3, r3, r6
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	b008      	add	sp, #32
 80051f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	9107      	str	r1, [sp, #28]
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e7f0      	b.n	80051e0 <__cvt+0xa0>

080051fe <__exponent>:
 80051fe:	4603      	mov	r3, r0
 8005200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005202:	2900      	cmp	r1, #0
 8005204:	f803 2b02 	strb.w	r2, [r3], #2
 8005208:	bfb6      	itet	lt
 800520a:	222d      	movlt	r2, #45	; 0x2d
 800520c:	222b      	movge	r2, #43	; 0x2b
 800520e:	4249      	neglt	r1, r1
 8005210:	2909      	cmp	r1, #9
 8005212:	7042      	strb	r2, [r0, #1]
 8005214:	dd2b      	ble.n	800526e <__exponent+0x70>
 8005216:	f10d 0407 	add.w	r4, sp, #7
 800521a:	46a4      	mov	ip, r4
 800521c:	270a      	movs	r7, #10
 800521e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005222:	460a      	mov	r2, r1
 8005224:	46a6      	mov	lr, r4
 8005226:	fb07 1516 	mls	r5, r7, r6, r1
 800522a:	2a63      	cmp	r2, #99	; 0x63
 800522c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005230:	4631      	mov	r1, r6
 8005232:	f104 34ff 	add.w	r4, r4, #4294967295
 8005236:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800523a:	dcf0      	bgt.n	800521e <__exponent+0x20>
 800523c:	3130      	adds	r1, #48	; 0x30
 800523e:	f1ae 0502 	sub.w	r5, lr, #2
 8005242:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005246:	4629      	mov	r1, r5
 8005248:	1c44      	adds	r4, r0, #1
 800524a:	4561      	cmp	r1, ip
 800524c:	d30a      	bcc.n	8005264 <__exponent+0x66>
 800524e:	f10d 0209 	add.w	r2, sp, #9
 8005252:	eba2 020e 	sub.w	r2, r2, lr
 8005256:	4565      	cmp	r5, ip
 8005258:	bf88      	it	hi
 800525a:	2200      	movhi	r2, #0
 800525c:	4413      	add	r3, r2
 800525e:	1a18      	subs	r0, r3, r0
 8005260:	b003      	add	sp, #12
 8005262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005264:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005268:	f804 2f01 	strb.w	r2, [r4, #1]!
 800526c:	e7ed      	b.n	800524a <__exponent+0x4c>
 800526e:	2330      	movs	r3, #48	; 0x30
 8005270:	3130      	adds	r1, #48	; 0x30
 8005272:	7083      	strb	r3, [r0, #2]
 8005274:	70c1      	strb	r1, [r0, #3]
 8005276:	1d03      	adds	r3, r0, #4
 8005278:	e7f1      	b.n	800525e <__exponent+0x60>
	...

0800527c <_printf_float>:
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	b091      	sub	sp, #68	; 0x44
 8005282:	460c      	mov	r4, r1
 8005284:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005288:	4616      	mov	r6, r2
 800528a:	461f      	mov	r7, r3
 800528c:	4605      	mov	r5, r0
 800528e:	f003 fa1f 	bl	80086d0 <_localeconv_r>
 8005292:	6803      	ldr	r3, [r0, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	9309      	str	r3, [sp, #36]	; 0x24
 8005298:	f7fa ffc6 	bl	8000228 <strlen>
 800529c:	2300      	movs	r3, #0
 800529e:	930e      	str	r3, [sp, #56]	; 0x38
 80052a0:	f8d8 3000 	ldr.w	r3, [r8]
 80052a4:	900a      	str	r0, [sp, #40]	; 0x28
 80052a6:	3307      	adds	r3, #7
 80052a8:	f023 0307 	bic.w	r3, r3, #7
 80052ac:	f103 0208 	add.w	r2, r3, #8
 80052b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80052b4:	f8d4 b000 	ldr.w	fp, [r4]
 80052b8:	f8c8 2000 	str.w	r2, [r8]
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80052c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80052cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ce:	f04f 32ff 	mov.w	r2, #4294967295
 80052d2:	4640      	mov	r0, r8
 80052d4:	4b9c      	ldr	r3, [pc, #624]	; (8005548 <_printf_float+0x2cc>)
 80052d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052d8:	f7fb fc04 	bl	8000ae4 <__aeabi_dcmpun>
 80052dc:	bb70      	cbnz	r0, 800533c <_printf_float+0xc0>
 80052de:	f04f 32ff 	mov.w	r2, #4294967295
 80052e2:	4640      	mov	r0, r8
 80052e4:	4b98      	ldr	r3, [pc, #608]	; (8005548 <_printf_float+0x2cc>)
 80052e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052e8:	f7fb fbde 	bl	8000aa8 <__aeabi_dcmple>
 80052ec:	bb30      	cbnz	r0, 800533c <_printf_float+0xc0>
 80052ee:	2200      	movs	r2, #0
 80052f0:	2300      	movs	r3, #0
 80052f2:	4640      	mov	r0, r8
 80052f4:	4651      	mov	r1, sl
 80052f6:	f7fb fbcd 	bl	8000a94 <__aeabi_dcmplt>
 80052fa:	b110      	cbz	r0, 8005302 <_printf_float+0x86>
 80052fc:	232d      	movs	r3, #45	; 0x2d
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005302:	4b92      	ldr	r3, [pc, #584]	; (800554c <_printf_float+0x2d0>)
 8005304:	4892      	ldr	r0, [pc, #584]	; (8005550 <_printf_float+0x2d4>)
 8005306:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800530a:	bf94      	ite	ls
 800530c:	4698      	movls	r8, r3
 800530e:	4680      	movhi	r8, r0
 8005310:	2303      	movs	r3, #3
 8005312:	f04f 0a00 	mov.w	sl, #0
 8005316:	6123      	str	r3, [r4, #16]
 8005318:	f02b 0304 	bic.w	r3, fp, #4
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	4633      	mov	r3, r6
 8005320:	4621      	mov	r1, r4
 8005322:	4628      	mov	r0, r5
 8005324:	9700      	str	r7, [sp, #0]
 8005326:	aa0f      	add	r2, sp, #60	; 0x3c
 8005328:	f000 f9d4 	bl	80056d4 <_printf_common>
 800532c:	3001      	adds	r0, #1
 800532e:	f040 8090 	bne.w	8005452 <_printf_float+0x1d6>
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	b011      	add	sp, #68	; 0x44
 8005338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533c:	4642      	mov	r2, r8
 800533e:	4653      	mov	r3, sl
 8005340:	4640      	mov	r0, r8
 8005342:	4651      	mov	r1, sl
 8005344:	f7fb fbce 	bl	8000ae4 <__aeabi_dcmpun>
 8005348:	b148      	cbz	r0, 800535e <_printf_float+0xe2>
 800534a:	f1ba 0f00 	cmp.w	sl, #0
 800534e:	bfb8      	it	lt
 8005350:	232d      	movlt	r3, #45	; 0x2d
 8005352:	4880      	ldr	r0, [pc, #512]	; (8005554 <_printf_float+0x2d8>)
 8005354:	bfb8      	it	lt
 8005356:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800535a:	4b7f      	ldr	r3, [pc, #508]	; (8005558 <_printf_float+0x2dc>)
 800535c:	e7d3      	b.n	8005306 <_printf_float+0x8a>
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	d142      	bne.n	80053ee <_printf_float+0x172>
 8005368:	2306      	movs	r3, #6
 800536a:	6063      	str	r3, [r4, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	9206      	str	r2, [sp, #24]
 8005370:	aa0e      	add	r2, sp, #56	; 0x38
 8005372:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005376:	aa0d      	add	r2, sp, #52	; 0x34
 8005378:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800537c:	9203      	str	r2, [sp, #12]
 800537e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005382:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	4642      	mov	r2, r8
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	4628      	mov	r0, r5
 8005390:	4653      	mov	r3, sl
 8005392:	910b      	str	r1, [sp, #44]	; 0x2c
 8005394:	f7ff fed4 	bl	8005140 <__cvt>
 8005398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800539a:	4680      	mov	r8, r0
 800539c:	2947      	cmp	r1, #71	; 0x47
 800539e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053a0:	d108      	bne.n	80053b4 <_printf_float+0x138>
 80053a2:	1cc8      	adds	r0, r1, #3
 80053a4:	db02      	blt.n	80053ac <_printf_float+0x130>
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	4299      	cmp	r1, r3
 80053aa:	dd40      	ble.n	800542e <_printf_float+0x1b2>
 80053ac:	f1a9 0902 	sub.w	r9, r9, #2
 80053b0:	fa5f f989 	uxtb.w	r9, r9
 80053b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053b8:	d81f      	bhi.n	80053fa <_printf_float+0x17e>
 80053ba:	464a      	mov	r2, r9
 80053bc:	3901      	subs	r1, #1
 80053be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053c2:	910d      	str	r1, [sp, #52]	; 0x34
 80053c4:	f7ff ff1b 	bl	80051fe <__exponent>
 80053c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053ca:	4682      	mov	sl, r0
 80053cc:	1813      	adds	r3, r2, r0
 80053ce:	2a01      	cmp	r2, #1
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	dc02      	bgt.n	80053da <_printf_float+0x15e>
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	07d2      	lsls	r2, r2, #31
 80053d8:	d501      	bpl.n	80053de <_printf_float+0x162>
 80053da:	3301      	adds	r3, #1
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d09b      	beq.n	800531e <_printf_float+0xa2>
 80053e6:	232d      	movs	r3, #45	; 0x2d
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ec:	e797      	b.n	800531e <_printf_float+0xa2>
 80053ee:	2947      	cmp	r1, #71	; 0x47
 80053f0:	d1bc      	bne.n	800536c <_printf_float+0xf0>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ba      	bne.n	800536c <_printf_float+0xf0>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e7b7      	b.n	800536a <_printf_float+0xee>
 80053fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80053fe:	d118      	bne.n	8005432 <_printf_float+0x1b6>
 8005400:	2900      	cmp	r1, #0
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	dd0b      	ble.n	800541e <_printf_float+0x1a2>
 8005406:	6121      	str	r1, [r4, #16]
 8005408:	b913      	cbnz	r3, 8005410 <_printf_float+0x194>
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	07d0      	lsls	r0, r2, #31
 800540e:	d502      	bpl.n	8005416 <_printf_float+0x19a>
 8005410:	3301      	adds	r3, #1
 8005412:	440b      	add	r3, r1
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	f04f 0a00 	mov.w	sl, #0
 800541a:	65a1      	str	r1, [r4, #88]	; 0x58
 800541c:	e7df      	b.n	80053de <_printf_float+0x162>
 800541e:	b913      	cbnz	r3, 8005426 <_printf_float+0x1aa>
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	07d2      	lsls	r2, r2, #31
 8005424:	d501      	bpl.n	800542a <_printf_float+0x1ae>
 8005426:	3302      	adds	r3, #2
 8005428:	e7f4      	b.n	8005414 <_printf_float+0x198>
 800542a:	2301      	movs	r3, #1
 800542c:	e7f2      	b.n	8005414 <_printf_float+0x198>
 800542e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005434:	4299      	cmp	r1, r3
 8005436:	db05      	blt.n	8005444 <_printf_float+0x1c8>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	6121      	str	r1, [r4, #16]
 800543c:	07d8      	lsls	r0, r3, #31
 800543e:	d5ea      	bpl.n	8005416 <_printf_float+0x19a>
 8005440:	1c4b      	adds	r3, r1, #1
 8005442:	e7e7      	b.n	8005414 <_printf_float+0x198>
 8005444:	2900      	cmp	r1, #0
 8005446:	bfcc      	ite	gt
 8005448:	2201      	movgt	r2, #1
 800544a:	f1c1 0202 	rsble	r2, r1, #2
 800544e:	4413      	add	r3, r2
 8005450:	e7e0      	b.n	8005414 <_printf_float+0x198>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	055a      	lsls	r2, r3, #21
 8005456:	d407      	bmi.n	8005468 <_printf_float+0x1ec>
 8005458:	6923      	ldr	r3, [r4, #16]
 800545a:	4642      	mov	r2, r8
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	d12b      	bne.n	80054be <_printf_float+0x242>
 8005466:	e764      	b.n	8005332 <_printf_float+0xb6>
 8005468:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800546c:	f240 80dd 	bls.w	800562a <_printf_float+0x3ae>
 8005470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005474:	2200      	movs	r2, #0
 8005476:	2300      	movs	r3, #0
 8005478:	f7fb fb02 	bl	8000a80 <__aeabi_dcmpeq>
 800547c:	2800      	cmp	r0, #0
 800547e:	d033      	beq.n	80054e8 <_printf_float+0x26c>
 8005480:	2301      	movs	r3, #1
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	4a35      	ldr	r2, [pc, #212]	; (800555c <_printf_float+0x2e0>)
 8005488:	47b8      	blx	r7
 800548a:	3001      	adds	r0, #1
 800548c:	f43f af51 	beq.w	8005332 <_printf_float+0xb6>
 8005490:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005494:	429a      	cmp	r2, r3
 8005496:	db02      	blt.n	800549e <_printf_float+0x222>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	07d8      	lsls	r0, r3, #31
 800549c:	d50f      	bpl.n	80054be <_printf_float+0x242>
 800549e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054a2:	4631      	mov	r1, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b8      	blx	r7
 80054a8:	3001      	adds	r0, #1
 80054aa:	f43f af42 	beq.w	8005332 <_printf_float+0xb6>
 80054ae:	f04f 0800 	mov.w	r8, #0
 80054b2:	f104 091a 	add.w	r9, r4, #26
 80054b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054b8:	3b01      	subs	r3, #1
 80054ba:	4543      	cmp	r3, r8
 80054bc:	dc09      	bgt.n	80054d2 <_printf_float+0x256>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	079b      	lsls	r3, r3, #30
 80054c2:	f100 8102 	bmi.w	80056ca <_printf_float+0x44e>
 80054c6:	68e0      	ldr	r0, [r4, #12]
 80054c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054ca:	4298      	cmp	r0, r3
 80054cc:	bfb8      	it	lt
 80054ce:	4618      	movlt	r0, r3
 80054d0:	e731      	b.n	8005336 <_printf_float+0xba>
 80054d2:	2301      	movs	r3, #1
 80054d4:	464a      	mov	r2, r9
 80054d6:	4631      	mov	r1, r6
 80054d8:	4628      	mov	r0, r5
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	f43f af28 	beq.w	8005332 <_printf_float+0xb6>
 80054e2:	f108 0801 	add.w	r8, r8, #1
 80054e6:	e7e6      	b.n	80054b6 <_printf_float+0x23a>
 80054e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dc38      	bgt.n	8005560 <_printf_float+0x2e4>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4631      	mov	r1, r6
 80054f2:	4628      	mov	r0, r5
 80054f4:	4a19      	ldr	r2, [pc, #100]	; (800555c <_printf_float+0x2e0>)
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f af1a 	beq.w	8005332 <_printf_float+0xb6>
 80054fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005502:	4313      	orrs	r3, r2
 8005504:	d102      	bne.n	800550c <_printf_float+0x290>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	07d9      	lsls	r1, r3, #31
 800550a:	d5d8      	bpl.n	80054be <_printf_float+0x242>
 800550c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	f43f af0b 	beq.w	8005332 <_printf_float+0xb6>
 800551c:	f04f 0900 	mov.w	r9, #0
 8005520:	f104 0a1a 	add.w	sl, r4, #26
 8005524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005526:	425b      	negs	r3, r3
 8005528:	454b      	cmp	r3, r9
 800552a:	dc01      	bgt.n	8005530 <_printf_float+0x2b4>
 800552c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800552e:	e794      	b.n	800545a <_printf_float+0x1de>
 8005530:	2301      	movs	r3, #1
 8005532:	4652      	mov	r2, sl
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f aef9 	beq.w	8005332 <_printf_float+0xb6>
 8005540:	f109 0901 	add.w	r9, r9, #1
 8005544:	e7ee      	b.n	8005524 <_printf_float+0x2a8>
 8005546:	bf00      	nop
 8005548:	7fefffff 	.word	0x7fefffff
 800554c:	0800a348 	.word	0x0800a348
 8005550:	0800a34c 	.word	0x0800a34c
 8005554:	0800a354 	.word	0x0800a354
 8005558:	0800a350 	.word	0x0800a350
 800555c:	0800a6b9 	.word	0x0800a6b9
 8005560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005564:	429a      	cmp	r2, r3
 8005566:	bfa8      	it	ge
 8005568:	461a      	movge	r2, r3
 800556a:	2a00      	cmp	r2, #0
 800556c:	4691      	mov	r9, r2
 800556e:	dc37      	bgt.n	80055e0 <_printf_float+0x364>
 8005570:	f04f 0b00 	mov.w	fp, #0
 8005574:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005578:	f104 021a 	add.w	r2, r4, #26
 800557c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005580:	ebaa 0309 	sub.w	r3, sl, r9
 8005584:	455b      	cmp	r3, fp
 8005586:	dc33      	bgt.n	80055f0 <_printf_float+0x374>
 8005588:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800558c:	429a      	cmp	r2, r3
 800558e:	db3b      	blt.n	8005608 <_printf_float+0x38c>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	07da      	lsls	r2, r3, #31
 8005594:	d438      	bmi.n	8005608 <_printf_float+0x38c>
 8005596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005598:	990d      	ldr	r1, [sp, #52]	; 0x34
 800559a:	eba2 030a 	sub.w	r3, r2, sl
 800559e:	eba2 0901 	sub.w	r9, r2, r1
 80055a2:	4599      	cmp	r9, r3
 80055a4:	bfa8      	it	ge
 80055a6:	4699      	movge	r9, r3
 80055a8:	f1b9 0f00 	cmp.w	r9, #0
 80055ac:	dc34      	bgt.n	8005618 <_printf_float+0x39c>
 80055ae:	f04f 0800 	mov.w	r8, #0
 80055b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055b6:	f104 0a1a 	add.w	sl, r4, #26
 80055ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	eba3 0309 	sub.w	r3, r3, r9
 80055c4:	4543      	cmp	r3, r8
 80055c6:	f77f af7a 	ble.w	80054be <_printf_float+0x242>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4652      	mov	r2, sl
 80055ce:	4631      	mov	r1, r6
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b8      	blx	r7
 80055d4:	3001      	adds	r0, #1
 80055d6:	f43f aeac 	beq.w	8005332 <_printf_float+0xb6>
 80055da:	f108 0801 	add.w	r8, r8, #1
 80055de:	e7ec      	b.n	80055ba <_printf_float+0x33e>
 80055e0:	4613      	mov	r3, r2
 80055e2:	4631      	mov	r1, r6
 80055e4:	4642      	mov	r2, r8
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	d1c0      	bne.n	8005570 <_printf_float+0x2f4>
 80055ee:	e6a0      	b.n	8005332 <_printf_float+0xb6>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f ae99 	beq.w	8005332 <_printf_float+0xb6>
 8005600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005602:	f10b 0b01 	add.w	fp, fp, #1
 8005606:	e7b9      	b.n	800557c <_printf_float+0x300>
 8005608:	4631      	mov	r1, r6
 800560a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	d1bf      	bne.n	8005596 <_printf_float+0x31a>
 8005616:	e68c      	b.n	8005332 <_printf_float+0xb6>
 8005618:	464b      	mov	r3, r9
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	eb08 020a 	add.w	r2, r8, sl
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	d1c2      	bne.n	80055ae <_printf_float+0x332>
 8005628:	e683      	b.n	8005332 <_printf_float+0xb6>
 800562a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800562c:	2a01      	cmp	r2, #1
 800562e:	dc01      	bgt.n	8005634 <_printf_float+0x3b8>
 8005630:	07db      	lsls	r3, r3, #31
 8005632:	d537      	bpl.n	80056a4 <_printf_float+0x428>
 8005634:	2301      	movs	r3, #1
 8005636:	4642      	mov	r2, r8
 8005638:	4631      	mov	r1, r6
 800563a:	4628      	mov	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f ae77 	beq.w	8005332 <_printf_float+0xb6>
 8005644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	47b8      	blx	r7
 800564e:	3001      	adds	r0, #1
 8005650:	f43f ae6f 	beq.w	8005332 <_printf_float+0xb6>
 8005654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	f7fb fa10 	bl	8000a80 <__aeabi_dcmpeq>
 8005660:	b9d8      	cbnz	r0, 800569a <_printf_float+0x41e>
 8005662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005664:	f108 0201 	add.w	r2, r8, #1
 8005668:	3b01      	subs	r3, #1
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	d10e      	bne.n	8005692 <_printf_float+0x416>
 8005674:	e65d      	b.n	8005332 <_printf_float+0xb6>
 8005676:	2301      	movs	r3, #1
 8005678:	464a      	mov	r2, r9
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	f43f ae56 	beq.w	8005332 <_printf_float+0xb6>
 8005686:	f108 0801 	add.w	r8, r8, #1
 800568a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800568c:	3b01      	subs	r3, #1
 800568e:	4543      	cmp	r3, r8
 8005690:	dcf1      	bgt.n	8005676 <_printf_float+0x3fa>
 8005692:	4653      	mov	r3, sl
 8005694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005698:	e6e0      	b.n	800545c <_printf_float+0x1e0>
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	f104 091a 	add.w	r9, r4, #26
 80056a2:	e7f2      	b.n	800568a <_printf_float+0x40e>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4642      	mov	r2, r8
 80056a8:	e7df      	b.n	800566a <_printf_float+0x3ee>
 80056aa:	2301      	movs	r3, #1
 80056ac:	464a      	mov	r2, r9
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	f43f ae3c 	beq.w	8005332 <_printf_float+0xb6>
 80056ba:	f108 0801 	add.w	r8, r8, #1
 80056be:	68e3      	ldr	r3, [r4, #12]
 80056c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056c2:	1a5b      	subs	r3, r3, r1
 80056c4:	4543      	cmp	r3, r8
 80056c6:	dcf0      	bgt.n	80056aa <_printf_float+0x42e>
 80056c8:	e6fd      	b.n	80054c6 <_printf_float+0x24a>
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	f104 0919 	add.w	r9, r4, #25
 80056d2:	e7f4      	b.n	80056be <_printf_float+0x442>

080056d4 <_printf_common>:
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
 80056da:	4699      	mov	r9, r3
 80056dc:	688a      	ldr	r2, [r1, #8]
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	4607      	mov	r7, r0
 80056e2:	4293      	cmp	r3, r2
 80056e4:	bfb8      	it	lt
 80056e6:	4613      	movlt	r3, r2
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ee:	460c      	mov	r4, r1
 80056f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056f4:	b10a      	cbz	r2, 80056fa <_printf_common+0x26>
 80056f6:	3301      	adds	r3, #1
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	6833      	ldrmi	r3, [r6, #0]
 8005702:	3302      	addmi	r3, #2
 8005704:	6033      	strmi	r3, [r6, #0]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d106      	bne.n	800571c <_printf_common+0x48>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	6832      	ldr	r2, [r6, #0]
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	42ab      	cmp	r3, r5
 800571a:	dc28      	bgt.n	800576e <_printf_common+0x9a>
 800571c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005720:	1e13      	subs	r3, r2, #0
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	bf18      	it	ne
 8005726:	2301      	movne	r3, #1
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	d42d      	bmi.n	8005788 <_printf_common+0xb4>
 800572c:	4649      	mov	r1, r9
 800572e:	4638      	mov	r0, r7
 8005730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d020      	beq.n	800577c <_printf_common+0xa8>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	68e5      	ldr	r5, [r4, #12]
 800573e:	f003 0306 	and.w	r3, r3, #6
 8005742:	2b04      	cmp	r3, #4
 8005744:	bf18      	it	ne
 8005746:	2500      	movne	r5, #0
 8005748:	6832      	ldr	r2, [r6, #0]
 800574a:	f04f 0600 	mov.w	r6, #0
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	bf08      	it	eq
 8005752:	1aad      	subeq	r5, r5, r2
 8005754:	6922      	ldr	r2, [r4, #16]
 8005756:	bf08      	it	eq
 8005758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800575c:	4293      	cmp	r3, r2
 800575e:	bfc4      	itt	gt
 8005760:	1a9b      	subgt	r3, r3, r2
 8005762:	18ed      	addgt	r5, r5, r3
 8005764:	341a      	adds	r4, #26
 8005766:	42b5      	cmp	r5, r6
 8005768:	d11a      	bne.n	80057a0 <_printf_common+0xcc>
 800576a:	2000      	movs	r0, #0
 800576c:	e008      	b.n	8005780 <_printf_common+0xac>
 800576e:	2301      	movs	r3, #1
 8005770:	4652      	mov	r2, sl
 8005772:	4649      	mov	r1, r9
 8005774:	4638      	mov	r0, r7
 8005776:	47c0      	blx	r8
 8005778:	3001      	adds	r0, #1
 800577a:	d103      	bne.n	8005784 <_printf_common+0xb0>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005784:	3501      	adds	r5, #1
 8005786:	e7c4      	b.n	8005712 <_printf_common+0x3e>
 8005788:	2030      	movs	r0, #48	; 0x30
 800578a:	18e1      	adds	r1, r4, r3
 800578c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005796:	4422      	add	r2, r4
 8005798:	3302      	adds	r3, #2
 800579a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800579e:	e7c5      	b.n	800572c <_printf_common+0x58>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4622      	mov	r2, r4
 80057a4:	4649      	mov	r1, r9
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c0      	blx	r8
 80057aa:	3001      	adds	r0, #1
 80057ac:	d0e6      	beq.n	800577c <_printf_common+0xa8>
 80057ae:	3601      	adds	r6, #1
 80057b0:	e7d9      	b.n	8005766 <_printf_common+0x92>
	...

080057b4 <_printf_i>:
 80057b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	460c      	mov	r4, r1
 80057ba:	7e27      	ldrb	r7, [r4, #24]
 80057bc:	4691      	mov	r9, r2
 80057be:	2f78      	cmp	r7, #120	; 0x78
 80057c0:	4680      	mov	r8, r0
 80057c2:	469a      	mov	sl, r3
 80057c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057ca:	d807      	bhi.n	80057dc <_printf_i+0x28>
 80057cc:	2f62      	cmp	r7, #98	; 0x62
 80057ce:	d80a      	bhi.n	80057e6 <_printf_i+0x32>
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	f000 80d9 	beq.w	8005988 <_printf_i+0x1d4>
 80057d6:	2f58      	cmp	r7, #88	; 0x58
 80057d8:	f000 80a4 	beq.w	8005924 <_printf_i+0x170>
 80057dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e4:	e03a      	b.n	800585c <_printf_i+0xa8>
 80057e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ea:	2b15      	cmp	r3, #21
 80057ec:	d8f6      	bhi.n	80057dc <_printf_i+0x28>
 80057ee:	a001      	add	r0, pc, #4	; (adr r0, 80057f4 <_printf_i+0x40>)
 80057f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80057f4:	0800584d 	.word	0x0800584d
 80057f8:	08005861 	.word	0x08005861
 80057fc:	080057dd 	.word	0x080057dd
 8005800:	080057dd 	.word	0x080057dd
 8005804:	080057dd 	.word	0x080057dd
 8005808:	080057dd 	.word	0x080057dd
 800580c:	08005861 	.word	0x08005861
 8005810:	080057dd 	.word	0x080057dd
 8005814:	080057dd 	.word	0x080057dd
 8005818:	080057dd 	.word	0x080057dd
 800581c:	080057dd 	.word	0x080057dd
 8005820:	0800596f 	.word	0x0800596f
 8005824:	08005891 	.word	0x08005891
 8005828:	08005951 	.word	0x08005951
 800582c:	080057dd 	.word	0x080057dd
 8005830:	080057dd 	.word	0x080057dd
 8005834:	08005991 	.word	0x08005991
 8005838:	080057dd 	.word	0x080057dd
 800583c:	08005891 	.word	0x08005891
 8005840:	080057dd 	.word	0x080057dd
 8005844:	080057dd 	.word	0x080057dd
 8005848:	08005959 	.word	0x08005959
 800584c:	680b      	ldr	r3, [r1, #0]
 800584e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005852:	1d1a      	adds	r2, r3, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	600a      	str	r2, [r1, #0]
 8005858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800585c:	2301      	movs	r3, #1
 800585e:	e0a4      	b.n	80059aa <_printf_i+0x1f6>
 8005860:	6825      	ldr	r5, [r4, #0]
 8005862:	6808      	ldr	r0, [r1, #0]
 8005864:	062e      	lsls	r6, r5, #24
 8005866:	f100 0304 	add.w	r3, r0, #4
 800586a:	d50a      	bpl.n	8005882 <_printf_i+0xce>
 800586c:	6805      	ldr	r5, [r0, #0]
 800586e:	600b      	str	r3, [r1, #0]
 8005870:	2d00      	cmp	r5, #0
 8005872:	da03      	bge.n	800587c <_printf_i+0xc8>
 8005874:	232d      	movs	r3, #45	; 0x2d
 8005876:	426d      	negs	r5, r5
 8005878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587c:	230a      	movs	r3, #10
 800587e:	485e      	ldr	r0, [pc, #376]	; (80059f8 <_printf_i+0x244>)
 8005880:	e019      	b.n	80058b6 <_printf_i+0x102>
 8005882:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005886:	6805      	ldr	r5, [r0, #0]
 8005888:	600b      	str	r3, [r1, #0]
 800588a:	bf18      	it	ne
 800588c:	b22d      	sxthne	r5, r5
 800588e:	e7ef      	b.n	8005870 <_printf_i+0xbc>
 8005890:	680b      	ldr	r3, [r1, #0]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	1d18      	adds	r0, r3, #4
 8005896:	6008      	str	r0, [r1, #0]
 8005898:	0628      	lsls	r0, r5, #24
 800589a:	d501      	bpl.n	80058a0 <_printf_i+0xec>
 800589c:	681d      	ldr	r5, [r3, #0]
 800589e:	e002      	b.n	80058a6 <_printf_i+0xf2>
 80058a0:	0669      	lsls	r1, r5, #25
 80058a2:	d5fb      	bpl.n	800589c <_printf_i+0xe8>
 80058a4:	881d      	ldrh	r5, [r3, #0]
 80058a6:	2f6f      	cmp	r7, #111	; 0x6f
 80058a8:	bf0c      	ite	eq
 80058aa:	2308      	moveq	r3, #8
 80058ac:	230a      	movne	r3, #10
 80058ae:	4852      	ldr	r0, [pc, #328]	; (80059f8 <_printf_i+0x244>)
 80058b0:	2100      	movs	r1, #0
 80058b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058b6:	6866      	ldr	r6, [r4, #4]
 80058b8:	2e00      	cmp	r6, #0
 80058ba:	bfa8      	it	ge
 80058bc:	6821      	ldrge	r1, [r4, #0]
 80058be:	60a6      	str	r6, [r4, #8]
 80058c0:	bfa4      	itt	ge
 80058c2:	f021 0104 	bicge.w	r1, r1, #4
 80058c6:	6021      	strge	r1, [r4, #0]
 80058c8:	b90d      	cbnz	r5, 80058ce <_printf_i+0x11a>
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d04d      	beq.n	800596a <_printf_i+0x1b6>
 80058ce:	4616      	mov	r6, r2
 80058d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058d4:	fb03 5711 	mls	r7, r3, r1, r5
 80058d8:	5dc7      	ldrb	r7, [r0, r7]
 80058da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058de:	462f      	mov	r7, r5
 80058e0:	42bb      	cmp	r3, r7
 80058e2:	460d      	mov	r5, r1
 80058e4:	d9f4      	bls.n	80058d0 <_printf_i+0x11c>
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d10b      	bne.n	8005902 <_printf_i+0x14e>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	07df      	lsls	r7, r3, #31
 80058ee:	d508      	bpl.n	8005902 <_printf_i+0x14e>
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	6861      	ldr	r1, [r4, #4]
 80058f4:	4299      	cmp	r1, r3
 80058f6:	bfde      	ittt	le
 80058f8:	2330      	movle	r3, #48	; 0x30
 80058fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005902:	1b92      	subs	r2, r2, r6
 8005904:	6122      	str	r2, [r4, #16]
 8005906:	464b      	mov	r3, r9
 8005908:	4621      	mov	r1, r4
 800590a:	4640      	mov	r0, r8
 800590c:	f8cd a000 	str.w	sl, [sp]
 8005910:	aa03      	add	r2, sp, #12
 8005912:	f7ff fedf 	bl	80056d4 <_printf_common>
 8005916:	3001      	adds	r0, #1
 8005918:	d14c      	bne.n	80059b4 <_printf_i+0x200>
 800591a:	f04f 30ff 	mov.w	r0, #4294967295
 800591e:	b004      	add	sp, #16
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	4834      	ldr	r0, [pc, #208]	; (80059f8 <_printf_i+0x244>)
 8005926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800592a:	680e      	ldr	r6, [r1, #0]
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005932:	061f      	lsls	r7, r3, #24
 8005934:	600e      	str	r6, [r1, #0]
 8005936:	d514      	bpl.n	8005962 <_printf_i+0x1ae>
 8005938:	07d9      	lsls	r1, r3, #31
 800593a:	bf44      	itt	mi
 800593c:	f043 0320 	orrmi.w	r3, r3, #32
 8005940:	6023      	strmi	r3, [r4, #0]
 8005942:	b91d      	cbnz	r5, 800594c <_printf_i+0x198>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	f023 0320 	bic.w	r3, r3, #32
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	2310      	movs	r3, #16
 800594e:	e7af      	b.n	80058b0 <_printf_i+0xfc>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	f043 0320 	orr.w	r3, r3, #32
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	2378      	movs	r3, #120	; 0x78
 800595a:	4828      	ldr	r0, [pc, #160]	; (80059fc <_printf_i+0x248>)
 800595c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005960:	e7e3      	b.n	800592a <_printf_i+0x176>
 8005962:	065e      	lsls	r6, r3, #25
 8005964:	bf48      	it	mi
 8005966:	b2ad      	uxthmi	r5, r5
 8005968:	e7e6      	b.n	8005938 <_printf_i+0x184>
 800596a:	4616      	mov	r6, r2
 800596c:	e7bb      	b.n	80058e6 <_printf_i+0x132>
 800596e:	680b      	ldr	r3, [r1, #0]
 8005970:	6826      	ldr	r6, [r4, #0]
 8005972:	1d1d      	adds	r5, r3, #4
 8005974:	6960      	ldr	r0, [r4, #20]
 8005976:	600d      	str	r5, [r1, #0]
 8005978:	0635      	lsls	r5, r6, #24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	d501      	bpl.n	8005982 <_printf_i+0x1ce>
 800597e:	6018      	str	r0, [r3, #0]
 8005980:	e002      	b.n	8005988 <_printf_i+0x1d4>
 8005982:	0671      	lsls	r1, r6, #25
 8005984:	d5fb      	bpl.n	800597e <_printf_i+0x1ca>
 8005986:	8018      	strh	r0, [r3, #0]
 8005988:	2300      	movs	r3, #0
 800598a:	4616      	mov	r6, r2
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	e7ba      	b.n	8005906 <_printf_i+0x152>
 8005990:	680b      	ldr	r3, [r1, #0]
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	600a      	str	r2, [r1, #0]
 8005996:	681e      	ldr	r6, [r3, #0]
 8005998:	2100      	movs	r1, #0
 800599a:	4630      	mov	r0, r6
 800599c:	6862      	ldr	r2, [r4, #4]
 800599e:	f002 ff27 	bl	80087f0 <memchr>
 80059a2:	b108      	cbz	r0, 80059a8 <_printf_i+0x1f4>
 80059a4:	1b80      	subs	r0, r0, r6
 80059a6:	6060      	str	r0, [r4, #4]
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	6123      	str	r3, [r4, #16]
 80059ac:	2300      	movs	r3, #0
 80059ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b2:	e7a8      	b.n	8005906 <_printf_i+0x152>
 80059b4:	4632      	mov	r2, r6
 80059b6:	4649      	mov	r1, r9
 80059b8:	4640      	mov	r0, r8
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	47d0      	blx	sl
 80059be:	3001      	adds	r0, #1
 80059c0:	d0ab      	beq.n	800591a <_printf_i+0x166>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	079b      	lsls	r3, r3, #30
 80059c6:	d413      	bmi.n	80059f0 <_printf_i+0x23c>
 80059c8:	68e0      	ldr	r0, [r4, #12]
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	4298      	cmp	r0, r3
 80059ce:	bfb8      	it	lt
 80059d0:	4618      	movlt	r0, r3
 80059d2:	e7a4      	b.n	800591e <_printf_i+0x16a>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4632      	mov	r2, r6
 80059d8:	4649      	mov	r1, r9
 80059da:	4640      	mov	r0, r8
 80059dc:	47d0      	blx	sl
 80059de:	3001      	adds	r0, #1
 80059e0:	d09b      	beq.n	800591a <_printf_i+0x166>
 80059e2:	3501      	adds	r5, #1
 80059e4:	68e3      	ldr	r3, [r4, #12]
 80059e6:	9903      	ldr	r1, [sp, #12]
 80059e8:	1a5b      	subs	r3, r3, r1
 80059ea:	42ab      	cmp	r3, r5
 80059ec:	dcf2      	bgt.n	80059d4 <_printf_i+0x220>
 80059ee:	e7eb      	b.n	80059c8 <_printf_i+0x214>
 80059f0:	2500      	movs	r5, #0
 80059f2:	f104 0619 	add.w	r6, r4, #25
 80059f6:	e7f5      	b.n	80059e4 <_printf_i+0x230>
 80059f8:	0800a358 	.word	0x0800a358
 80059fc:	0800a369 	.word	0x0800a369

08005a00 <_scanf_float>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	b087      	sub	sp, #28
 8005a06:	9303      	str	r3, [sp, #12]
 8005a08:	688b      	ldr	r3, [r1, #8]
 8005a0a:	4617      	mov	r7, r2
 8005a0c:	1e5a      	subs	r2, r3, #1
 8005a0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a12:	bf85      	ittet	hi
 8005a14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a18:	195b      	addhi	r3, r3, r5
 8005a1a:	2300      	movls	r3, #0
 8005a1c:	9302      	strhi	r3, [sp, #8]
 8005a1e:	bf88      	it	hi
 8005a20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a24:	468b      	mov	fp, r1
 8005a26:	f04f 0500 	mov.w	r5, #0
 8005a2a:	bf8c      	ite	hi
 8005a2c:	608b      	strhi	r3, [r1, #8]
 8005a2e:	9302      	strls	r3, [sp, #8]
 8005a30:	680b      	ldr	r3, [r1, #0]
 8005a32:	4680      	mov	r8, r0
 8005a34:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a38:	f84b 3b1c 	str.w	r3, [fp], #28
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	465e      	mov	r6, fp
 8005a40:	46aa      	mov	sl, r5
 8005a42:	46a9      	mov	r9, r5
 8005a44:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a48:	9501      	str	r5, [sp, #4]
 8005a4a:	68a2      	ldr	r2, [r4, #8]
 8005a4c:	b152      	cbz	r2, 8005a64 <_scanf_float+0x64>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b4e      	cmp	r3, #78	; 0x4e
 8005a54:	d864      	bhi.n	8005b20 <_scanf_float+0x120>
 8005a56:	2b40      	cmp	r3, #64	; 0x40
 8005a58:	d83c      	bhi.n	8005ad4 <_scanf_float+0xd4>
 8005a5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005a5e:	b2c8      	uxtb	r0, r1
 8005a60:	280e      	cmp	r0, #14
 8005a62:	d93a      	bls.n	8005ada <_scanf_float+0xda>
 8005a64:	f1b9 0f00 	cmp.w	r9, #0
 8005a68:	d003      	beq.n	8005a72 <_scanf_float+0x72>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a76:	f1ba 0f01 	cmp.w	sl, #1
 8005a7a:	f200 8113 	bhi.w	8005ca4 <_scanf_float+0x2a4>
 8005a7e:	455e      	cmp	r6, fp
 8005a80:	f200 8105 	bhi.w	8005c8e <_scanf_float+0x28e>
 8005a84:	2501      	movs	r5, #1
 8005a86:	4628      	mov	r0, r5
 8005a88:	b007      	add	sp, #28
 8005a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005a92:	2a0d      	cmp	r2, #13
 8005a94:	d8e6      	bhi.n	8005a64 <_scanf_float+0x64>
 8005a96:	a101      	add	r1, pc, #4	; (adr r1, 8005a9c <_scanf_float+0x9c>)
 8005a98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a9c:	08005bdb 	.word	0x08005bdb
 8005aa0:	08005a65 	.word	0x08005a65
 8005aa4:	08005a65 	.word	0x08005a65
 8005aa8:	08005a65 	.word	0x08005a65
 8005aac:	08005c3b 	.word	0x08005c3b
 8005ab0:	08005c13 	.word	0x08005c13
 8005ab4:	08005a65 	.word	0x08005a65
 8005ab8:	08005a65 	.word	0x08005a65
 8005abc:	08005be9 	.word	0x08005be9
 8005ac0:	08005a65 	.word	0x08005a65
 8005ac4:	08005a65 	.word	0x08005a65
 8005ac8:	08005a65 	.word	0x08005a65
 8005acc:	08005a65 	.word	0x08005a65
 8005ad0:	08005ba1 	.word	0x08005ba1
 8005ad4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005ad8:	e7db      	b.n	8005a92 <_scanf_float+0x92>
 8005ada:	290e      	cmp	r1, #14
 8005adc:	d8c2      	bhi.n	8005a64 <_scanf_float+0x64>
 8005ade:	a001      	add	r0, pc, #4	; (adr r0, 8005ae4 <_scanf_float+0xe4>)
 8005ae0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ae4:	08005b93 	.word	0x08005b93
 8005ae8:	08005a65 	.word	0x08005a65
 8005aec:	08005b93 	.word	0x08005b93
 8005af0:	08005c27 	.word	0x08005c27
 8005af4:	08005a65 	.word	0x08005a65
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b7d 	.word	0x08005b7d
 8005b00:	08005b7d 	.word	0x08005b7d
 8005b04:	08005b7d 	.word	0x08005b7d
 8005b08:	08005b7d 	.word	0x08005b7d
 8005b0c:	08005b7d 	.word	0x08005b7d
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005b7d 	.word	0x08005b7d
 8005b1c:	08005b7d 	.word	0x08005b7d
 8005b20:	2b6e      	cmp	r3, #110	; 0x6e
 8005b22:	d809      	bhi.n	8005b38 <_scanf_float+0x138>
 8005b24:	2b60      	cmp	r3, #96	; 0x60
 8005b26:	d8b2      	bhi.n	8005a8e <_scanf_float+0x8e>
 8005b28:	2b54      	cmp	r3, #84	; 0x54
 8005b2a:	d077      	beq.n	8005c1c <_scanf_float+0x21c>
 8005b2c:	2b59      	cmp	r3, #89	; 0x59
 8005b2e:	d199      	bne.n	8005a64 <_scanf_float+0x64>
 8005b30:	2d07      	cmp	r5, #7
 8005b32:	d197      	bne.n	8005a64 <_scanf_float+0x64>
 8005b34:	2508      	movs	r5, #8
 8005b36:	e029      	b.n	8005b8c <_scanf_float+0x18c>
 8005b38:	2b74      	cmp	r3, #116	; 0x74
 8005b3a:	d06f      	beq.n	8005c1c <_scanf_float+0x21c>
 8005b3c:	2b79      	cmp	r3, #121	; 0x79
 8005b3e:	e7f6      	b.n	8005b2e <_scanf_float+0x12e>
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	05c8      	lsls	r0, r1, #23
 8005b44:	d51a      	bpl.n	8005b7c <_scanf_float+0x17c>
 8005b46:	9b02      	ldr	r3, [sp, #8]
 8005b48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b4c:	6021      	str	r1, [r4, #0]
 8005b4e:	f109 0901 	add.w	r9, r9, #1
 8005b52:	b11b      	cbz	r3, 8005b5c <_scanf_float+0x15c>
 8005b54:	3b01      	subs	r3, #1
 8005b56:	3201      	adds	r2, #1
 8005b58:	9302      	str	r3, [sp, #8]
 8005b5a:	60a2      	str	r2, [r4, #8]
 8005b5c:	68a3      	ldr	r3, [r4, #8]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	60a3      	str	r3, [r4, #8]
 8005b62:	6923      	ldr	r3, [r4, #16]
 8005b64:	3301      	adds	r3, #1
 8005b66:	6123      	str	r3, [r4, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	f340 8084 	ble.w	8005c7c <_scanf_float+0x27c>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	e766      	b.n	8005a4a <_scanf_float+0x4a>
 8005b7c:	eb1a 0f05 	cmn.w	sl, r5
 8005b80:	f47f af70 	bne.w	8005a64 <_scanf_float+0x64>
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005b8a:	6022      	str	r2, [r4, #0]
 8005b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8005b90:	e7e4      	b.n	8005b5c <_scanf_float+0x15c>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	0610      	lsls	r0, r2, #24
 8005b96:	f57f af65 	bpl.w	8005a64 <_scanf_float+0x64>
 8005b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b9e:	e7f4      	b.n	8005b8a <_scanf_float+0x18a>
 8005ba0:	f1ba 0f00 	cmp.w	sl, #0
 8005ba4:	d10e      	bne.n	8005bc4 <_scanf_float+0x1c4>
 8005ba6:	f1b9 0f00 	cmp.w	r9, #0
 8005baa:	d10e      	bne.n	8005bca <_scanf_float+0x1ca>
 8005bac:	6822      	ldr	r2, [r4, #0]
 8005bae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bb2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005bb6:	d108      	bne.n	8005bca <_scanf_float+0x1ca>
 8005bb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bbc:	f04f 0a01 	mov.w	sl, #1
 8005bc0:	6022      	str	r2, [r4, #0]
 8005bc2:	e7e3      	b.n	8005b8c <_scanf_float+0x18c>
 8005bc4:	f1ba 0f02 	cmp.w	sl, #2
 8005bc8:	d055      	beq.n	8005c76 <_scanf_float+0x276>
 8005bca:	2d01      	cmp	r5, #1
 8005bcc:	d002      	beq.n	8005bd4 <_scanf_float+0x1d4>
 8005bce:	2d04      	cmp	r5, #4
 8005bd0:	f47f af48 	bne.w	8005a64 <_scanf_float+0x64>
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	b2ed      	uxtb	r5, r5
 8005bd8:	e7d8      	b.n	8005b8c <_scanf_float+0x18c>
 8005bda:	f1ba 0f01 	cmp.w	sl, #1
 8005bde:	f47f af41 	bne.w	8005a64 <_scanf_float+0x64>
 8005be2:	f04f 0a02 	mov.w	sl, #2
 8005be6:	e7d1      	b.n	8005b8c <_scanf_float+0x18c>
 8005be8:	b97d      	cbnz	r5, 8005c0a <_scanf_float+0x20a>
 8005bea:	f1b9 0f00 	cmp.w	r9, #0
 8005bee:	f47f af3c 	bne.w	8005a6a <_scanf_float+0x6a>
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bf8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005bfc:	f47f af39 	bne.w	8005a72 <_scanf_float+0x72>
 8005c00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c04:	2501      	movs	r5, #1
 8005c06:	6022      	str	r2, [r4, #0]
 8005c08:	e7c0      	b.n	8005b8c <_scanf_float+0x18c>
 8005c0a:	2d03      	cmp	r5, #3
 8005c0c:	d0e2      	beq.n	8005bd4 <_scanf_float+0x1d4>
 8005c0e:	2d05      	cmp	r5, #5
 8005c10:	e7de      	b.n	8005bd0 <_scanf_float+0x1d0>
 8005c12:	2d02      	cmp	r5, #2
 8005c14:	f47f af26 	bne.w	8005a64 <_scanf_float+0x64>
 8005c18:	2503      	movs	r5, #3
 8005c1a:	e7b7      	b.n	8005b8c <_scanf_float+0x18c>
 8005c1c:	2d06      	cmp	r5, #6
 8005c1e:	f47f af21 	bne.w	8005a64 <_scanf_float+0x64>
 8005c22:	2507      	movs	r5, #7
 8005c24:	e7b2      	b.n	8005b8c <_scanf_float+0x18c>
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	0591      	lsls	r1, r2, #22
 8005c2a:	f57f af1b 	bpl.w	8005a64 <_scanf_float+0x64>
 8005c2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c32:	6022      	str	r2, [r4, #0]
 8005c34:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c38:	e7a8      	b.n	8005b8c <_scanf_float+0x18c>
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005c40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c44:	d006      	beq.n	8005c54 <_scanf_float+0x254>
 8005c46:	0550      	lsls	r0, r2, #21
 8005c48:	f57f af0c 	bpl.w	8005a64 <_scanf_float+0x64>
 8005c4c:	f1b9 0f00 	cmp.w	r9, #0
 8005c50:	f43f af0f 	beq.w	8005a72 <_scanf_float+0x72>
 8005c54:	0591      	lsls	r1, r2, #22
 8005c56:	bf58      	it	pl
 8005c58:	9901      	ldrpl	r1, [sp, #4]
 8005c5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c5e:	bf58      	it	pl
 8005c60:	eba9 0101 	subpl.w	r1, r9, r1
 8005c64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005c68:	f04f 0900 	mov.w	r9, #0
 8005c6c:	bf58      	it	pl
 8005c6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	e78a      	b.n	8005b8c <_scanf_float+0x18c>
 8005c76:	f04f 0a03 	mov.w	sl, #3
 8005c7a:	e787      	b.n	8005b8c <_scanf_float+0x18c>
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c84:	4798      	blx	r3
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f43f aedf 	beq.w	8005a4a <_scanf_float+0x4a>
 8005c8c:	e6ea      	b.n	8005a64 <_scanf_float+0x64>
 8005c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c92:	463a      	mov	r2, r7
 8005c94:	4640      	mov	r0, r8
 8005c96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c9a:	4798      	blx	r3
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	6123      	str	r3, [r4, #16]
 8005ca2:	e6ec      	b.n	8005a7e <_scanf_float+0x7e>
 8005ca4:	1e6b      	subs	r3, r5, #1
 8005ca6:	2b06      	cmp	r3, #6
 8005ca8:	d825      	bhi.n	8005cf6 <_scanf_float+0x2f6>
 8005caa:	2d02      	cmp	r5, #2
 8005cac:	d836      	bhi.n	8005d1c <_scanf_float+0x31c>
 8005cae:	455e      	cmp	r6, fp
 8005cb0:	f67f aee8 	bls.w	8005a84 <_scanf_float+0x84>
 8005cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cb8:	463a      	mov	r2, r7
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cc0:	4798      	blx	r3
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	e7f1      	b.n	8005cae <_scanf_float+0x2ae>
 8005cca:	9802      	ldr	r0, [sp, #8]
 8005ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cd0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	9002      	str	r0, [sp, #8]
 8005cd8:	4640      	mov	r0, r8
 8005cda:	4798      	blx	r3
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ce6:	fa5f fa8a 	uxtb.w	sl, sl
 8005cea:	f1ba 0f02 	cmp.w	sl, #2
 8005cee:	d1ec      	bne.n	8005cca <_scanf_float+0x2ca>
 8005cf0:	3d03      	subs	r5, #3
 8005cf2:	b2ed      	uxtb	r5, r5
 8005cf4:	1b76      	subs	r6, r6, r5
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	05da      	lsls	r2, r3, #23
 8005cfa:	d52f      	bpl.n	8005d5c <_scanf_float+0x35c>
 8005cfc:	055b      	lsls	r3, r3, #21
 8005cfe:	d510      	bpl.n	8005d22 <_scanf_float+0x322>
 8005d00:	455e      	cmp	r6, fp
 8005d02:	f67f aebf 	bls.w	8005a84 <_scanf_float+0x84>
 8005d06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d12:	4798      	blx	r3
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	e7f1      	b.n	8005d00 <_scanf_float+0x300>
 8005d1c:	46aa      	mov	sl, r5
 8005d1e:	9602      	str	r6, [sp, #8]
 8005d20:	e7df      	b.n	8005ce2 <_scanf_float+0x2e2>
 8005d22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	2965      	cmp	r1, #101	; 0x65
 8005d2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	d00c      	beq.n	8005d50 <_scanf_float+0x350>
 8005d36:	2945      	cmp	r1, #69	; 0x45
 8005d38:	d00a      	beq.n	8005d50 <_scanf_float+0x350>
 8005d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d3e:	463a      	mov	r2, r7
 8005d40:	4640      	mov	r0, r8
 8005d42:	4798      	blx	r3
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	1eb5      	subs	r5, r6, #2
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	463a      	mov	r2, r7
 8005d52:	4640      	mov	r0, r8
 8005d54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d58:	4798      	blx	r3
 8005d5a:	462e      	mov	r6, r5
 8005d5c:	6825      	ldr	r5, [r4, #0]
 8005d5e:	f015 0510 	ands.w	r5, r5, #16
 8005d62:	d159      	bne.n	8005e18 <_scanf_float+0x418>
 8005d64:	7035      	strb	r5, [r6, #0]
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d70:	d11c      	bne.n	8005dac <_scanf_float+0x3ac>
 8005d72:	9b01      	ldr	r3, [sp, #4]
 8005d74:	454b      	cmp	r3, r9
 8005d76:	eba3 0209 	sub.w	r2, r3, r9
 8005d7a:	d124      	bne.n	8005dc6 <_scanf_float+0x3c6>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4659      	mov	r1, fp
 8005d80:	4640      	mov	r0, r8
 8005d82:	f000 ff99 	bl	8006cb8 <_strtod_r>
 8005d86:	f8d4 c000 	ldr.w	ip, [r4]
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	f01c 0f02 	tst.w	ip, #2
 8005d90:	4606      	mov	r6, r0
 8005d92:	460f      	mov	r7, r1
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	d021      	beq.n	8005ddc <_scanf_float+0x3dc>
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	600a      	str	r2, [r1, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	e9c3 6700 	strd	r6, r7, [r3]
 8005da4:	68e3      	ldr	r3, [r4, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60e3      	str	r3, [r4, #12]
 8005daa:	e66c      	b.n	8005a86 <_scanf_float+0x86>
 8005dac:	9b04      	ldr	r3, [sp, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0e4      	beq.n	8005d7c <_scanf_float+0x37c>
 8005db2:	9905      	ldr	r1, [sp, #20]
 8005db4:	230a      	movs	r3, #10
 8005db6:	462a      	mov	r2, r5
 8005db8:	4640      	mov	r0, r8
 8005dba:	3101      	adds	r1, #1
 8005dbc:	f001 f808 	bl	8006dd0 <_strtol_r>
 8005dc0:	9b04      	ldr	r3, [sp, #16]
 8005dc2:	9e05      	ldr	r6, [sp, #20]
 8005dc4:	1ac2      	subs	r2, r0, r3
 8005dc6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005dca:	429e      	cmp	r6, r3
 8005dcc:	bf28      	it	cs
 8005dce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4911      	ldr	r1, [pc, #68]	; (8005e1c <_scanf_float+0x41c>)
 8005dd6:	f000 f8b7 	bl	8005f48 <siprintf>
 8005dda:	e7cf      	b.n	8005d7c <_scanf_float+0x37c>
 8005ddc:	f01c 0f04 	tst.w	ip, #4
 8005de0:	f103 0e04 	add.w	lr, r3, #4
 8005de4:	d003      	beq.n	8005dee <_scanf_float+0x3ee>
 8005de6:	9903      	ldr	r1, [sp, #12]
 8005de8:	f8c1 e000 	str.w	lr, [r1]
 8005dec:	e7d7      	b.n	8005d9e <_scanf_float+0x39e>
 8005dee:	9a03      	ldr	r2, [sp, #12]
 8005df0:	f8c2 e000 	str.w	lr, [r2]
 8005df4:	f8d3 8000 	ldr.w	r8, [r3]
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	f7fa fe72 	bl	8000ae4 <__aeabi_dcmpun>
 8005e00:	b128      	cbz	r0, 8005e0e <_scanf_float+0x40e>
 8005e02:	4807      	ldr	r0, [pc, #28]	; (8005e20 <_scanf_float+0x420>)
 8005e04:	f000 f89c 	bl	8005f40 <nanf>
 8005e08:	f8c8 0000 	str.w	r0, [r8]
 8005e0c:	e7ca      	b.n	8005da4 <_scanf_float+0x3a4>
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa fec5 	bl	8000ba0 <__aeabi_d2f>
 8005e16:	e7f7      	b.n	8005e08 <_scanf_float+0x408>
 8005e18:	2500      	movs	r5, #0
 8005e1a:	e634      	b.n	8005a86 <_scanf_float+0x86>
 8005e1c:	0800a37a 	.word	0x0800a37a
 8005e20:	0800a70b 	.word	0x0800a70b

08005e24 <_puts_r>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	460e      	mov	r6, r1
 8005e28:	4605      	mov	r5, r0
 8005e2a:	b118      	cbz	r0, 8005e34 <_puts_r+0x10>
 8005e2c:	6983      	ldr	r3, [r0, #24]
 8005e2e:	b90b      	cbnz	r3, 8005e34 <_puts_r+0x10>
 8005e30:	f002 f84a 	bl	8007ec8 <__sinit>
 8005e34:	69ab      	ldr	r3, [r5, #24]
 8005e36:	68ac      	ldr	r4, [r5, #8]
 8005e38:	b913      	cbnz	r3, 8005e40 <_puts_r+0x1c>
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f002 f844 	bl	8007ec8 <__sinit>
 8005e40:	4b2c      	ldr	r3, [pc, #176]	; (8005ef4 <_puts_r+0xd0>)
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d120      	bne.n	8005e88 <_puts_r+0x64>
 8005e46:	686c      	ldr	r4, [r5, #4]
 8005e48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e4a:	07db      	lsls	r3, r3, #31
 8005e4c:	d405      	bmi.n	8005e5a <_puts_r+0x36>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	0598      	lsls	r0, r3, #22
 8005e52:	d402      	bmi.n	8005e5a <_puts_r+0x36>
 8005e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e56:	f002 fc40 	bl	80086da <__retarget_lock_acquire_recursive>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	0719      	lsls	r1, r3, #28
 8005e5e:	d51d      	bpl.n	8005e9c <_puts_r+0x78>
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	b1db      	cbz	r3, 8005e9c <_puts_r+0x78>
 8005e64:	3e01      	subs	r6, #1
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	60a3      	str	r3, [r4, #8]
 8005e70:	bb39      	cbnz	r1, 8005ec2 <_puts_r+0x9e>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da38      	bge.n	8005ee8 <_puts_r+0xc4>
 8005e76:	4622      	mov	r2, r4
 8005e78:	210a      	movs	r1, #10
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 ffaa 	bl	8006dd4 <__swbuf_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d011      	beq.n	8005ea8 <_puts_r+0x84>
 8005e84:	250a      	movs	r5, #10
 8005e86:	e011      	b.n	8005eac <_puts_r+0x88>
 8005e88:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <_puts_r+0xd4>)
 8005e8a:	429c      	cmp	r4, r3
 8005e8c:	d101      	bne.n	8005e92 <_puts_r+0x6e>
 8005e8e:	68ac      	ldr	r4, [r5, #8]
 8005e90:	e7da      	b.n	8005e48 <_puts_r+0x24>
 8005e92:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <_puts_r+0xd8>)
 8005e94:	429c      	cmp	r4, r3
 8005e96:	bf08      	it	eq
 8005e98:	68ec      	ldreq	r4, [r5, #12]
 8005e9a:	e7d5      	b.n	8005e48 <_puts_r+0x24>
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fffc 	bl	8006e9c <__swsetup_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d0dd      	beq.n	8005e64 <_puts_r+0x40>
 8005ea8:	f04f 35ff 	mov.w	r5, #4294967295
 8005eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eae:	07da      	lsls	r2, r3, #31
 8005eb0:	d405      	bmi.n	8005ebe <_puts_r+0x9a>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	059b      	lsls	r3, r3, #22
 8005eb6:	d402      	bmi.n	8005ebe <_puts_r+0x9a>
 8005eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eba:	f002 fc0f 	bl	80086dc <__retarget_lock_release_recursive>
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	bd70      	pop	{r4, r5, r6, pc}
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da04      	bge.n	8005ed0 <_puts_r+0xac>
 8005ec6:	69a2      	ldr	r2, [r4, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	dc06      	bgt.n	8005eda <_puts_r+0xb6>
 8005ecc:	290a      	cmp	r1, #10
 8005ece:	d004      	beq.n	8005eda <_puts_r+0xb6>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	6022      	str	r2, [r4, #0]
 8005ed6:	7019      	strb	r1, [r3, #0]
 8005ed8:	e7c5      	b.n	8005e66 <_puts_r+0x42>
 8005eda:	4622      	mov	r2, r4
 8005edc:	4628      	mov	r0, r5
 8005ede:	f000 ff79 	bl	8006dd4 <__swbuf_r>
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d1bf      	bne.n	8005e66 <_puts_r+0x42>
 8005ee6:	e7df      	b.n	8005ea8 <_puts_r+0x84>
 8005ee8:	250a      	movs	r5, #10
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	6022      	str	r2, [r4, #0]
 8005ef0:	701d      	strb	r5, [r3, #0]
 8005ef2:	e7db      	b.n	8005eac <_puts_r+0x88>
 8005ef4:	0800a484 	.word	0x0800a484
 8005ef8:	0800a4a4 	.word	0x0800a4a4
 8005efc:	0800a464 	.word	0x0800a464

08005f00 <puts>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <puts+0xc>)
 8005f02:	4601      	mov	r1, r0
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f7ff bf8d 	b.w	8005e24 <_puts_r>
 8005f0a:	bf00      	nop
 8005f0c:	20000048 	.word	0x20000048

08005f10 <realloc>:
 8005f10:	4b02      	ldr	r3, [pc, #8]	; (8005f1c <realloc+0xc>)
 8005f12:	460a      	mov	r2, r1
 8005f14:	4601      	mov	r1, r0
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	f003 b94a 	b.w	80091b0 <_realloc_r>
 8005f1c:	20000048 	.word	0x20000048

08005f20 <_sbrk_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	2300      	movs	r3, #0
 8005f24:	4d05      	ldr	r5, [pc, #20]	; (8005f3c <_sbrk_r+0x1c>)
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fc fbaa 	bl	8002684 <_sbrk>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_sbrk_r+0x1a>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_sbrk_r+0x1a>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	2000087c 	.word	0x2000087c

08005f40 <nanf>:
 8005f40:	4800      	ldr	r0, [pc, #0]	; (8005f44 <nanf+0x4>)
 8005f42:	4770      	bx	lr
 8005f44:	7fc00000 	.word	0x7fc00000

08005f48 <siprintf>:
 8005f48:	b40e      	push	{r1, r2, r3}
 8005f4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f4e:	b500      	push	{lr}
 8005f50:	b09c      	sub	sp, #112	; 0x70
 8005f52:	ab1d      	add	r3, sp, #116	; 0x74
 8005f54:	9002      	str	r0, [sp, #8]
 8005f56:	9006      	str	r0, [sp, #24]
 8005f58:	9107      	str	r1, [sp, #28]
 8005f5a:	9104      	str	r1, [sp, #16]
 8005f5c:	4808      	ldr	r0, [pc, #32]	; (8005f80 <siprintf+0x38>)
 8005f5e:	4909      	ldr	r1, [pc, #36]	; (8005f84 <siprintf+0x3c>)
 8005f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f64:	9105      	str	r1, [sp, #20]
 8005f66:	6800      	ldr	r0, [r0, #0]
 8005f68:	a902      	add	r1, sp, #8
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	f003 f9a2 	bl	80092b4 <_svfiprintf_r>
 8005f70:	2200      	movs	r2, #0
 8005f72:	9b02      	ldr	r3, [sp, #8]
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	b01c      	add	sp, #112	; 0x70
 8005f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f7c:	b003      	add	sp, #12
 8005f7e:	4770      	bx	lr
 8005f80:	20000048 	.word	0x20000048
 8005f84:	ffff0208 	.word	0xffff0208

08005f88 <siscanf>:
 8005f88:	b40e      	push	{r1, r2, r3}
 8005f8a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005f8e:	b530      	push	{r4, r5, lr}
 8005f90:	b09c      	sub	sp, #112	; 0x70
 8005f92:	ac1f      	add	r4, sp, #124	; 0x7c
 8005f94:	f854 5b04 	ldr.w	r5, [r4], #4
 8005f98:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005f9c:	9002      	str	r0, [sp, #8]
 8005f9e:	9006      	str	r0, [sp, #24]
 8005fa0:	f7fa f942 	bl	8000228 <strlen>
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <siscanf+0x4c>)
 8005fa6:	9003      	str	r0, [sp, #12]
 8005fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005faa:	2300      	movs	r3, #0
 8005fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fae:	9314      	str	r3, [sp, #80]	; 0x50
 8005fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fb4:	9007      	str	r0, [sp, #28]
 8005fb6:	4808      	ldr	r0, [pc, #32]	; (8005fd8 <siscanf+0x50>)
 8005fb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fbc:	462a      	mov	r2, r5
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	a902      	add	r1, sp, #8
 8005fc2:	6800      	ldr	r0, [r0, #0]
 8005fc4:	9401      	str	r4, [sp, #4]
 8005fc6:	f003 facf 	bl	8009568 <__ssvfiscanf_r>
 8005fca:	b01c      	add	sp, #112	; 0x70
 8005fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fd0:	b003      	add	sp, #12
 8005fd2:	4770      	bx	lr
 8005fd4:	08005fff 	.word	0x08005fff
 8005fd8:	20000048 	.word	0x20000048

08005fdc <__sread>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	460c      	mov	r4, r1
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f003 fd84 	bl	8009af0 <_read_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	bfab      	itete	ge
 8005fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fee:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff0:	181b      	addge	r3, r3, r0
 8005ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ff6:	bfac      	ite	ge
 8005ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ffa:	81a3      	strhlt	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__seofread>:
 8005ffe:	2000      	movs	r0, #0
 8006000:	4770      	bx	lr

08006002 <__swrite>:
 8006002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006006:	461f      	mov	r7, r3
 8006008:	898b      	ldrh	r3, [r1, #12]
 800600a:	4605      	mov	r5, r0
 800600c:	05db      	lsls	r3, r3, #23
 800600e:	460c      	mov	r4, r1
 8006010:	4616      	mov	r6, r2
 8006012:	d505      	bpl.n	8006020 <__swrite+0x1e>
 8006014:	2302      	movs	r3, #2
 8006016:	2200      	movs	r2, #0
 8006018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601c:	f002 fb60 	bl	80086e0 <_lseek_r>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	4632      	mov	r2, r6
 8006024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006028:	81a3      	strh	r3, [r4, #12]
 800602a:	4628      	mov	r0, r5
 800602c:	463b      	mov	r3, r7
 800602e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006036:	f000 bf1f 	b.w	8006e78 <_write_r>

0800603a <__sseek>:
 800603a:	b510      	push	{r4, lr}
 800603c:	460c      	mov	r4, r1
 800603e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006042:	f002 fb4d 	bl	80086e0 <_lseek_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	bf15      	itete	ne
 800604c:	6560      	strne	r0, [r4, #84]	; 0x54
 800604e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006056:	81a3      	strheq	r3, [r4, #12]
 8006058:	bf18      	it	ne
 800605a:	81a3      	strhne	r3, [r4, #12]
 800605c:	bd10      	pop	{r4, pc}

0800605e <__sclose>:
 800605e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006062:	f000 bf89 	b.w	8006f78 <_close_r>

08006066 <strncmp>:
 8006066:	b510      	push	{r4, lr}
 8006068:	b16a      	cbz	r2, 8006086 <strncmp+0x20>
 800606a:	3901      	subs	r1, #1
 800606c:	1884      	adds	r4, r0, r2
 800606e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006072:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006076:	4293      	cmp	r3, r2
 8006078:	d103      	bne.n	8006082 <strncmp+0x1c>
 800607a:	42a0      	cmp	r0, r4
 800607c:	d001      	beq.n	8006082 <strncmp+0x1c>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f5      	bne.n	800606e <strncmp+0x8>
 8006082:	1a98      	subs	r0, r3, r2
 8006084:	bd10      	pop	{r4, pc}
 8006086:	4610      	mov	r0, r2
 8006088:	e7fc      	b.n	8006084 <strncmp+0x1e>

0800608a <sulp>:
 800608a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	460f      	mov	r7, r1
 8006090:	4690      	mov	r8, r2
 8006092:	f002 ff37 	bl	8008f04 <__ulp>
 8006096:	4604      	mov	r4, r0
 8006098:	460d      	mov	r5, r1
 800609a:	f1b8 0f00 	cmp.w	r8, #0
 800609e:	d011      	beq.n	80060c4 <sulp+0x3a>
 80060a0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80060a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dd0b      	ble.n	80060c4 <sulp+0x3a>
 80060ac:	2400      	movs	r4, #0
 80060ae:	051b      	lsls	r3, r3, #20
 80060b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80060b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80060b8:	4622      	mov	r2, r4
 80060ba:	462b      	mov	r3, r5
 80060bc:	f7fa fa78 	bl	80005b0 <__aeabi_dmul>
 80060c0:	4604      	mov	r4, r0
 80060c2:	460d      	mov	r5, r1
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060cc:	0000      	movs	r0, r0
	...

080060d0 <_strtod_l>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	469b      	mov	fp, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	b0a1      	sub	sp, #132	; 0x84
 80060da:	931c      	str	r3, [sp, #112]	; 0x70
 80060dc:	4ba1      	ldr	r3, [pc, #644]	; (8006364 <_strtod_l+0x294>)
 80060de:	4682      	mov	sl, r0
 80060e0:	681f      	ldr	r7, [r3, #0]
 80060e2:	460e      	mov	r6, r1
 80060e4:	4638      	mov	r0, r7
 80060e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80060e8:	f7fa f89e 	bl	8000228 <strlen>
 80060ec:	f04f 0800 	mov.w	r8, #0
 80060f0:	4604      	mov	r4, r0
 80060f2:	f04f 0900 	mov.w	r9, #0
 80060f6:	961b      	str	r6, [sp, #108]	; 0x6c
 80060f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060fa:	781a      	ldrb	r2, [r3, #0]
 80060fc:	2a2b      	cmp	r2, #43	; 0x2b
 80060fe:	d04c      	beq.n	800619a <_strtod_l+0xca>
 8006100:	d83a      	bhi.n	8006178 <_strtod_l+0xa8>
 8006102:	2a0d      	cmp	r2, #13
 8006104:	d833      	bhi.n	800616e <_strtod_l+0x9e>
 8006106:	2a08      	cmp	r2, #8
 8006108:	d833      	bhi.n	8006172 <_strtod_l+0xa2>
 800610a:	2a00      	cmp	r2, #0
 800610c:	d03d      	beq.n	800618a <_strtod_l+0xba>
 800610e:	2300      	movs	r3, #0
 8006110:	930c      	str	r3, [sp, #48]	; 0x30
 8006112:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006114:	782b      	ldrb	r3, [r5, #0]
 8006116:	2b30      	cmp	r3, #48	; 0x30
 8006118:	f040 80af 	bne.w	800627a <_strtod_l+0x1aa>
 800611c:	786b      	ldrb	r3, [r5, #1]
 800611e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006122:	2b58      	cmp	r3, #88	; 0x58
 8006124:	d16c      	bne.n	8006200 <_strtod_l+0x130>
 8006126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006128:	4650      	mov	r0, sl
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	ab1c      	add	r3, sp, #112	; 0x70
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4a8d      	ldr	r2, [pc, #564]	; (8006368 <_strtod_l+0x298>)
 8006132:	f8cd b008 	str.w	fp, [sp, #8]
 8006136:	ab1d      	add	r3, sp, #116	; 0x74
 8006138:	a91b      	add	r1, sp, #108	; 0x6c
 800613a:	f001 ffcb 	bl	80080d4 <__gethex>
 800613e:	f010 0607 	ands.w	r6, r0, #7
 8006142:	4604      	mov	r4, r0
 8006144:	d005      	beq.n	8006152 <_strtod_l+0x82>
 8006146:	2e06      	cmp	r6, #6
 8006148:	d129      	bne.n	800619e <_strtod_l+0xce>
 800614a:	2300      	movs	r3, #0
 800614c:	3501      	adds	r5, #1
 800614e:	951b      	str	r5, [sp, #108]	; 0x6c
 8006150:	930c      	str	r3, [sp, #48]	; 0x30
 8006152:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 8596 	bne.w	8006c86 <_strtod_l+0xbb6>
 800615a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800615c:	b1d3      	cbz	r3, 8006194 <_strtod_l+0xc4>
 800615e:	4642      	mov	r2, r8
 8006160:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006164:	4610      	mov	r0, r2
 8006166:	4619      	mov	r1, r3
 8006168:	b021      	add	sp, #132	; 0x84
 800616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616e:	2a20      	cmp	r2, #32
 8006170:	d1cd      	bne.n	800610e <_strtod_l+0x3e>
 8006172:	3301      	adds	r3, #1
 8006174:	931b      	str	r3, [sp, #108]	; 0x6c
 8006176:	e7bf      	b.n	80060f8 <_strtod_l+0x28>
 8006178:	2a2d      	cmp	r2, #45	; 0x2d
 800617a:	d1c8      	bne.n	800610e <_strtod_l+0x3e>
 800617c:	2201      	movs	r2, #1
 800617e:	920c      	str	r2, [sp, #48]	; 0x30
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	921b      	str	r2, [sp, #108]	; 0x6c
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1c3      	bne.n	8006112 <_strtod_l+0x42>
 800618a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800618c:	961b      	str	r6, [sp, #108]	; 0x6c
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 8577 	bne.w	8006c82 <_strtod_l+0xbb2>
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	e7e4      	b.n	8006164 <_strtod_l+0x94>
 800619a:	2200      	movs	r2, #0
 800619c:	e7ef      	b.n	800617e <_strtod_l+0xae>
 800619e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80061a0:	b13a      	cbz	r2, 80061b2 <_strtod_l+0xe2>
 80061a2:	2135      	movs	r1, #53	; 0x35
 80061a4:	a81e      	add	r0, sp, #120	; 0x78
 80061a6:	f002 ffb1 	bl	800910c <__copybits>
 80061aa:	4650      	mov	r0, sl
 80061ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061ae:	f002 fb79 	bl	80088a4 <_Bfree>
 80061b2:	3e01      	subs	r6, #1
 80061b4:	2e05      	cmp	r6, #5
 80061b6:	d807      	bhi.n	80061c8 <_strtod_l+0xf8>
 80061b8:	e8df f006 	tbb	[pc, r6]
 80061bc:	1d180b0e 	.word	0x1d180b0e
 80061c0:	030e      	.short	0x030e
 80061c2:	f04f 0900 	mov.w	r9, #0
 80061c6:	46c8      	mov	r8, r9
 80061c8:	0721      	lsls	r1, r4, #28
 80061ca:	d5c2      	bpl.n	8006152 <_strtod_l+0x82>
 80061cc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80061d0:	e7bf      	b.n	8006152 <_strtod_l+0x82>
 80061d2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80061d6:	e7f7      	b.n	80061c8 <_strtod_l+0xf8>
 80061d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80061da:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80061de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80061e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80061e6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80061ea:	e7ed      	b.n	80061c8 <_strtod_l+0xf8>
 80061ec:	f04f 0800 	mov.w	r8, #0
 80061f0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800636c <_strtod_l+0x29c>
 80061f4:	e7e8      	b.n	80061c8 <_strtod_l+0xf8>
 80061f6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80061fa:	f04f 38ff 	mov.w	r8, #4294967295
 80061fe:	e7e3      	b.n	80061c8 <_strtod_l+0xf8>
 8006200:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	921b      	str	r2, [sp, #108]	; 0x6c
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	2b30      	cmp	r3, #48	; 0x30
 800620a:	d0f9      	beq.n	8006200 <_strtod_l+0x130>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0a0      	beq.n	8006152 <_strtod_l+0x82>
 8006210:	2301      	movs	r3, #1
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006216:	220a      	movs	r2, #10
 8006218:	9308      	str	r3, [sp, #32]
 800621a:	2300      	movs	r3, #0
 800621c:	469b      	mov	fp, r3
 800621e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006222:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006224:	7805      	ldrb	r5, [r0, #0]
 8006226:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800622a:	b2d9      	uxtb	r1, r3
 800622c:	2909      	cmp	r1, #9
 800622e:	d926      	bls.n	800627e <_strtod_l+0x1ae>
 8006230:	4622      	mov	r2, r4
 8006232:	4639      	mov	r1, r7
 8006234:	f7ff ff17 	bl	8006066 <strncmp>
 8006238:	2800      	cmp	r0, #0
 800623a:	d032      	beq.n	80062a2 <_strtod_l+0x1d2>
 800623c:	2000      	movs	r0, #0
 800623e:	462b      	mov	r3, r5
 8006240:	465c      	mov	r4, fp
 8006242:	4602      	mov	r2, r0
 8006244:	9004      	str	r0, [sp, #16]
 8006246:	2b65      	cmp	r3, #101	; 0x65
 8006248:	d001      	beq.n	800624e <_strtod_l+0x17e>
 800624a:	2b45      	cmp	r3, #69	; 0x45
 800624c:	d113      	bne.n	8006276 <_strtod_l+0x1a6>
 800624e:	b91c      	cbnz	r4, 8006258 <_strtod_l+0x188>
 8006250:	9b07      	ldr	r3, [sp, #28]
 8006252:	4303      	orrs	r3, r0
 8006254:	d099      	beq.n	800618a <_strtod_l+0xba>
 8006256:	2400      	movs	r4, #0
 8006258:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800625a:	1c73      	adds	r3, r6, #1
 800625c:	931b      	str	r3, [sp, #108]	; 0x6c
 800625e:	7873      	ldrb	r3, [r6, #1]
 8006260:	2b2b      	cmp	r3, #43	; 0x2b
 8006262:	d078      	beq.n	8006356 <_strtod_l+0x286>
 8006264:	2b2d      	cmp	r3, #45	; 0x2d
 8006266:	d07b      	beq.n	8006360 <_strtod_l+0x290>
 8006268:	2700      	movs	r7, #0
 800626a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800626e:	2909      	cmp	r1, #9
 8006270:	f240 8082 	bls.w	8006378 <_strtod_l+0x2a8>
 8006274:	961b      	str	r6, [sp, #108]	; 0x6c
 8006276:	2500      	movs	r5, #0
 8006278:	e09e      	b.n	80063b8 <_strtod_l+0x2e8>
 800627a:	2300      	movs	r3, #0
 800627c:	e7c9      	b.n	8006212 <_strtod_l+0x142>
 800627e:	f1bb 0f08 	cmp.w	fp, #8
 8006282:	bfd5      	itete	le
 8006284:	9906      	ldrle	r1, [sp, #24]
 8006286:	9905      	ldrgt	r1, [sp, #20]
 8006288:	fb02 3301 	mlale	r3, r2, r1, r3
 800628c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006290:	f100 0001 	add.w	r0, r0, #1
 8006294:	bfd4      	ite	le
 8006296:	9306      	strle	r3, [sp, #24]
 8006298:	9305      	strgt	r3, [sp, #20]
 800629a:	f10b 0b01 	add.w	fp, fp, #1
 800629e:	901b      	str	r0, [sp, #108]	; 0x6c
 80062a0:	e7bf      	b.n	8006222 <_strtod_l+0x152>
 80062a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062a4:	191a      	adds	r2, r3, r4
 80062a6:	921b      	str	r2, [sp, #108]	; 0x6c
 80062a8:	5d1b      	ldrb	r3, [r3, r4]
 80062aa:	f1bb 0f00 	cmp.w	fp, #0
 80062ae:	d036      	beq.n	800631e <_strtod_l+0x24e>
 80062b0:	465c      	mov	r4, fp
 80062b2:	9004      	str	r0, [sp, #16]
 80062b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80062b8:	2a09      	cmp	r2, #9
 80062ba:	d912      	bls.n	80062e2 <_strtod_l+0x212>
 80062bc:	2201      	movs	r2, #1
 80062be:	e7c2      	b.n	8006246 <_strtod_l+0x176>
 80062c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062c2:	3001      	adds	r0, #1
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	921b      	str	r2, [sp, #108]	; 0x6c
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b30      	cmp	r3, #48	; 0x30
 80062cc:	d0f8      	beq.n	80062c0 <_strtod_l+0x1f0>
 80062ce:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80062d2:	2a08      	cmp	r2, #8
 80062d4:	f200 84dc 	bhi.w	8006c90 <_strtod_l+0xbc0>
 80062d8:	9004      	str	r0, [sp, #16]
 80062da:	2000      	movs	r0, #0
 80062dc:	4604      	mov	r4, r0
 80062de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80062e0:	9208      	str	r2, [sp, #32]
 80062e2:	3b30      	subs	r3, #48	; 0x30
 80062e4:	f100 0201 	add.w	r2, r0, #1
 80062e8:	d013      	beq.n	8006312 <_strtod_l+0x242>
 80062ea:	9904      	ldr	r1, [sp, #16]
 80062ec:	1905      	adds	r5, r0, r4
 80062ee:	4411      	add	r1, r2
 80062f0:	9104      	str	r1, [sp, #16]
 80062f2:	4622      	mov	r2, r4
 80062f4:	210a      	movs	r1, #10
 80062f6:	42aa      	cmp	r2, r5
 80062f8:	d113      	bne.n	8006322 <_strtod_l+0x252>
 80062fa:	1822      	adds	r2, r4, r0
 80062fc:	2a08      	cmp	r2, #8
 80062fe:	f104 0401 	add.w	r4, r4, #1
 8006302:	4404      	add	r4, r0
 8006304:	dc1b      	bgt.n	800633e <_strtod_l+0x26e>
 8006306:	220a      	movs	r2, #10
 8006308:	9906      	ldr	r1, [sp, #24]
 800630a:	fb02 3301 	mla	r3, r2, r1, r3
 800630e:	9306      	str	r3, [sp, #24]
 8006310:	2200      	movs	r2, #0
 8006312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006314:	4610      	mov	r0, r2
 8006316:	1c59      	adds	r1, r3, #1
 8006318:	911b      	str	r1, [sp, #108]	; 0x6c
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	e7ca      	b.n	80062b4 <_strtod_l+0x1e4>
 800631e:	4658      	mov	r0, fp
 8006320:	e7d3      	b.n	80062ca <_strtod_l+0x1fa>
 8006322:	2a08      	cmp	r2, #8
 8006324:	dc04      	bgt.n	8006330 <_strtod_l+0x260>
 8006326:	9f06      	ldr	r7, [sp, #24]
 8006328:	434f      	muls	r7, r1
 800632a:	9706      	str	r7, [sp, #24]
 800632c:	3201      	adds	r2, #1
 800632e:	e7e2      	b.n	80062f6 <_strtod_l+0x226>
 8006330:	1c57      	adds	r7, r2, #1
 8006332:	2f10      	cmp	r7, #16
 8006334:	bfde      	ittt	le
 8006336:	9f05      	ldrle	r7, [sp, #20]
 8006338:	434f      	mulle	r7, r1
 800633a:	9705      	strle	r7, [sp, #20]
 800633c:	e7f6      	b.n	800632c <_strtod_l+0x25c>
 800633e:	2c10      	cmp	r4, #16
 8006340:	bfdf      	itttt	le
 8006342:	220a      	movle	r2, #10
 8006344:	9905      	ldrle	r1, [sp, #20]
 8006346:	fb02 3301 	mlale	r3, r2, r1, r3
 800634a:	9305      	strle	r3, [sp, #20]
 800634c:	e7e0      	b.n	8006310 <_strtod_l+0x240>
 800634e:	2300      	movs	r3, #0
 8006350:	2201      	movs	r2, #1
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	e77c      	b.n	8006250 <_strtod_l+0x180>
 8006356:	2700      	movs	r7, #0
 8006358:	1cb3      	adds	r3, r6, #2
 800635a:	931b      	str	r3, [sp, #108]	; 0x6c
 800635c:	78b3      	ldrb	r3, [r6, #2]
 800635e:	e784      	b.n	800626a <_strtod_l+0x19a>
 8006360:	2701      	movs	r7, #1
 8006362:	e7f9      	b.n	8006358 <_strtod_l+0x288>
 8006364:	0800a530 	.word	0x0800a530
 8006368:	0800a380 	.word	0x0800a380
 800636c:	7ff00000 	.word	0x7ff00000
 8006370:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	911b      	str	r1, [sp, #108]	; 0x6c
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b30      	cmp	r3, #48	; 0x30
 800637a:	d0f9      	beq.n	8006370 <_strtod_l+0x2a0>
 800637c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006380:	2908      	cmp	r1, #8
 8006382:	f63f af78 	bhi.w	8006276 <_strtod_l+0x1a6>
 8006386:	f04f 0e0a 	mov.w	lr, #10
 800638a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800638e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006390:	9309      	str	r3, [sp, #36]	; 0x24
 8006392:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006394:	1c59      	adds	r1, r3, #1
 8006396:	911b      	str	r1, [sp, #108]	; 0x6c
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800639e:	2d09      	cmp	r5, #9
 80063a0:	d935      	bls.n	800640e <_strtod_l+0x33e>
 80063a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063a4:	1b49      	subs	r1, r1, r5
 80063a6:	2908      	cmp	r1, #8
 80063a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80063ac:	dc02      	bgt.n	80063b4 <_strtod_l+0x2e4>
 80063ae:	4565      	cmp	r5, ip
 80063b0:	bfa8      	it	ge
 80063b2:	4665      	movge	r5, ip
 80063b4:	b107      	cbz	r7, 80063b8 <_strtod_l+0x2e8>
 80063b6:	426d      	negs	r5, r5
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	d14c      	bne.n	8006456 <_strtod_l+0x386>
 80063bc:	9907      	ldr	r1, [sp, #28]
 80063be:	4301      	orrs	r1, r0
 80063c0:	f47f aec7 	bne.w	8006152 <_strtod_l+0x82>
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	f47f aee0 	bne.w	800618a <_strtod_l+0xba>
 80063ca:	2b69      	cmp	r3, #105	; 0x69
 80063cc:	d026      	beq.n	800641c <_strtod_l+0x34c>
 80063ce:	dc23      	bgt.n	8006418 <_strtod_l+0x348>
 80063d0:	2b49      	cmp	r3, #73	; 0x49
 80063d2:	d023      	beq.n	800641c <_strtod_l+0x34c>
 80063d4:	2b4e      	cmp	r3, #78	; 0x4e
 80063d6:	f47f aed8 	bne.w	800618a <_strtod_l+0xba>
 80063da:	499c      	ldr	r1, [pc, #624]	; (800664c <_strtod_l+0x57c>)
 80063dc:	a81b      	add	r0, sp, #108	; 0x6c
 80063de:	f002 f8c7 	bl	8008570 <__match>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f43f aed1 	beq.w	800618a <_strtod_l+0xba>
 80063e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b28      	cmp	r3, #40	; 0x28
 80063ee:	d12c      	bne.n	800644a <_strtod_l+0x37a>
 80063f0:	4997      	ldr	r1, [pc, #604]	; (8006650 <_strtod_l+0x580>)
 80063f2:	aa1e      	add	r2, sp, #120	; 0x78
 80063f4:	a81b      	add	r0, sp, #108	; 0x6c
 80063f6:	f002 f8cf 	bl	8008598 <__hexnan>
 80063fa:	2805      	cmp	r0, #5
 80063fc:	d125      	bne.n	800644a <_strtod_l+0x37a>
 80063fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006400:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006404:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006408:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800640c:	e6a1      	b.n	8006152 <_strtod_l+0x82>
 800640e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8006412:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006416:	e7bc      	b.n	8006392 <_strtod_l+0x2c2>
 8006418:	2b6e      	cmp	r3, #110	; 0x6e
 800641a:	e7dc      	b.n	80063d6 <_strtod_l+0x306>
 800641c:	498d      	ldr	r1, [pc, #564]	; (8006654 <_strtod_l+0x584>)
 800641e:	a81b      	add	r0, sp, #108	; 0x6c
 8006420:	f002 f8a6 	bl	8008570 <__match>
 8006424:	2800      	cmp	r0, #0
 8006426:	f43f aeb0 	beq.w	800618a <_strtod_l+0xba>
 800642a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800642c:	498a      	ldr	r1, [pc, #552]	; (8006658 <_strtod_l+0x588>)
 800642e:	3b01      	subs	r3, #1
 8006430:	a81b      	add	r0, sp, #108	; 0x6c
 8006432:	931b      	str	r3, [sp, #108]	; 0x6c
 8006434:	f002 f89c 	bl	8008570 <__match>
 8006438:	b910      	cbnz	r0, 8006440 <_strtod_l+0x370>
 800643a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800643c:	3301      	adds	r3, #1
 800643e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006440:	f04f 0800 	mov.w	r8, #0
 8006444:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006668 <_strtod_l+0x598>
 8006448:	e683      	b.n	8006152 <_strtod_l+0x82>
 800644a:	4884      	ldr	r0, [pc, #528]	; (800665c <_strtod_l+0x58c>)
 800644c:	f003 fb62 	bl	8009b14 <nan>
 8006450:	4680      	mov	r8, r0
 8006452:	4689      	mov	r9, r1
 8006454:	e67d      	b.n	8006152 <_strtod_l+0x82>
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	f1bb 0f00 	cmp.w	fp, #0
 800645c:	bf08      	it	eq
 800645e:	46a3      	moveq	fp, r4
 8006460:	1aeb      	subs	r3, r5, r3
 8006462:	2c10      	cmp	r4, #16
 8006464:	9806      	ldr	r0, [sp, #24]
 8006466:	4626      	mov	r6, r4
 8006468:	9307      	str	r3, [sp, #28]
 800646a:	bfa8      	it	ge
 800646c:	2610      	movge	r6, #16
 800646e:	f7fa f825 	bl	80004bc <__aeabi_ui2d>
 8006472:	2c09      	cmp	r4, #9
 8006474:	4680      	mov	r8, r0
 8006476:	4689      	mov	r9, r1
 8006478:	dd13      	ble.n	80064a2 <_strtod_l+0x3d2>
 800647a:	4b79      	ldr	r3, [pc, #484]	; (8006660 <_strtod_l+0x590>)
 800647c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006480:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006484:	f7fa f894 	bl	80005b0 <__aeabi_dmul>
 8006488:	4680      	mov	r8, r0
 800648a:	9805      	ldr	r0, [sp, #20]
 800648c:	4689      	mov	r9, r1
 800648e:	f7fa f815 	bl	80004bc <__aeabi_ui2d>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7f9 fed3 	bl	8000244 <__adddf3>
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	2c0f      	cmp	r4, #15
 80064a4:	dc36      	bgt.n	8006514 <_strtod_l+0x444>
 80064a6:	9b07      	ldr	r3, [sp, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f43f ae52 	beq.w	8006152 <_strtod_l+0x82>
 80064ae:	dd22      	ble.n	80064f6 <_strtod_l+0x426>
 80064b0:	2b16      	cmp	r3, #22
 80064b2:	dc09      	bgt.n	80064c8 <_strtod_l+0x3f8>
 80064b4:	4c6a      	ldr	r4, [pc, #424]	; (8006660 <_strtod_l+0x590>)
 80064b6:	4642      	mov	r2, r8
 80064b8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80064bc:	464b      	mov	r3, r9
 80064be:	e9d4 0100 	ldrd	r0, r1, [r4]
 80064c2:	f7fa f875 	bl	80005b0 <__aeabi_dmul>
 80064c6:	e7c3      	b.n	8006450 <_strtod_l+0x380>
 80064c8:	9a07      	ldr	r2, [sp, #28]
 80064ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80064ce:	4293      	cmp	r3, r2
 80064d0:	db20      	blt.n	8006514 <_strtod_l+0x444>
 80064d2:	4d63      	ldr	r5, [pc, #396]	; (8006660 <_strtod_l+0x590>)
 80064d4:	f1c4 040f 	rsb	r4, r4, #15
 80064d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80064dc:	4642      	mov	r2, r8
 80064de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064e2:	464b      	mov	r3, r9
 80064e4:	f7fa f864 	bl	80005b0 <__aeabi_dmul>
 80064e8:	9b07      	ldr	r3, [sp, #28]
 80064ea:	1b1c      	subs	r4, r3, r4
 80064ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80064f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064f4:	e7e5      	b.n	80064c2 <_strtod_l+0x3f2>
 80064f6:	9b07      	ldr	r3, [sp, #28]
 80064f8:	3316      	adds	r3, #22
 80064fa:	db0b      	blt.n	8006514 <_strtod_l+0x444>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	4a58      	ldr	r2, [pc, #352]	; (8006660 <_strtod_l+0x590>)
 8006500:	1b5d      	subs	r5, r3, r5
 8006502:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006506:	4640      	mov	r0, r8
 8006508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800650c:	4649      	mov	r1, r9
 800650e:	f7fa f979 	bl	8000804 <__aeabi_ddiv>
 8006512:	e79d      	b.n	8006450 <_strtod_l+0x380>
 8006514:	9b07      	ldr	r3, [sp, #28]
 8006516:	1ba6      	subs	r6, r4, r6
 8006518:	441e      	add	r6, r3
 800651a:	2e00      	cmp	r6, #0
 800651c:	dd71      	ble.n	8006602 <_strtod_l+0x532>
 800651e:	f016 030f 	ands.w	r3, r6, #15
 8006522:	d00a      	beq.n	800653a <_strtod_l+0x46a>
 8006524:	494e      	ldr	r1, [pc, #312]	; (8006660 <_strtod_l+0x590>)
 8006526:	4642      	mov	r2, r8
 8006528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800652c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006530:	464b      	mov	r3, r9
 8006532:	f7fa f83d 	bl	80005b0 <__aeabi_dmul>
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	f036 060f 	bics.w	r6, r6, #15
 800653e:	d050      	beq.n	80065e2 <_strtod_l+0x512>
 8006540:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006544:	dd27      	ble.n	8006596 <_strtod_l+0x4c6>
 8006546:	f04f 0b00 	mov.w	fp, #0
 800654a:	f8cd b010 	str.w	fp, [sp, #16]
 800654e:	f8cd b020 	str.w	fp, [sp, #32]
 8006552:	f8cd b018 	str.w	fp, [sp, #24]
 8006556:	2322      	movs	r3, #34	; 0x22
 8006558:	f04f 0800 	mov.w	r8, #0
 800655c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006668 <_strtod_l+0x598>
 8006560:	f8ca 3000 	str.w	r3, [sl]
 8006564:	9b08      	ldr	r3, [sp, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f43f adf3 	beq.w	8006152 <_strtod_l+0x82>
 800656c:	4650      	mov	r0, sl
 800656e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006570:	f002 f998 	bl	80088a4 <_Bfree>
 8006574:	4650      	mov	r0, sl
 8006576:	9906      	ldr	r1, [sp, #24]
 8006578:	f002 f994 	bl	80088a4 <_Bfree>
 800657c:	4650      	mov	r0, sl
 800657e:	9904      	ldr	r1, [sp, #16]
 8006580:	f002 f990 	bl	80088a4 <_Bfree>
 8006584:	4650      	mov	r0, sl
 8006586:	9908      	ldr	r1, [sp, #32]
 8006588:	f002 f98c 	bl	80088a4 <_Bfree>
 800658c:	4659      	mov	r1, fp
 800658e:	4650      	mov	r0, sl
 8006590:	f002 f988 	bl	80088a4 <_Bfree>
 8006594:	e5dd      	b.n	8006152 <_strtod_l+0x82>
 8006596:	2300      	movs	r3, #0
 8006598:	4640      	mov	r0, r8
 800659a:	4649      	mov	r1, r9
 800659c:	461f      	mov	r7, r3
 800659e:	1136      	asrs	r6, r6, #4
 80065a0:	2e01      	cmp	r6, #1
 80065a2:	dc21      	bgt.n	80065e8 <_strtod_l+0x518>
 80065a4:	b10b      	cbz	r3, 80065aa <_strtod_l+0x4da>
 80065a6:	4680      	mov	r8, r0
 80065a8:	4689      	mov	r9, r1
 80065aa:	4b2e      	ldr	r3, [pc, #184]	; (8006664 <_strtod_l+0x594>)
 80065ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80065b0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80065b4:	4642      	mov	r2, r8
 80065b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ba:	464b      	mov	r3, r9
 80065bc:	f7f9 fff8 	bl	80005b0 <__aeabi_dmul>
 80065c0:	4b29      	ldr	r3, [pc, #164]	; (8006668 <_strtod_l+0x598>)
 80065c2:	460a      	mov	r2, r1
 80065c4:	400b      	ands	r3, r1
 80065c6:	4929      	ldr	r1, [pc, #164]	; (800666c <_strtod_l+0x59c>)
 80065c8:	4680      	mov	r8, r0
 80065ca:	428b      	cmp	r3, r1
 80065cc:	d8bb      	bhi.n	8006546 <_strtod_l+0x476>
 80065ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80065d2:	428b      	cmp	r3, r1
 80065d4:	bf86      	itte	hi
 80065d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80065da:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006670 <_strtod_l+0x5a0>
 80065de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80065e2:	2300      	movs	r3, #0
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	e07e      	b.n	80066e6 <_strtod_l+0x616>
 80065e8:	07f2      	lsls	r2, r6, #31
 80065ea:	d507      	bpl.n	80065fc <_strtod_l+0x52c>
 80065ec:	4b1d      	ldr	r3, [pc, #116]	; (8006664 <_strtod_l+0x594>)
 80065ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 ffdb 	bl	80005b0 <__aeabi_dmul>
 80065fa:	2301      	movs	r3, #1
 80065fc:	3701      	adds	r7, #1
 80065fe:	1076      	asrs	r6, r6, #1
 8006600:	e7ce      	b.n	80065a0 <_strtod_l+0x4d0>
 8006602:	d0ee      	beq.n	80065e2 <_strtod_l+0x512>
 8006604:	4276      	negs	r6, r6
 8006606:	f016 020f 	ands.w	r2, r6, #15
 800660a:	d00a      	beq.n	8006622 <_strtod_l+0x552>
 800660c:	4b14      	ldr	r3, [pc, #80]	; (8006660 <_strtod_l+0x590>)
 800660e:	4640      	mov	r0, r8
 8006610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006614:	4649      	mov	r1, r9
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7fa f8f3 	bl	8000804 <__aeabi_ddiv>
 800661e:	4680      	mov	r8, r0
 8006620:	4689      	mov	r9, r1
 8006622:	1136      	asrs	r6, r6, #4
 8006624:	d0dd      	beq.n	80065e2 <_strtod_l+0x512>
 8006626:	2e1f      	cmp	r6, #31
 8006628:	dd24      	ble.n	8006674 <_strtod_l+0x5a4>
 800662a:	f04f 0b00 	mov.w	fp, #0
 800662e:	f8cd b010 	str.w	fp, [sp, #16]
 8006632:	f8cd b020 	str.w	fp, [sp, #32]
 8006636:	f8cd b018 	str.w	fp, [sp, #24]
 800663a:	2322      	movs	r3, #34	; 0x22
 800663c:	f04f 0800 	mov.w	r8, #0
 8006640:	f04f 0900 	mov.w	r9, #0
 8006644:	f8ca 3000 	str.w	r3, [sl]
 8006648:	e78c      	b.n	8006564 <_strtod_l+0x494>
 800664a:	bf00      	nop
 800664c:	0800a355 	.word	0x0800a355
 8006650:	0800a394 	.word	0x0800a394
 8006654:	0800a34d 	.word	0x0800a34d
 8006658:	0800a3d3 	.word	0x0800a3d3
 800665c:	0800a70b 	.word	0x0800a70b
 8006660:	0800a5d0 	.word	0x0800a5d0
 8006664:	0800a5a8 	.word	0x0800a5a8
 8006668:	7ff00000 	.word	0x7ff00000
 800666c:	7ca00000 	.word	0x7ca00000
 8006670:	7fefffff 	.word	0x7fefffff
 8006674:	f016 0310 	ands.w	r3, r6, #16
 8006678:	bf18      	it	ne
 800667a:	236a      	movne	r3, #106	; 0x6a
 800667c:	4640      	mov	r0, r8
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	4649      	mov	r1, r9
 8006682:	2300      	movs	r3, #0
 8006684:	4fb2      	ldr	r7, [pc, #712]	; (8006950 <_strtod_l+0x880>)
 8006686:	07f2      	lsls	r2, r6, #31
 8006688:	d504      	bpl.n	8006694 <_strtod_l+0x5c4>
 800668a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668e:	f7f9 ff8f 	bl	80005b0 <__aeabi_dmul>
 8006692:	2301      	movs	r3, #1
 8006694:	1076      	asrs	r6, r6, #1
 8006696:	f107 0708 	add.w	r7, r7, #8
 800669a:	d1f4      	bne.n	8006686 <_strtod_l+0x5b6>
 800669c:	b10b      	cbz	r3, 80066a2 <_strtod_l+0x5d2>
 800669e:	4680      	mov	r8, r0
 80066a0:	4689      	mov	r9, r1
 80066a2:	9b05      	ldr	r3, [sp, #20]
 80066a4:	b1bb      	cbz	r3, 80066d6 <_strtod_l+0x606>
 80066a6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80066aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	4649      	mov	r1, r9
 80066b2:	dd10      	ble.n	80066d6 <_strtod_l+0x606>
 80066b4:	2b1f      	cmp	r3, #31
 80066b6:	f340 812b 	ble.w	8006910 <_strtod_l+0x840>
 80066ba:	2b34      	cmp	r3, #52	; 0x34
 80066bc:	bfd8      	it	le
 80066be:	f04f 32ff 	movle.w	r2, #4294967295
 80066c2:	f04f 0800 	mov.w	r8, #0
 80066c6:	bfcf      	iteee	gt
 80066c8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80066cc:	3b20      	suble	r3, #32
 80066ce:	fa02 f303 	lslle.w	r3, r2, r3
 80066d2:	ea03 0901 	andle.w	r9, r3, r1
 80066d6:	2200      	movs	r2, #0
 80066d8:	2300      	movs	r3, #0
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7fa f9cf 	bl	8000a80 <__aeabi_dcmpeq>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d1a1      	bne.n	800662a <_strtod_l+0x55a>
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	465a      	mov	r2, fp
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	4650      	mov	r0, sl
 80066ee:	4623      	mov	r3, r4
 80066f0:	9908      	ldr	r1, [sp, #32]
 80066f2:	f002 f943 	bl	800897c <__s2b>
 80066f6:	9008      	str	r0, [sp, #32]
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f43f af24 	beq.w	8006546 <_strtod_l+0x476>
 80066fe:	9b04      	ldr	r3, [sp, #16]
 8006700:	f04f 0b00 	mov.w	fp, #0
 8006704:	1b5d      	subs	r5, r3, r5
 8006706:	9b07      	ldr	r3, [sp, #28]
 8006708:	f8cd b010 	str.w	fp, [sp, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfb4      	ite	lt
 8006710:	462b      	movlt	r3, r5
 8006712:	2300      	movge	r3, #0
 8006714:	930e      	str	r3, [sp, #56]	; 0x38
 8006716:	9b07      	ldr	r3, [sp, #28]
 8006718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800671c:	9316      	str	r3, [sp, #88]	; 0x58
 800671e:	9b08      	ldr	r3, [sp, #32]
 8006720:	4650      	mov	r0, sl
 8006722:	6859      	ldr	r1, [r3, #4]
 8006724:	f002 f87e 	bl	8008824 <_Balloc>
 8006728:	9006      	str	r0, [sp, #24]
 800672a:	2800      	cmp	r0, #0
 800672c:	f43f af13 	beq.w	8006556 <_strtod_l+0x486>
 8006730:	9b08      	ldr	r3, [sp, #32]
 8006732:	300c      	adds	r0, #12
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	f103 010c 	add.w	r1, r3, #12
 800673a:	3202      	adds	r2, #2
 800673c:	0092      	lsls	r2, r2, #2
 800673e:	f7fe fc43 	bl	8004fc8 <memcpy>
 8006742:	ab1e      	add	r3, sp, #120	; 0x78
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	ab1d      	add	r3, sp, #116	; 0x74
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	4642      	mov	r2, r8
 800674c:	464b      	mov	r3, r9
 800674e:	4650      	mov	r0, sl
 8006750:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006754:	f002 fc50 	bl	8008ff8 <__d2b>
 8006758:	901c      	str	r0, [sp, #112]	; 0x70
 800675a:	2800      	cmp	r0, #0
 800675c:	f43f aefb 	beq.w	8006556 <_strtod_l+0x486>
 8006760:	2101      	movs	r1, #1
 8006762:	4650      	mov	r0, sl
 8006764:	f002 f9a2 	bl	8008aac <__i2b>
 8006768:	4603      	mov	r3, r0
 800676a:	9004      	str	r0, [sp, #16]
 800676c:	2800      	cmp	r0, #0
 800676e:	f43f aef2 	beq.w	8006556 <_strtod_l+0x486>
 8006772:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006774:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006776:	2d00      	cmp	r5, #0
 8006778:	bfab      	itete	ge
 800677a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800677c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800677e:	18ee      	addge	r6, r5, r3
 8006780:	1b5c      	sublt	r4, r3, r5
 8006782:	9b05      	ldr	r3, [sp, #20]
 8006784:	bfa8      	it	ge
 8006786:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006788:	eba5 0503 	sub.w	r5, r5, r3
 800678c:	4415      	add	r5, r2
 800678e:	4b71      	ldr	r3, [pc, #452]	; (8006954 <_strtod_l+0x884>)
 8006790:	f105 35ff 	add.w	r5, r5, #4294967295
 8006794:	bfb8      	it	lt
 8006796:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006798:	429d      	cmp	r5, r3
 800679a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800679e:	f280 80c9 	bge.w	8006934 <_strtod_l+0x864>
 80067a2:	1b5b      	subs	r3, r3, r5
 80067a4:	2b1f      	cmp	r3, #31
 80067a6:	f04f 0701 	mov.w	r7, #1
 80067aa:	eba2 0203 	sub.w	r2, r2, r3
 80067ae:	f300 80b6 	bgt.w	800691e <_strtod_l+0x84e>
 80067b2:	2500      	movs	r5, #0
 80067b4:	fa07 f303 	lsl.w	r3, r7, r3
 80067b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ba:	18b7      	adds	r7, r6, r2
 80067bc:	9b05      	ldr	r3, [sp, #20]
 80067be:	42be      	cmp	r6, r7
 80067c0:	4414      	add	r4, r2
 80067c2:	441c      	add	r4, r3
 80067c4:	4633      	mov	r3, r6
 80067c6:	bfa8      	it	ge
 80067c8:	463b      	movge	r3, r7
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	bfa8      	it	ge
 80067ce:	4623      	movge	r3, r4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bfc2      	ittt	gt
 80067d4:	1aff      	subgt	r7, r7, r3
 80067d6:	1ae4      	subgt	r4, r4, r3
 80067d8:	1af6      	subgt	r6, r6, r3
 80067da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dd17      	ble.n	8006810 <_strtod_l+0x740>
 80067e0:	461a      	mov	r2, r3
 80067e2:	4650      	mov	r0, sl
 80067e4:	9904      	ldr	r1, [sp, #16]
 80067e6:	f002 fa1b 	bl	8008c20 <__pow5mult>
 80067ea:	9004      	str	r0, [sp, #16]
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f43f aeb2 	beq.w	8006556 <_strtod_l+0x486>
 80067f2:	4601      	mov	r1, r0
 80067f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80067f6:	4650      	mov	r0, sl
 80067f8:	f002 f96e 	bl	8008ad8 <__multiply>
 80067fc:	9009      	str	r0, [sp, #36]	; 0x24
 80067fe:	2800      	cmp	r0, #0
 8006800:	f43f aea9 	beq.w	8006556 <_strtod_l+0x486>
 8006804:	4650      	mov	r0, sl
 8006806:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006808:	f002 f84c 	bl	80088a4 <_Bfree>
 800680c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680e:	931c      	str	r3, [sp, #112]	; 0x70
 8006810:	2f00      	cmp	r7, #0
 8006812:	f300 8093 	bgt.w	800693c <_strtod_l+0x86c>
 8006816:	9b07      	ldr	r3, [sp, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dd08      	ble.n	800682e <_strtod_l+0x75e>
 800681c:	4650      	mov	r0, sl
 800681e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006820:	9906      	ldr	r1, [sp, #24]
 8006822:	f002 f9fd 	bl	8008c20 <__pow5mult>
 8006826:	9006      	str	r0, [sp, #24]
 8006828:	2800      	cmp	r0, #0
 800682a:	f43f ae94 	beq.w	8006556 <_strtod_l+0x486>
 800682e:	2c00      	cmp	r4, #0
 8006830:	dd08      	ble.n	8006844 <_strtod_l+0x774>
 8006832:	4622      	mov	r2, r4
 8006834:	4650      	mov	r0, sl
 8006836:	9906      	ldr	r1, [sp, #24]
 8006838:	f002 fa4c 	bl	8008cd4 <__lshift>
 800683c:	9006      	str	r0, [sp, #24]
 800683e:	2800      	cmp	r0, #0
 8006840:	f43f ae89 	beq.w	8006556 <_strtod_l+0x486>
 8006844:	2e00      	cmp	r6, #0
 8006846:	dd08      	ble.n	800685a <_strtod_l+0x78a>
 8006848:	4632      	mov	r2, r6
 800684a:	4650      	mov	r0, sl
 800684c:	9904      	ldr	r1, [sp, #16]
 800684e:	f002 fa41 	bl	8008cd4 <__lshift>
 8006852:	9004      	str	r0, [sp, #16]
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f ae7e 	beq.w	8006556 <_strtod_l+0x486>
 800685a:	4650      	mov	r0, sl
 800685c:	9a06      	ldr	r2, [sp, #24]
 800685e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006860:	f002 fac0 	bl	8008de4 <__mdiff>
 8006864:	4683      	mov	fp, r0
 8006866:	2800      	cmp	r0, #0
 8006868:	f43f ae75 	beq.w	8006556 <_strtod_l+0x486>
 800686c:	2400      	movs	r4, #0
 800686e:	68c3      	ldr	r3, [r0, #12]
 8006870:	9904      	ldr	r1, [sp, #16]
 8006872:	60c4      	str	r4, [r0, #12]
 8006874:	930d      	str	r3, [sp, #52]	; 0x34
 8006876:	f002 fa99 	bl	8008dac <__mcmp>
 800687a:	42a0      	cmp	r0, r4
 800687c:	da70      	bge.n	8006960 <_strtod_l+0x890>
 800687e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006880:	ea53 0308 	orrs.w	r3, r3, r8
 8006884:	f040 8096 	bne.w	80069b4 <_strtod_l+0x8e4>
 8006888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 8091 	bne.w	80069b4 <_strtod_l+0x8e4>
 8006892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006896:	0d1b      	lsrs	r3, r3, #20
 8006898:	051b      	lsls	r3, r3, #20
 800689a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800689e:	f240 8089 	bls.w	80069b4 <_strtod_l+0x8e4>
 80068a2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80068a6:	b923      	cbnz	r3, 80068b2 <_strtod_l+0x7e2>
 80068a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f340 8081 	ble.w	80069b4 <_strtod_l+0x8e4>
 80068b2:	4659      	mov	r1, fp
 80068b4:	2201      	movs	r2, #1
 80068b6:	4650      	mov	r0, sl
 80068b8:	f002 fa0c 	bl	8008cd4 <__lshift>
 80068bc:	9904      	ldr	r1, [sp, #16]
 80068be:	4683      	mov	fp, r0
 80068c0:	f002 fa74 	bl	8008dac <__mcmp>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	dd75      	ble.n	80069b4 <_strtod_l+0x8e4>
 80068c8:	9905      	ldr	r1, [sp, #20]
 80068ca:	464b      	mov	r3, r9
 80068cc:	4a22      	ldr	r2, [pc, #136]	; (8006958 <_strtod_l+0x888>)
 80068ce:	2900      	cmp	r1, #0
 80068d0:	f000 8091 	beq.w	80069f6 <_strtod_l+0x926>
 80068d4:	ea02 0109 	and.w	r1, r2, r9
 80068d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80068dc:	f300 808b 	bgt.w	80069f6 <_strtod_l+0x926>
 80068e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80068e4:	f77f aea9 	ble.w	800663a <_strtod_l+0x56a>
 80068e8:	2300      	movs	r3, #0
 80068ea:	4a1c      	ldr	r2, [pc, #112]	; (800695c <_strtod_l+0x88c>)
 80068ec:	4640      	mov	r0, r8
 80068ee:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80068f2:	4649      	mov	r1, r9
 80068f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80068f8:	f7f9 fe5a 	bl	80005b0 <__aeabi_dmul>
 80068fc:	460b      	mov	r3, r1
 80068fe:	4303      	orrs	r3, r0
 8006900:	bf08      	it	eq
 8006902:	2322      	moveq	r3, #34	; 0x22
 8006904:	4680      	mov	r8, r0
 8006906:	4689      	mov	r9, r1
 8006908:	bf08      	it	eq
 800690a:	f8ca 3000 	streq.w	r3, [sl]
 800690e:	e62d      	b.n	800656c <_strtod_l+0x49c>
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	fa02 f303 	lsl.w	r3, r2, r3
 8006918:	ea03 0808 	and.w	r8, r3, r8
 800691c:	e6db      	b.n	80066d6 <_strtod_l+0x606>
 800691e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006922:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006926:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800692a:	35e2      	adds	r5, #226	; 0xe2
 800692c:	fa07 f505 	lsl.w	r5, r7, r5
 8006930:	970f      	str	r7, [sp, #60]	; 0x3c
 8006932:	e742      	b.n	80067ba <_strtod_l+0x6ea>
 8006934:	2301      	movs	r3, #1
 8006936:	2500      	movs	r5, #0
 8006938:	930f      	str	r3, [sp, #60]	; 0x3c
 800693a:	e73e      	b.n	80067ba <_strtod_l+0x6ea>
 800693c:	463a      	mov	r2, r7
 800693e:	4650      	mov	r0, sl
 8006940:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006942:	f002 f9c7 	bl	8008cd4 <__lshift>
 8006946:	901c      	str	r0, [sp, #112]	; 0x70
 8006948:	2800      	cmp	r0, #0
 800694a:	f47f af64 	bne.w	8006816 <_strtod_l+0x746>
 800694e:	e602      	b.n	8006556 <_strtod_l+0x486>
 8006950:	0800a3a8 	.word	0x0800a3a8
 8006954:	fffffc02 	.word	0xfffffc02
 8006958:	7ff00000 	.word	0x7ff00000
 800695c:	39500000 	.word	0x39500000
 8006960:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006964:	d166      	bne.n	8006a34 <_strtod_l+0x964>
 8006966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006968:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800696c:	b35a      	cbz	r2, 80069c6 <_strtod_l+0x8f6>
 800696e:	4a9c      	ldr	r2, [pc, #624]	; (8006be0 <_strtod_l+0xb10>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d12c      	bne.n	80069ce <_strtod_l+0x8fe>
 8006974:	9b05      	ldr	r3, [sp, #20]
 8006976:	4640      	mov	r0, r8
 8006978:	b303      	cbz	r3, 80069bc <_strtod_l+0x8ec>
 800697a:	464b      	mov	r3, r9
 800697c:	4a99      	ldr	r2, [pc, #612]	; (8006be4 <_strtod_l+0xb14>)
 800697e:	f04f 31ff 	mov.w	r1, #4294967295
 8006982:	401a      	ands	r2, r3
 8006984:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006988:	d81b      	bhi.n	80069c2 <_strtod_l+0x8f2>
 800698a:	0d12      	lsrs	r2, r2, #20
 800698c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	4298      	cmp	r0, r3
 8006996:	d11a      	bne.n	80069ce <_strtod_l+0x8fe>
 8006998:	4b93      	ldr	r3, [pc, #588]	; (8006be8 <_strtod_l+0xb18>)
 800699a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800699c:	429a      	cmp	r2, r3
 800699e:	d102      	bne.n	80069a6 <_strtod_l+0x8d6>
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f add8 	beq.w	8006556 <_strtod_l+0x486>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	4b8e      	ldr	r3, [pc, #568]	; (8006be4 <_strtod_l+0xb14>)
 80069ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ae:	401a      	ands	r2, r3
 80069b0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80069b4:	9b05      	ldr	r3, [sp, #20]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d196      	bne.n	80068e8 <_strtod_l+0x818>
 80069ba:	e5d7      	b.n	800656c <_strtod_l+0x49c>
 80069bc:	f04f 33ff 	mov.w	r3, #4294967295
 80069c0:	e7e8      	b.n	8006994 <_strtod_l+0x8c4>
 80069c2:	460b      	mov	r3, r1
 80069c4:	e7e6      	b.n	8006994 <_strtod_l+0x8c4>
 80069c6:	ea53 0308 	orrs.w	r3, r3, r8
 80069ca:	f43f af7d 	beq.w	80068c8 <_strtod_l+0x7f8>
 80069ce:	b1e5      	cbz	r5, 8006a0a <_strtod_l+0x93a>
 80069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d2:	421d      	tst	r5, r3
 80069d4:	d0ee      	beq.n	80069b4 <_strtod_l+0x8e4>
 80069d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d8:	4640      	mov	r0, r8
 80069da:	4649      	mov	r1, r9
 80069dc:	9a05      	ldr	r2, [sp, #20]
 80069de:	b1c3      	cbz	r3, 8006a12 <_strtod_l+0x942>
 80069e0:	f7ff fb53 	bl	800608a <sulp>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069ec:	f7f9 fc2a 	bl	8000244 <__adddf3>
 80069f0:	4680      	mov	r8, r0
 80069f2:	4689      	mov	r9, r1
 80069f4:	e7de      	b.n	80069b4 <_strtod_l+0x8e4>
 80069f6:	4013      	ands	r3, r2
 80069f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80069fc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006a00:	f04f 38ff 	mov.w	r8, #4294967295
 8006a04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006a08:	e7d4      	b.n	80069b4 <_strtod_l+0x8e4>
 8006a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a0c:	ea13 0f08 	tst.w	r3, r8
 8006a10:	e7e0      	b.n	80069d4 <_strtod_l+0x904>
 8006a12:	f7ff fb3a 	bl	800608a <sulp>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a1e:	f7f9 fc0f 	bl	8000240 <__aeabi_dsub>
 8006a22:	2200      	movs	r2, #0
 8006a24:	2300      	movs	r3, #0
 8006a26:	4680      	mov	r8, r0
 8006a28:	4689      	mov	r9, r1
 8006a2a:	f7fa f829 	bl	8000a80 <__aeabi_dcmpeq>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d0c0      	beq.n	80069b4 <_strtod_l+0x8e4>
 8006a32:	e602      	b.n	800663a <_strtod_l+0x56a>
 8006a34:	4658      	mov	r0, fp
 8006a36:	9904      	ldr	r1, [sp, #16]
 8006a38:	f002 fb3a 	bl	80090b0 <__ratio>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	f7fa f82f 	bl	8000aa8 <__aeabi_dcmple>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d075      	beq.n	8006b3a <_strtod_l+0xa6a>
 8006a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d047      	beq.n	8006ae4 <_strtod_l+0xa14>
 8006a54:	2600      	movs	r6, #0
 8006a56:	4f65      	ldr	r7, [pc, #404]	; (8006bec <_strtod_l+0xb1c>)
 8006a58:	4d64      	ldr	r5, [pc, #400]	; (8006bec <_strtod_l+0xb1c>)
 8006a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	0d1b      	lsrs	r3, r3, #20
 8006a62:	051b      	lsls	r3, r3, #20
 8006a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a68:	4b61      	ldr	r3, [pc, #388]	; (8006bf0 <_strtod_l+0xb20>)
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	f040 80c8 	bne.w	8006c00 <_strtod_l+0xb30>
 8006a70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a74:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006a80:	4649      	mov	r1, r9
 8006a82:	f002 fa3f 	bl	8008f04 <__ulp>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7f9 fd8f 	bl	80005b0 <__aeabi_dmul>
 8006a92:	4642      	mov	r2, r8
 8006a94:	464b      	mov	r3, r9
 8006a96:	f7f9 fbd5 	bl	8000244 <__adddf3>
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4951      	ldr	r1, [pc, #324]	; (8006be4 <_strtod_l+0xb14>)
 8006a9e:	4a55      	ldr	r2, [pc, #340]	; (8006bf4 <_strtod_l+0xb24>)
 8006aa0:	4019      	ands	r1, r3
 8006aa2:	4291      	cmp	r1, r2
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	d95e      	bls.n	8006b66 <_strtod_l+0xa96>
 8006aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aaa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d103      	bne.n	8006aba <_strtod_l+0x9ea>
 8006ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f43f ad4e 	beq.w	8006556 <_strtod_l+0x486>
 8006aba:	f04f 38ff 	mov.w	r8, #4294967295
 8006abe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006be8 <_strtod_l+0xb18>
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ac6:	f001 feed 	bl	80088a4 <_Bfree>
 8006aca:	4650      	mov	r0, sl
 8006acc:	9906      	ldr	r1, [sp, #24]
 8006ace:	f001 fee9 	bl	80088a4 <_Bfree>
 8006ad2:	4650      	mov	r0, sl
 8006ad4:	9904      	ldr	r1, [sp, #16]
 8006ad6:	f001 fee5 	bl	80088a4 <_Bfree>
 8006ada:	4659      	mov	r1, fp
 8006adc:	4650      	mov	r0, sl
 8006ade:	f001 fee1 	bl	80088a4 <_Bfree>
 8006ae2:	e61c      	b.n	800671e <_strtod_l+0x64e>
 8006ae4:	f1b8 0f00 	cmp.w	r8, #0
 8006ae8:	d119      	bne.n	8006b1e <_strtod_l+0xa4e>
 8006aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af0:	b9e3      	cbnz	r3, 8006b2c <_strtod_l+0xa5c>
 8006af2:	2200      	movs	r2, #0
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	4b3c      	ldr	r3, [pc, #240]	; (8006bec <_strtod_l+0xb1c>)
 8006afa:	f7f9 ffcb 	bl	8000a94 <__aeabi_dcmplt>
 8006afe:	b9c8      	cbnz	r0, 8006b34 <_strtod_l+0xa64>
 8006b00:	2200      	movs	r2, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	4b3c      	ldr	r3, [pc, #240]	; (8006bf8 <_strtod_l+0xb28>)
 8006b08:	f7f9 fd52 	bl	80005b0 <__aeabi_dmul>
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	460d      	mov	r5, r1
 8006b10:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b14:	9418      	str	r4, [sp, #96]	; 0x60
 8006b16:	9319      	str	r3, [sp, #100]	; 0x64
 8006b18:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006b1c:	e79d      	b.n	8006a5a <_strtod_l+0x98a>
 8006b1e:	f1b8 0f01 	cmp.w	r8, #1
 8006b22:	d103      	bne.n	8006b2c <_strtod_l+0xa5c>
 8006b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f43f ad87 	beq.w	800663a <_strtod_l+0x56a>
 8006b2c:	2600      	movs	r6, #0
 8006b2e:	2400      	movs	r4, #0
 8006b30:	4f32      	ldr	r7, [pc, #200]	; (8006bfc <_strtod_l+0xb2c>)
 8006b32:	e791      	b.n	8006a58 <_strtod_l+0x988>
 8006b34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006b36:	4d30      	ldr	r5, [pc, #192]	; (8006bf8 <_strtod_l+0xb28>)
 8006b38:	e7ea      	b.n	8006b10 <_strtod_l+0xa40>
 8006b3a:	4b2f      	ldr	r3, [pc, #188]	; (8006bf8 <_strtod_l+0xb28>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4630      	mov	r0, r6
 8006b40:	4639      	mov	r1, r7
 8006b42:	f7f9 fd35 	bl	80005b0 <__aeabi_dmul>
 8006b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	b933      	cbnz	r3, 8006b5c <_strtod_l+0xa8c>
 8006b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b52:	9010      	str	r0, [sp, #64]	; 0x40
 8006b54:	9311      	str	r3, [sp, #68]	; 0x44
 8006b56:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b5a:	e77e      	b.n	8006a5a <_strtod_l+0x98a>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006b64:	e7f7      	b.n	8006b56 <_strtod_l+0xa86>
 8006b66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1a8      	bne.n	8006ac2 <_strtod_l+0x9f2>
 8006b70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b76:	0d1b      	lsrs	r3, r3, #20
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1a1      	bne.n	8006ac2 <_strtod_l+0x9f2>
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7fa f85d 	bl	8000c40 <__aeabi_d2lz>
 8006b86:	f7f9 fce5 	bl	8000554 <__aeabi_l2d>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7f9 fb55 	bl	8000240 <__aeabi_dsub>
 8006b96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b9c:	ea43 0308 	orr.w	r3, r3, r8
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	d066      	beq.n	8006c76 <_strtod_l+0xba6>
 8006ba8:	a309      	add	r3, pc, #36	; (adr r3, 8006bd0 <_strtod_l+0xb00>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 ff71 	bl	8000a94 <__aeabi_dcmplt>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f47f acda 	bne.w	800656c <_strtod_l+0x49c>
 8006bb8:	a307      	add	r3, pc, #28	; (adr r3, 8006bd8 <_strtod_l+0xb08>)
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 ff85 	bl	8000ad0 <__aeabi_dcmpgt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f43f af7b 	beq.w	8006ac2 <_strtod_l+0x9f2>
 8006bcc:	e4ce      	b.n	800656c <_strtod_l+0x49c>
 8006bce:	bf00      	nop
 8006bd0:	94a03595 	.word	0x94a03595
 8006bd4:	3fdfffff 	.word	0x3fdfffff
 8006bd8:	35afe535 	.word	0x35afe535
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	000fffff 	.word	0x000fffff
 8006be4:	7ff00000 	.word	0x7ff00000
 8006be8:	7fefffff 	.word	0x7fefffff
 8006bec:	3ff00000 	.word	0x3ff00000
 8006bf0:	7fe00000 	.word	0x7fe00000
 8006bf4:	7c9fffff 	.word	0x7c9fffff
 8006bf8:	3fe00000 	.word	0x3fe00000
 8006bfc:	bff00000 	.word	0xbff00000
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	b313      	cbz	r3, 8006c4a <_strtod_l+0xb7a>
 8006c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c0a:	d81e      	bhi.n	8006c4a <_strtod_l+0xb7a>
 8006c0c:	a326      	add	r3, pc, #152	; (adr r3, 8006ca8 <_strtod_l+0xbd8>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7f9 ff47 	bl	8000aa8 <__aeabi_dcmple>
 8006c1a:	b190      	cbz	r0, 8006c42 <_strtod_l+0xb72>
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7f9 ff9e 	bl	8000b60 <__aeabi_d2uiz>
 8006c24:	2801      	cmp	r0, #1
 8006c26:	bf38      	it	cc
 8006c28:	2001      	movcc	r0, #1
 8006c2a:	f7f9 fc47 	bl	80004bc <__aeabi_ui2d>
 8006c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	b9d3      	cbnz	r3, 8006c6c <_strtod_l+0xb9c>
 8006c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c3a:	9012      	str	r0, [sp, #72]	; 0x48
 8006c3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c3e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006c42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c44:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006c48:	1a9f      	subs	r7, r3, r2
 8006c4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c4e:	f002 f959 	bl	8008f04 <__ulp>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4630      	mov	r0, r6
 8006c58:	4639      	mov	r1, r7
 8006c5a:	f7f9 fca9 	bl	80005b0 <__aeabi_dmul>
 8006c5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c62:	f7f9 faef 	bl	8000244 <__adddf3>
 8006c66:	4680      	mov	r8, r0
 8006c68:	4689      	mov	r9, r1
 8006c6a:	e77e      	b.n	8006b6a <_strtod_l+0xa9a>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006c74:	e7e3      	b.n	8006c3e <_strtod_l+0xb6e>
 8006c76:	a30e      	add	r3, pc, #56	; (adr r3, 8006cb0 <_strtod_l+0xbe0>)
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 ff0a 	bl	8000a94 <__aeabi_dcmplt>
 8006c80:	e7a1      	b.n	8006bc6 <_strtod_l+0xaf6>
 8006c82:	2300      	movs	r3, #0
 8006c84:	930c      	str	r3, [sp, #48]	; 0x30
 8006c86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	f7ff ba65 	b.w	800615a <_strtod_l+0x8a>
 8006c90:	2b65      	cmp	r3, #101	; 0x65
 8006c92:	f43f ab5c 	beq.w	800634e <_strtod_l+0x27e>
 8006c96:	2b45      	cmp	r3, #69	; 0x45
 8006c98:	f43f ab59 	beq.w	800634e <_strtod_l+0x27e>
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f7ff bb8d 	b.w	80063bc <_strtod_l+0x2ec>
 8006ca2:	bf00      	nop
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	ffc00000 	.word	0xffc00000
 8006cac:	41dfffff 	.word	0x41dfffff
 8006cb0:	94a03595 	.word	0x94a03595
 8006cb4:	3fcfffff 	.word	0x3fcfffff

08006cb8 <_strtod_r>:
 8006cb8:	4b01      	ldr	r3, [pc, #4]	; (8006cc0 <_strtod_r+0x8>)
 8006cba:	f7ff ba09 	b.w	80060d0 <_strtod_l>
 8006cbe:	bf00      	nop
 8006cc0:	200000b0 	.word	0x200000b0

08006cc4 <_strtol_l.isra.0>:
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cca:	4686      	mov	lr, r0
 8006ccc:	d001      	beq.n	8006cd2 <_strtol_l.isra.0+0xe>
 8006cce:	2b24      	cmp	r3, #36	; 0x24
 8006cd0:	d906      	bls.n	8006ce0 <_strtol_l.isra.0+0x1c>
 8006cd2:	f7fe f93f 	bl	8004f54 <__errno>
 8006cd6:	2316      	movs	r3, #22
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	468c      	mov	ip, r1
 8006ce2:	4e3a      	ldr	r6, [pc, #232]	; (8006dcc <_strtol_l.isra.0+0x108>)
 8006ce4:	4660      	mov	r0, ip
 8006ce6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006cea:	5da5      	ldrb	r5, [r4, r6]
 8006cec:	f015 0508 	ands.w	r5, r5, #8
 8006cf0:	d1f8      	bne.n	8006ce4 <_strtol_l.isra.0+0x20>
 8006cf2:	2c2d      	cmp	r4, #45	; 0x2d
 8006cf4:	d133      	bne.n	8006d5e <_strtol_l.isra.0+0x9a>
 8006cf6:	f04f 0801 	mov.w	r8, #1
 8006cfa:	f89c 4000 	ldrb.w	r4, [ip]
 8006cfe:	f100 0c02 	add.w	ip, r0, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d05d      	beq.n	8006dc2 <_strtol_l.isra.0+0xfe>
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d10c      	bne.n	8006d24 <_strtol_l.isra.0+0x60>
 8006d0a:	2c30      	cmp	r4, #48	; 0x30
 8006d0c:	d10a      	bne.n	8006d24 <_strtol_l.isra.0+0x60>
 8006d0e:	f89c 0000 	ldrb.w	r0, [ip]
 8006d12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006d16:	2858      	cmp	r0, #88	; 0x58
 8006d18:	d14e      	bne.n	8006db8 <_strtol_l.isra.0+0xf4>
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006d20:	f10c 0c02 	add.w	ip, ip, #2
 8006d24:	2500      	movs	r5, #0
 8006d26:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006d2a:	3f01      	subs	r7, #1
 8006d2c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006d30:	4628      	mov	r0, r5
 8006d32:	fb03 7a19 	mls	sl, r3, r9, r7
 8006d36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006d3a:	2e09      	cmp	r6, #9
 8006d3c:	d818      	bhi.n	8006d70 <_strtol_l.isra.0+0xac>
 8006d3e:	4634      	mov	r4, r6
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	dd24      	ble.n	8006d8e <_strtol_l.isra.0+0xca>
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	db1f      	blt.n	8006d88 <_strtol_l.isra.0+0xc4>
 8006d48:	4581      	cmp	r9, r0
 8006d4a:	d31d      	bcc.n	8006d88 <_strtol_l.isra.0+0xc4>
 8006d4c:	d101      	bne.n	8006d52 <_strtol_l.isra.0+0x8e>
 8006d4e:	45a2      	cmp	sl, r4
 8006d50:	db1a      	blt.n	8006d88 <_strtol_l.isra.0+0xc4>
 8006d52:	2501      	movs	r5, #1
 8006d54:	fb00 4003 	mla	r0, r0, r3, r4
 8006d58:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006d5c:	e7eb      	b.n	8006d36 <_strtol_l.isra.0+0x72>
 8006d5e:	2c2b      	cmp	r4, #43	; 0x2b
 8006d60:	bf08      	it	eq
 8006d62:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006d66:	46a8      	mov	r8, r5
 8006d68:	bf08      	it	eq
 8006d6a:	f100 0c02 	addeq.w	ip, r0, #2
 8006d6e:	e7c8      	b.n	8006d02 <_strtol_l.isra.0+0x3e>
 8006d70:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006d74:	2e19      	cmp	r6, #25
 8006d76:	d801      	bhi.n	8006d7c <_strtol_l.isra.0+0xb8>
 8006d78:	3c37      	subs	r4, #55	; 0x37
 8006d7a:	e7e1      	b.n	8006d40 <_strtol_l.isra.0+0x7c>
 8006d7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006d80:	2e19      	cmp	r6, #25
 8006d82:	d804      	bhi.n	8006d8e <_strtol_l.isra.0+0xca>
 8006d84:	3c57      	subs	r4, #87	; 0x57
 8006d86:	e7db      	b.n	8006d40 <_strtol_l.isra.0+0x7c>
 8006d88:	f04f 35ff 	mov.w	r5, #4294967295
 8006d8c:	e7e4      	b.n	8006d58 <_strtol_l.isra.0+0x94>
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	da08      	bge.n	8006da4 <_strtol_l.isra.0+0xe0>
 8006d92:	2322      	movs	r3, #34	; 0x22
 8006d94:	4638      	mov	r0, r7
 8006d96:	f8ce 3000 	str.w	r3, [lr]
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	d09e      	beq.n	8006cdc <_strtol_l.isra.0+0x18>
 8006d9e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006da2:	e007      	b.n	8006db4 <_strtol_l.isra.0+0xf0>
 8006da4:	f1b8 0f00 	cmp.w	r8, #0
 8006da8:	d000      	beq.n	8006dac <_strtol_l.isra.0+0xe8>
 8006daa:	4240      	negs	r0, r0
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d095      	beq.n	8006cdc <_strtol_l.isra.0+0x18>
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	d1f4      	bne.n	8006d9e <_strtol_l.isra.0+0xda>
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	e791      	b.n	8006cdc <_strtol_l.isra.0+0x18>
 8006db8:	2430      	movs	r4, #48	; 0x30
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1b2      	bne.n	8006d24 <_strtol_l.isra.0+0x60>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	e7b0      	b.n	8006d24 <_strtol_l.isra.0+0x60>
 8006dc2:	2c30      	cmp	r4, #48	; 0x30
 8006dc4:	d0a3      	beq.n	8006d0e <_strtol_l.isra.0+0x4a>
 8006dc6:	230a      	movs	r3, #10
 8006dc8:	e7ac      	b.n	8006d24 <_strtol_l.isra.0+0x60>
 8006dca:	bf00      	nop
 8006dcc:	0800a241 	.word	0x0800a241

08006dd0 <_strtol_r>:
 8006dd0:	f7ff bf78 	b.w	8006cc4 <_strtol_l.isra.0>

08006dd4 <__swbuf_r>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	460e      	mov	r6, r1
 8006dd8:	4614      	mov	r4, r2
 8006dda:	4605      	mov	r5, r0
 8006ddc:	b118      	cbz	r0, 8006de6 <__swbuf_r+0x12>
 8006dde:	6983      	ldr	r3, [r0, #24]
 8006de0:	b90b      	cbnz	r3, 8006de6 <__swbuf_r+0x12>
 8006de2:	f001 f871 	bl	8007ec8 <__sinit>
 8006de6:	4b21      	ldr	r3, [pc, #132]	; (8006e6c <__swbuf_r+0x98>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	d12b      	bne.n	8006e44 <__swbuf_r+0x70>
 8006dec:	686c      	ldr	r4, [r5, #4]
 8006dee:	69a3      	ldr	r3, [r4, #24]
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	071a      	lsls	r2, r3, #28
 8006df6:	d52f      	bpl.n	8006e58 <__swbuf_r+0x84>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	b36b      	cbz	r3, 8006e58 <__swbuf_r+0x84>
 8006dfc:	6923      	ldr	r3, [r4, #16]
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	b2f6      	uxtb	r6, r6
 8006e02:	1ac0      	subs	r0, r0, r3
 8006e04:	6963      	ldr	r3, [r4, #20]
 8006e06:	4637      	mov	r7, r6
 8006e08:	4283      	cmp	r3, r0
 8006e0a:	dc04      	bgt.n	8006e16 <__swbuf_r+0x42>
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 ffc6 	bl	8007da0 <_fflush_r>
 8006e14:	bb30      	cbnz	r0, 8006e64 <__swbuf_r+0x90>
 8006e16:	68a3      	ldr	r3, [r4, #8]
 8006e18:	3001      	adds	r0, #1
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	60a3      	str	r3, [r4, #8]
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	701e      	strb	r6, [r3, #0]
 8006e26:	6963      	ldr	r3, [r4, #20]
 8006e28:	4283      	cmp	r3, r0
 8006e2a:	d004      	beq.n	8006e36 <__swbuf_r+0x62>
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	07db      	lsls	r3, r3, #31
 8006e30:	d506      	bpl.n	8006e40 <__swbuf_r+0x6c>
 8006e32:	2e0a      	cmp	r6, #10
 8006e34:	d104      	bne.n	8006e40 <__swbuf_r+0x6c>
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 ffb1 	bl	8007da0 <_fflush_r>
 8006e3e:	b988      	cbnz	r0, 8006e64 <__swbuf_r+0x90>
 8006e40:	4638      	mov	r0, r7
 8006e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <__swbuf_r+0x9c>)
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d101      	bne.n	8006e4e <__swbuf_r+0x7a>
 8006e4a:	68ac      	ldr	r4, [r5, #8]
 8006e4c:	e7cf      	b.n	8006dee <__swbuf_r+0x1a>
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <__swbuf_r+0xa0>)
 8006e50:	429c      	cmp	r4, r3
 8006e52:	bf08      	it	eq
 8006e54:	68ec      	ldreq	r4, [r5, #12]
 8006e56:	e7ca      	b.n	8006dee <__swbuf_r+0x1a>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 f81e 	bl	8006e9c <__swsetup_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d0cb      	beq.n	8006dfc <__swbuf_r+0x28>
 8006e64:	f04f 37ff 	mov.w	r7, #4294967295
 8006e68:	e7ea      	b.n	8006e40 <__swbuf_r+0x6c>
 8006e6a:	bf00      	nop
 8006e6c:	0800a484 	.word	0x0800a484
 8006e70:	0800a4a4 	.word	0x0800a4a4
 8006e74:	0800a464 	.word	0x0800a464

08006e78 <_write_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	4611      	mov	r1, r2
 8006e80:	2200      	movs	r2, #0
 8006e82:	4d05      	ldr	r5, [pc, #20]	; (8006e98 <_write_r+0x20>)
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f7fb fbb0 	bl	80025ec <_write>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_write_r+0x1e>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_write_r+0x1e>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	2000087c 	.word	0x2000087c

08006e9c <__swsetup_r>:
 8006e9c:	4b32      	ldr	r3, [pc, #200]	; (8006f68 <__swsetup_r+0xcc>)
 8006e9e:	b570      	push	{r4, r5, r6, lr}
 8006ea0:	681d      	ldr	r5, [r3, #0]
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	b125      	cbz	r5, 8006eb2 <__swsetup_r+0x16>
 8006ea8:	69ab      	ldr	r3, [r5, #24]
 8006eaa:	b913      	cbnz	r3, 8006eb2 <__swsetup_r+0x16>
 8006eac:	4628      	mov	r0, r5
 8006eae:	f001 f80b 	bl	8007ec8 <__sinit>
 8006eb2:	4b2e      	ldr	r3, [pc, #184]	; (8006f6c <__swsetup_r+0xd0>)
 8006eb4:	429c      	cmp	r4, r3
 8006eb6:	d10f      	bne.n	8006ed8 <__swsetup_r+0x3c>
 8006eb8:	686c      	ldr	r4, [r5, #4]
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ec0:	0719      	lsls	r1, r3, #28
 8006ec2:	d42c      	bmi.n	8006f1e <__swsetup_r+0x82>
 8006ec4:	06dd      	lsls	r5, r3, #27
 8006ec6:	d411      	bmi.n	8006eec <__swsetup_r+0x50>
 8006ec8:	2309      	movs	r3, #9
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	e03e      	b.n	8006f56 <__swsetup_r+0xba>
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <__swsetup_r+0xd4>)
 8006eda:	429c      	cmp	r4, r3
 8006edc:	d101      	bne.n	8006ee2 <__swsetup_r+0x46>
 8006ede:	68ac      	ldr	r4, [r5, #8]
 8006ee0:	e7eb      	b.n	8006eba <__swsetup_r+0x1e>
 8006ee2:	4b24      	ldr	r3, [pc, #144]	; (8006f74 <__swsetup_r+0xd8>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	bf08      	it	eq
 8006ee8:	68ec      	ldreq	r4, [r5, #12]
 8006eea:	e7e6      	b.n	8006eba <__swsetup_r+0x1e>
 8006eec:	0758      	lsls	r0, r3, #29
 8006eee:	d512      	bpl.n	8006f16 <__swsetup_r+0x7a>
 8006ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ef2:	b141      	cbz	r1, 8006f06 <__swsetup_r+0x6a>
 8006ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d002      	beq.n	8006f02 <__swsetup_r+0x66>
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7fe f879 	bl	8004ff4 <_free_r>
 8006f02:	2300      	movs	r3, #0
 8006f04:	6363      	str	r3, [r4, #52]	; 0x34
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f043 0308 	orr.w	r3, r3, #8
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	b94b      	cbnz	r3, 8006f36 <__swsetup_r+0x9a>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f2c:	d003      	beq.n	8006f36 <__swsetup_r+0x9a>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4630      	mov	r0, r6
 8006f32:	f001 fc0b 	bl	800874c <__smakebuf_r>
 8006f36:	89a0      	ldrh	r0, [r4, #12]
 8006f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f3c:	f010 0301 	ands.w	r3, r0, #1
 8006f40:	d00a      	beq.n	8006f58 <__swsetup_r+0xbc>
 8006f42:	2300      	movs	r3, #0
 8006f44:	60a3      	str	r3, [r4, #8]
 8006f46:	6963      	ldr	r3, [r4, #20]
 8006f48:	425b      	negs	r3, r3
 8006f4a:	61a3      	str	r3, [r4, #24]
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	b943      	cbnz	r3, 8006f62 <__swsetup_r+0xc6>
 8006f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f54:	d1ba      	bne.n	8006ecc <__swsetup_r+0x30>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	0781      	lsls	r1, r0, #30
 8006f5a:	bf58      	it	pl
 8006f5c:	6963      	ldrpl	r3, [r4, #20]
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	e7f4      	b.n	8006f4c <__swsetup_r+0xb0>
 8006f62:	2000      	movs	r0, #0
 8006f64:	e7f7      	b.n	8006f56 <__swsetup_r+0xba>
 8006f66:	bf00      	nop
 8006f68:	20000048 	.word	0x20000048
 8006f6c:	0800a484 	.word	0x0800a484
 8006f70:	0800a4a4 	.word	0x0800a4a4
 8006f74:	0800a464 	.word	0x0800a464

08006f78 <_close_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4d05      	ldr	r5, [pc, #20]	; (8006f94 <_close_r+0x1c>)
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	f7fb fb4e 	bl	8002624 <_close>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_close_r+0x1a>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_close_r+0x1a>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	2000087c 	.word	0x2000087c

08006f98 <quorem>:
 8006f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	6903      	ldr	r3, [r0, #16]
 8006f9e:	690c      	ldr	r4, [r1, #16]
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	f2c0 8083 	blt.w	80070ae <quorem+0x116>
 8006fa8:	3c01      	subs	r4, #1
 8006faa:	f100 0514 	add.w	r5, r0, #20
 8006fae:	f101 0814 	add.w	r8, r1, #20
 8006fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fd0:	d332      	bcc.n	8007038 <quorem+0xa0>
 8006fd2:	f04f 0e00 	mov.w	lr, #0
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	46ac      	mov	ip, r5
 8006fda:	46f2      	mov	sl, lr
 8006fdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fe0:	b293      	uxth	r3, r2
 8006fe2:	fb06 e303 	mla	r3, r6, r3, lr
 8006fe6:	0c12      	lsrs	r2, r2, #16
 8006fe8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fec:	fb06 e202 	mla	r2, r6, r2, lr
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ff6:	f8dc a000 	ldr.w	sl, [ip]
 8006ffa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ffe:	fa1f fa8a 	uxth.w	sl, sl
 8007002:	4453      	add	r3, sl
 8007004:	fa1f fa82 	uxth.w	sl, r2
 8007008:	f8dc 2000 	ldr.w	r2, [ip]
 800700c:	4581      	cmp	r9, r0
 800700e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007012:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007016:	b29b      	uxth	r3, r3
 8007018:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800701c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007020:	f84c 3b04 	str.w	r3, [ip], #4
 8007024:	d2da      	bcs.n	8006fdc <quorem+0x44>
 8007026:	f855 300b 	ldr.w	r3, [r5, fp]
 800702a:	b92b      	cbnz	r3, 8007038 <quorem+0xa0>
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	3b04      	subs	r3, #4
 8007030:	429d      	cmp	r5, r3
 8007032:	461a      	mov	r2, r3
 8007034:	d32f      	bcc.n	8007096 <quorem+0xfe>
 8007036:	613c      	str	r4, [r7, #16]
 8007038:	4638      	mov	r0, r7
 800703a:	f001 feb7 	bl	8008dac <__mcmp>
 800703e:	2800      	cmp	r0, #0
 8007040:	db25      	blt.n	800708e <quorem+0xf6>
 8007042:	4628      	mov	r0, r5
 8007044:	f04f 0c00 	mov.w	ip, #0
 8007048:	3601      	adds	r6, #1
 800704a:	f858 1b04 	ldr.w	r1, [r8], #4
 800704e:	f8d0 e000 	ldr.w	lr, [r0]
 8007052:	b28b      	uxth	r3, r1
 8007054:	ebac 0303 	sub.w	r3, ip, r3
 8007058:	fa1f f28e 	uxth.w	r2, lr
 800705c:	4413      	add	r3, r2
 800705e:	0c0a      	lsrs	r2, r1, #16
 8007060:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007068:	b29b      	uxth	r3, r3
 800706a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800706e:	45c1      	cmp	r9, r8
 8007070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007074:	f840 3b04 	str.w	r3, [r0], #4
 8007078:	d2e7      	bcs.n	800704a <quorem+0xb2>
 800707a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800707e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007082:	b922      	cbnz	r2, 800708e <quorem+0xf6>
 8007084:	3b04      	subs	r3, #4
 8007086:	429d      	cmp	r5, r3
 8007088:	461a      	mov	r2, r3
 800708a:	d30a      	bcc.n	80070a2 <quorem+0x10a>
 800708c:	613c      	str	r4, [r7, #16]
 800708e:	4630      	mov	r0, r6
 8007090:	b003      	add	sp, #12
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	3b04      	subs	r3, #4
 800709a:	2a00      	cmp	r2, #0
 800709c:	d1cb      	bne.n	8007036 <quorem+0x9e>
 800709e:	3c01      	subs	r4, #1
 80070a0:	e7c6      	b.n	8007030 <quorem+0x98>
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	3b04      	subs	r3, #4
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	d1f0      	bne.n	800708c <quorem+0xf4>
 80070aa:	3c01      	subs	r4, #1
 80070ac:	e7eb      	b.n	8007086 <quorem+0xee>
 80070ae:	2000      	movs	r0, #0
 80070b0:	e7ee      	b.n	8007090 <quorem+0xf8>
 80070b2:	0000      	movs	r0, r0
 80070b4:	0000      	movs	r0, r0
	...

080070b8 <_dtoa_r>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	4616      	mov	r6, r2
 80070be:	461f      	mov	r7, r3
 80070c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80070c2:	b099      	sub	sp, #100	; 0x64
 80070c4:	4605      	mov	r5, r0
 80070c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80070ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80070ce:	b974      	cbnz	r4, 80070ee <_dtoa_r+0x36>
 80070d0:	2010      	movs	r0, #16
 80070d2:	f7fd ff69 	bl	8004fa8 <malloc>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6268      	str	r0, [r5, #36]	; 0x24
 80070da:	b920      	cbnz	r0, 80070e6 <_dtoa_r+0x2e>
 80070dc:	21ea      	movs	r1, #234	; 0xea
 80070de:	4bae      	ldr	r3, [pc, #696]	; (8007398 <_dtoa_r+0x2e0>)
 80070e0:	48ae      	ldr	r0, [pc, #696]	; (800739c <_dtoa_r+0x2e4>)
 80070e2:	f002 fe1b 	bl	8009d1c <__assert_func>
 80070e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070ea:	6004      	str	r4, [r0, #0]
 80070ec:	60c4      	str	r4, [r0, #12]
 80070ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070f0:	6819      	ldr	r1, [r3, #0]
 80070f2:	b151      	cbz	r1, 800710a <_dtoa_r+0x52>
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	2301      	movs	r3, #1
 80070f8:	4093      	lsls	r3, r2
 80070fa:	604a      	str	r2, [r1, #4]
 80070fc:	608b      	str	r3, [r1, #8]
 80070fe:	4628      	mov	r0, r5
 8007100:	f001 fbd0 	bl	80088a4 <_Bfree>
 8007104:	2200      	movs	r2, #0
 8007106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	1e3b      	subs	r3, r7, #0
 800710c:	bfaf      	iteee	ge
 800710e:	2300      	movge	r3, #0
 8007110:	2201      	movlt	r2, #1
 8007112:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007116:	9305      	strlt	r3, [sp, #20]
 8007118:	bfa8      	it	ge
 800711a:	f8c8 3000 	strge.w	r3, [r8]
 800711e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007122:	4b9f      	ldr	r3, [pc, #636]	; (80073a0 <_dtoa_r+0x2e8>)
 8007124:	bfb8      	it	lt
 8007126:	f8c8 2000 	strlt.w	r2, [r8]
 800712a:	ea33 0309 	bics.w	r3, r3, r9
 800712e:	d119      	bne.n	8007164 <_dtoa_r+0xac>
 8007130:	f242 730f 	movw	r3, #9999	; 0x270f
 8007134:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800713c:	4333      	orrs	r3, r6
 800713e:	f000 8580 	beq.w	8007c42 <_dtoa_r+0xb8a>
 8007142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007144:	b953      	cbnz	r3, 800715c <_dtoa_r+0xa4>
 8007146:	4b97      	ldr	r3, [pc, #604]	; (80073a4 <_dtoa_r+0x2ec>)
 8007148:	e022      	b.n	8007190 <_dtoa_r+0xd8>
 800714a:	4b97      	ldr	r3, [pc, #604]	; (80073a8 <_dtoa_r+0x2f0>)
 800714c:	9308      	str	r3, [sp, #32]
 800714e:	3308      	adds	r3, #8
 8007150:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	9808      	ldr	r0, [sp, #32]
 8007156:	b019      	add	sp, #100	; 0x64
 8007158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715c:	4b91      	ldr	r3, [pc, #580]	; (80073a4 <_dtoa_r+0x2ec>)
 800715e:	9308      	str	r3, [sp, #32]
 8007160:	3303      	adds	r3, #3
 8007162:	e7f5      	b.n	8007150 <_dtoa_r+0x98>
 8007164:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007168:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800716c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007170:	2200      	movs	r2, #0
 8007172:	2300      	movs	r3, #0
 8007174:	f7f9 fc84 	bl	8000a80 <__aeabi_dcmpeq>
 8007178:	4680      	mov	r8, r0
 800717a:	b158      	cbz	r0, 8007194 <_dtoa_r+0xdc>
 800717c:	2301      	movs	r3, #1
 800717e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8559 	beq.w	8007c3c <_dtoa_r+0xb84>
 800718a:	4888      	ldr	r0, [pc, #544]	; (80073ac <_dtoa_r+0x2f4>)
 800718c:	6018      	str	r0, [r3, #0]
 800718e:	1e43      	subs	r3, r0, #1
 8007190:	9308      	str	r3, [sp, #32]
 8007192:	e7df      	b.n	8007154 <_dtoa_r+0x9c>
 8007194:	ab16      	add	r3, sp, #88	; 0x58
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	ab17      	add	r3, sp, #92	; 0x5c
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4628      	mov	r0, r5
 800719e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071a2:	f001 ff29 	bl	8008ff8 <__d2b>
 80071a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071aa:	4682      	mov	sl, r0
 80071ac:	2c00      	cmp	r4, #0
 80071ae:	d07e      	beq.n	80072ae <_dtoa_r+0x1f6>
 80071b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80071c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80071c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80071ca:	2200      	movs	r2, #0
 80071cc:	4b78      	ldr	r3, [pc, #480]	; (80073b0 <_dtoa_r+0x2f8>)
 80071ce:	f7f9 f837 	bl	8000240 <__aeabi_dsub>
 80071d2:	a36b      	add	r3, pc, #428	; (adr r3, 8007380 <_dtoa_r+0x2c8>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 f9ea 	bl	80005b0 <__aeabi_dmul>
 80071dc:	a36a      	add	r3, pc, #424	; (adr r3, 8007388 <_dtoa_r+0x2d0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 f82f 	bl	8000244 <__adddf3>
 80071e6:	4606      	mov	r6, r0
 80071e8:	4620      	mov	r0, r4
 80071ea:	460f      	mov	r7, r1
 80071ec:	f7f9 f976 	bl	80004dc <__aeabi_i2d>
 80071f0:	a367      	add	r3, pc, #412	; (adr r3, 8007390 <_dtoa_r+0x2d8>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f7f9 f9db 	bl	80005b0 <__aeabi_dmul>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4630      	mov	r0, r6
 8007200:	4639      	mov	r1, r7
 8007202:	f7f9 f81f 	bl	8000244 <__adddf3>
 8007206:	4606      	mov	r6, r0
 8007208:	460f      	mov	r7, r1
 800720a:	f7f9 fc81 	bl	8000b10 <__aeabi_d2iz>
 800720e:	2200      	movs	r2, #0
 8007210:	4681      	mov	r9, r0
 8007212:	2300      	movs	r3, #0
 8007214:	4630      	mov	r0, r6
 8007216:	4639      	mov	r1, r7
 8007218:	f7f9 fc3c 	bl	8000a94 <__aeabi_dcmplt>
 800721c:	b148      	cbz	r0, 8007232 <_dtoa_r+0x17a>
 800721e:	4648      	mov	r0, r9
 8007220:	f7f9 f95c 	bl	80004dc <__aeabi_i2d>
 8007224:	4632      	mov	r2, r6
 8007226:	463b      	mov	r3, r7
 8007228:	f7f9 fc2a 	bl	8000a80 <__aeabi_dcmpeq>
 800722c:	b908      	cbnz	r0, 8007232 <_dtoa_r+0x17a>
 800722e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007232:	f1b9 0f16 	cmp.w	r9, #22
 8007236:	d857      	bhi.n	80072e8 <_dtoa_r+0x230>
 8007238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800723c:	4b5d      	ldr	r3, [pc, #372]	; (80073b4 <_dtoa_r+0x2fc>)
 800723e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	f7f9 fc25 	bl	8000a94 <__aeabi_dcmplt>
 800724a:	2800      	cmp	r0, #0
 800724c:	d04e      	beq.n	80072ec <_dtoa_r+0x234>
 800724e:	2300      	movs	r3, #0
 8007250:	f109 39ff 	add.w	r9, r9, #4294967295
 8007254:	930f      	str	r3, [sp, #60]	; 0x3c
 8007256:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007258:	1b1c      	subs	r4, r3, r4
 800725a:	1e63      	subs	r3, r4, #1
 800725c:	9309      	str	r3, [sp, #36]	; 0x24
 800725e:	bf49      	itett	mi
 8007260:	f1c4 0301 	rsbmi	r3, r4, #1
 8007264:	2300      	movpl	r3, #0
 8007266:	9306      	strmi	r3, [sp, #24]
 8007268:	2300      	movmi	r3, #0
 800726a:	bf54      	ite	pl
 800726c:	9306      	strpl	r3, [sp, #24]
 800726e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007270:	f1b9 0f00 	cmp.w	r9, #0
 8007274:	db3c      	blt.n	80072f0 <_dtoa_r+0x238>
 8007276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007278:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800727c:	444b      	add	r3, r9
 800727e:	9309      	str	r3, [sp, #36]	; 0x24
 8007280:	2300      	movs	r3, #0
 8007282:	930a      	str	r3, [sp, #40]	; 0x28
 8007284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007286:	2b09      	cmp	r3, #9
 8007288:	d86c      	bhi.n	8007364 <_dtoa_r+0x2ac>
 800728a:	2b05      	cmp	r3, #5
 800728c:	bfc4      	itt	gt
 800728e:	3b04      	subgt	r3, #4
 8007290:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007292:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007294:	bfc8      	it	gt
 8007296:	2400      	movgt	r4, #0
 8007298:	f1a3 0302 	sub.w	r3, r3, #2
 800729c:	bfd8      	it	le
 800729e:	2401      	movle	r4, #1
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	f200 808b 	bhi.w	80073bc <_dtoa_r+0x304>
 80072a6:	e8df f003 	tbb	[pc, r3]
 80072aa:	4f2d      	.short	0x4f2d
 80072ac:	5b4d      	.short	0x5b4d
 80072ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80072b2:	441c      	add	r4, r3
 80072b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	bfc3      	ittte	gt
 80072bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80072c4:	fa09 f303 	lslgt.w	r3, r9, r3
 80072c8:	f1c3 0320 	rsble	r3, r3, #32
 80072cc:	bfc6      	itte	gt
 80072ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072d2:	4318      	orrgt	r0, r3
 80072d4:	fa06 f003 	lslle.w	r0, r6, r3
 80072d8:	f7f9 f8f0 	bl	80004bc <__aeabi_ui2d>
 80072dc:	2301      	movs	r3, #1
 80072de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80072e2:	3c01      	subs	r4, #1
 80072e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80072e6:	e770      	b.n	80071ca <_dtoa_r+0x112>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e7b3      	b.n	8007254 <_dtoa_r+0x19c>
 80072ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80072ee:	e7b2      	b.n	8007256 <_dtoa_r+0x19e>
 80072f0:	9b06      	ldr	r3, [sp, #24]
 80072f2:	eba3 0309 	sub.w	r3, r3, r9
 80072f6:	9306      	str	r3, [sp, #24]
 80072f8:	f1c9 0300 	rsb	r3, r9, #0
 80072fc:	930a      	str	r3, [sp, #40]	; 0x28
 80072fe:	2300      	movs	r3, #0
 8007300:	930e      	str	r3, [sp, #56]	; 0x38
 8007302:	e7bf      	b.n	8007284 <_dtoa_r+0x1cc>
 8007304:	2300      	movs	r3, #0
 8007306:	930b      	str	r3, [sp, #44]	; 0x2c
 8007308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800730a:	2b00      	cmp	r3, #0
 800730c:	dc59      	bgt.n	80073c2 <_dtoa_r+0x30a>
 800730e:	f04f 0b01 	mov.w	fp, #1
 8007312:	465b      	mov	r3, fp
 8007314:	f8cd b008 	str.w	fp, [sp, #8]
 8007318:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800731c:	2200      	movs	r2, #0
 800731e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007320:	6042      	str	r2, [r0, #4]
 8007322:	2204      	movs	r2, #4
 8007324:	f102 0614 	add.w	r6, r2, #20
 8007328:	429e      	cmp	r6, r3
 800732a:	6841      	ldr	r1, [r0, #4]
 800732c:	d94f      	bls.n	80073ce <_dtoa_r+0x316>
 800732e:	4628      	mov	r0, r5
 8007330:	f001 fa78 	bl	8008824 <_Balloc>
 8007334:	9008      	str	r0, [sp, #32]
 8007336:	2800      	cmp	r0, #0
 8007338:	d14d      	bne.n	80073d6 <_dtoa_r+0x31e>
 800733a:	4602      	mov	r2, r0
 800733c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007340:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <_dtoa_r+0x300>)
 8007342:	e6cd      	b.n	80070e0 <_dtoa_r+0x28>
 8007344:	2301      	movs	r3, #1
 8007346:	e7de      	b.n	8007306 <_dtoa_r+0x24e>
 8007348:	2300      	movs	r3, #0
 800734a:	930b      	str	r3, [sp, #44]	; 0x2c
 800734c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800734e:	eb09 0b03 	add.w	fp, r9, r3
 8007352:	f10b 0301 	add.w	r3, fp, #1
 8007356:	2b01      	cmp	r3, #1
 8007358:	9302      	str	r3, [sp, #8]
 800735a:	bfb8      	it	lt
 800735c:	2301      	movlt	r3, #1
 800735e:	e7dd      	b.n	800731c <_dtoa_r+0x264>
 8007360:	2301      	movs	r3, #1
 8007362:	e7f2      	b.n	800734a <_dtoa_r+0x292>
 8007364:	2401      	movs	r4, #1
 8007366:	2300      	movs	r3, #0
 8007368:	940b      	str	r4, [sp, #44]	; 0x2c
 800736a:	9322      	str	r3, [sp, #136]	; 0x88
 800736c:	f04f 3bff 	mov.w	fp, #4294967295
 8007370:	2200      	movs	r2, #0
 8007372:	2312      	movs	r3, #18
 8007374:	f8cd b008 	str.w	fp, [sp, #8]
 8007378:	9223      	str	r2, [sp, #140]	; 0x8c
 800737a:	e7cf      	b.n	800731c <_dtoa_r+0x264>
 800737c:	f3af 8000 	nop.w
 8007380:	636f4361 	.word	0x636f4361
 8007384:	3fd287a7 	.word	0x3fd287a7
 8007388:	8b60c8b3 	.word	0x8b60c8b3
 800738c:	3fc68a28 	.word	0x3fc68a28
 8007390:	509f79fb 	.word	0x509f79fb
 8007394:	3fd34413 	.word	0x3fd34413
 8007398:	0800a3dd 	.word	0x0800a3dd
 800739c:	0800a3f4 	.word	0x0800a3f4
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	0800a3d9 	.word	0x0800a3d9
 80073a8:	0800a3d0 	.word	0x0800a3d0
 80073ac:	0800a6ba 	.word	0x0800a6ba
 80073b0:	3ff80000 	.word	0x3ff80000
 80073b4:	0800a5d0 	.word	0x0800a5d0
 80073b8:	0800a453 	.word	0x0800a453
 80073bc:	2301      	movs	r3, #1
 80073be:	930b      	str	r3, [sp, #44]	; 0x2c
 80073c0:	e7d4      	b.n	800736c <_dtoa_r+0x2b4>
 80073c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80073c6:	465b      	mov	r3, fp
 80073c8:	f8cd b008 	str.w	fp, [sp, #8]
 80073cc:	e7a6      	b.n	800731c <_dtoa_r+0x264>
 80073ce:	3101      	adds	r1, #1
 80073d0:	6041      	str	r1, [r0, #4]
 80073d2:	0052      	lsls	r2, r2, #1
 80073d4:	e7a6      	b.n	8007324 <_dtoa_r+0x26c>
 80073d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073d8:	9a08      	ldr	r2, [sp, #32]
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	2b0e      	cmp	r3, #14
 80073e0:	f200 80a8 	bhi.w	8007534 <_dtoa_r+0x47c>
 80073e4:	2c00      	cmp	r4, #0
 80073e6:	f000 80a5 	beq.w	8007534 <_dtoa_r+0x47c>
 80073ea:	f1b9 0f00 	cmp.w	r9, #0
 80073ee:	dd34      	ble.n	800745a <_dtoa_r+0x3a2>
 80073f0:	4a9a      	ldr	r2, [pc, #616]	; (800765c <_dtoa_r+0x5a4>)
 80073f2:	f009 030f 	and.w	r3, r9, #15
 80073f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80073fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007402:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007406:	ea4f 1429 	mov.w	r4, r9, asr #4
 800740a:	d016      	beq.n	800743a <_dtoa_r+0x382>
 800740c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007410:	4b93      	ldr	r3, [pc, #588]	; (8007660 <_dtoa_r+0x5a8>)
 8007412:	2703      	movs	r7, #3
 8007414:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007418:	f7f9 f9f4 	bl	8000804 <__aeabi_ddiv>
 800741c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007420:	f004 040f 	and.w	r4, r4, #15
 8007424:	4e8e      	ldr	r6, [pc, #568]	; (8007660 <_dtoa_r+0x5a8>)
 8007426:	b954      	cbnz	r4, 800743e <_dtoa_r+0x386>
 8007428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800742c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007430:	f7f9 f9e8 	bl	8000804 <__aeabi_ddiv>
 8007434:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007438:	e029      	b.n	800748e <_dtoa_r+0x3d6>
 800743a:	2702      	movs	r7, #2
 800743c:	e7f2      	b.n	8007424 <_dtoa_r+0x36c>
 800743e:	07e1      	lsls	r1, r4, #31
 8007440:	d508      	bpl.n	8007454 <_dtoa_r+0x39c>
 8007442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007446:	e9d6 2300 	ldrd	r2, r3, [r6]
 800744a:	f7f9 f8b1 	bl	80005b0 <__aeabi_dmul>
 800744e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007452:	3701      	adds	r7, #1
 8007454:	1064      	asrs	r4, r4, #1
 8007456:	3608      	adds	r6, #8
 8007458:	e7e5      	b.n	8007426 <_dtoa_r+0x36e>
 800745a:	f000 80a5 	beq.w	80075a8 <_dtoa_r+0x4f0>
 800745e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007462:	f1c9 0400 	rsb	r4, r9, #0
 8007466:	4b7d      	ldr	r3, [pc, #500]	; (800765c <_dtoa_r+0x5a4>)
 8007468:	f004 020f 	and.w	r2, r4, #15
 800746c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f7f9 f89c 	bl	80005b0 <__aeabi_dmul>
 8007478:	2702      	movs	r7, #2
 800747a:	2300      	movs	r3, #0
 800747c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007480:	4e77      	ldr	r6, [pc, #476]	; (8007660 <_dtoa_r+0x5a8>)
 8007482:	1124      	asrs	r4, r4, #4
 8007484:	2c00      	cmp	r4, #0
 8007486:	f040 8084 	bne.w	8007592 <_dtoa_r+0x4da>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1d2      	bne.n	8007434 <_dtoa_r+0x37c>
 800748e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 808b 	beq.w	80075ac <_dtoa_r+0x4f4>
 8007496:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800749a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800749e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074a2:	2200      	movs	r2, #0
 80074a4:	4b6f      	ldr	r3, [pc, #444]	; (8007664 <_dtoa_r+0x5ac>)
 80074a6:	f7f9 faf5 	bl	8000a94 <__aeabi_dcmplt>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d07e      	beq.n	80075ac <_dtoa_r+0x4f4>
 80074ae:	9b02      	ldr	r3, [sp, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d07b      	beq.n	80075ac <_dtoa_r+0x4f4>
 80074b4:	f1bb 0f00 	cmp.w	fp, #0
 80074b8:	dd38      	ble.n	800752c <_dtoa_r+0x474>
 80074ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074be:	2200      	movs	r2, #0
 80074c0:	4b69      	ldr	r3, [pc, #420]	; (8007668 <_dtoa_r+0x5b0>)
 80074c2:	f7f9 f875 	bl	80005b0 <__aeabi_dmul>
 80074c6:	465c      	mov	r4, fp
 80074c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074cc:	f109 38ff 	add.w	r8, r9, #4294967295
 80074d0:	3701      	adds	r7, #1
 80074d2:	4638      	mov	r0, r7
 80074d4:	f7f9 f802 	bl	80004dc <__aeabi_i2d>
 80074d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074dc:	f7f9 f868 	bl	80005b0 <__aeabi_dmul>
 80074e0:	2200      	movs	r2, #0
 80074e2:	4b62      	ldr	r3, [pc, #392]	; (800766c <_dtoa_r+0x5b4>)
 80074e4:	f7f8 feae 	bl	8000244 <__adddf3>
 80074e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074f0:	9611      	str	r6, [sp, #68]	; 0x44
 80074f2:	2c00      	cmp	r4, #0
 80074f4:	d15d      	bne.n	80075b2 <_dtoa_r+0x4fa>
 80074f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074fa:	2200      	movs	r2, #0
 80074fc:	4b5c      	ldr	r3, [pc, #368]	; (8007670 <_dtoa_r+0x5b8>)
 80074fe:	f7f8 fe9f 	bl	8000240 <__aeabi_dsub>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800750a:	4633      	mov	r3, r6
 800750c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800750e:	f7f9 fadf 	bl	8000ad0 <__aeabi_dcmpgt>
 8007512:	2800      	cmp	r0, #0
 8007514:	f040 829e 	bne.w	8007a54 <_dtoa_r+0x99c>
 8007518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800751e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007522:	f7f9 fab7 	bl	8000a94 <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	f040 8292 	bne.w	8007a50 <_dtoa_r+0x998>
 800752c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007530:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007536:	2b00      	cmp	r3, #0
 8007538:	f2c0 8153 	blt.w	80077e2 <_dtoa_r+0x72a>
 800753c:	f1b9 0f0e 	cmp.w	r9, #14
 8007540:	f300 814f 	bgt.w	80077e2 <_dtoa_r+0x72a>
 8007544:	4b45      	ldr	r3, [pc, #276]	; (800765c <_dtoa_r+0x5a4>)
 8007546:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800754a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800754e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007552:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007554:	2b00      	cmp	r3, #0
 8007556:	f280 80db 	bge.w	8007710 <_dtoa_r+0x658>
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f300 80d7 	bgt.w	8007710 <_dtoa_r+0x658>
 8007562:	f040 8274 	bne.w	8007a4e <_dtoa_r+0x996>
 8007566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800756a:	2200      	movs	r2, #0
 800756c:	4b40      	ldr	r3, [pc, #256]	; (8007670 <_dtoa_r+0x5b8>)
 800756e:	f7f9 f81f 	bl	80005b0 <__aeabi_dmul>
 8007572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007576:	f7f9 faa1 	bl	8000abc <__aeabi_dcmpge>
 800757a:	9c02      	ldr	r4, [sp, #8]
 800757c:	4626      	mov	r6, r4
 800757e:	2800      	cmp	r0, #0
 8007580:	f040 824a 	bne.w	8007a18 <_dtoa_r+0x960>
 8007584:	2331      	movs	r3, #49	; 0x31
 8007586:	9f08      	ldr	r7, [sp, #32]
 8007588:	f109 0901 	add.w	r9, r9, #1
 800758c:	f807 3b01 	strb.w	r3, [r7], #1
 8007590:	e246      	b.n	8007a20 <_dtoa_r+0x968>
 8007592:	07e2      	lsls	r2, r4, #31
 8007594:	d505      	bpl.n	80075a2 <_dtoa_r+0x4ea>
 8007596:	e9d6 2300 	ldrd	r2, r3, [r6]
 800759a:	f7f9 f809 	bl	80005b0 <__aeabi_dmul>
 800759e:	2301      	movs	r3, #1
 80075a0:	3701      	adds	r7, #1
 80075a2:	1064      	asrs	r4, r4, #1
 80075a4:	3608      	adds	r6, #8
 80075a6:	e76d      	b.n	8007484 <_dtoa_r+0x3cc>
 80075a8:	2702      	movs	r7, #2
 80075aa:	e770      	b.n	800748e <_dtoa_r+0x3d6>
 80075ac:	46c8      	mov	r8, r9
 80075ae:	9c02      	ldr	r4, [sp, #8]
 80075b0:	e78f      	b.n	80074d2 <_dtoa_r+0x41a>
 80075b2:	9908      	ldr	r1, [sp, #32]
 80075b4:	4b29      	ldr	r3, [pc, #164]	; (800765c <_dtoa_r+0x5a4>)
 80075b6:	4421      	add	r1, r4
 80075b8:	9112      	str	r1, [sp, #72]	; 0x48
 80075ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80075c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075c8:	2900      	cmp	r1, #0
 80075ca:	d055      	beq.n	8007678 <_dtoa_r+0x5c0>
 80075cc:	2000      	movs	r0, #0
 80075ce:	4929      	ldr	r1, [pc, #164]	; (8007674 <_dtoa_r+0x5bc>)
 80075d0:	f7f9 f918 	bl	8000804 <__aeabi_ddiv>
 80075d4:	463b      	mov	r3, r7
 80075d6:	4632      	mov	r2, r6
 80075d8:	f7f8 fe32 	bl	8000240 <__aeabi_dsub>
 80075dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075e0:	9f08      	ldr	r7, [sp, #32]
 80075e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e6:	f7f9 fa93 	bl	8000b10 <__aeabi_d2iz>
 80075ea:	4604      	mov	r4, r0
 80075ec:	f7f8 ff76 	bl	80004dc <__aeabi_i2d>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f8:	f7f8 fe22 	bl	8000240 <__aeabi_dsub>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	3430      	adds	r4, #48	; 0x30
 8007602:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800760a:	f807 4b01 	strb.w	r4, [r7], #1
 800760e:	f7f9 fa41 	bl	8000a94 <__aeabi_dcmplt>
 8007612:	2800      	cmp	r0, #0
 8007614:	d174      	bne.n	8007700 <_dtoa_r+0x648>
 8007616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800761a:	2000      	movs	r0, #0
 800761c:	4911      	ldr	r1, [pc, #68]	; (8007664 <_dtoa_r+0x5ac>)
 800761e:	f7f8 fe0f 	bl	8000240 <__aeabi_dsub>
 8007622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007626:	f7f9 fa35 	bl	8000a94 <__aeabi_dcmplt>
 800762a:	2800      	cmp	r0, #0
 800762c:	f040 80b6 	bne.w	800779c <_dtoa_r+0x6e4>
 8007630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007632:	429f      	cmp	r7, r3
 8007634:	f43f af7a 	beq.w	800752c <_dtoa_r+0x474>
 8007638:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800763c:	2200      	movs	r2, #0
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <_dtoa_r+0x5b0>)
 8007640:	f7f8 ffb6 	bl	80005b0 <__aeabi_dmul>
 8007644:	2200      	movs	r2, #0
 8007646:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800764a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800764e:	4b06      	ldr	r3, [pc, #24]	; (8007668 <_dtoa_r+0x5b0>)
 8007650:	f7f8 ffae 	bl	80005b0 <__aeabi_dmul>
 8007654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007658:	e7c3      	b.n	80075e2 <_dtoa_r+0x52a>
 800765a:	bf00      	nop
 800765c:	0800a5d0 	.word	0x0800a5d0
 8007660:	0800a5a8 	.word	0x0800a5a8
 8007664:	3ff00000 	.word	0x3ff00000
 8007668:	40240000 	.word	0x40240000
 800766c:	401c0000 	.word	0x401c0000
 8007670:	40140000 	.word	0x40140000
 8007674:	3fe00000 	.word	0x3fe00000
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f8 ff98 	bl	80005b0 <__aeabi_dmul>
 8007680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007682:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007686:	9c08      	ldr	r4, [sp, #32]
 8007688:	9314      	str	r3, [sp, #80]	; 0x50
 800768a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800768e:	f7f9 fa3f 	bl	8000b10 <__aeabi_d2iz>
 8007692:	9015      	str	r0, [sp, #84]	; 0x54
 8007694:	f7f8 ff22 	bl	80004dc <__aeabi_i2d>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a0:	f7f8 fdce 	bl	8000240 <__aeabi_dsub>
 80076a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076a6:	4606      	mov	r6, r0
 80076a8:	3330      	adds	r3, #48	; 0x30
 80076aa:	f804 3b01 	strb.w	r3, [r4], #1
 80076ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076b0:	460f      	mov	r7, r1
 80076b2:	429c      	cmp	r4, r3
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	d124      	bne.n	8007704 <_dtoa_r+0x64c>
 80076ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076be:	4bb3      	ldr	r3, [pc, #716]	; (800798c <_dtoa_r+0x8d4>)
 80076c0:	f7f8 fdc0 	bl	8000244 <__adddf3>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4630      	mov	r0, r6
 80076ca:	4639      	mov	r1, r7
 80076cc:	f7f9 fa00 	bl	8000ad0 <__aeabi_dcmpgt>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d162      	bne.n	800779a <_dtoa_r+0x6e2>
 80076d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076d8:	2000      	movs	r0, #0
 80076da:	49ac      	ldr	r1, [pc, #688]	; (800798c <_dtoa_r+0x8d4>)
 80076dc:	f7f8 fdb0 	bl	8000240 <__aeabi_dsub>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4630      	mov	r0, r6
 80076e6:	4639      	mov	r1, r7
 80076e8:	f7f9 f9d4 	bl	8000a94 <__aeabi_dcmplt>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f43f af1d 	beq.w	800752c <_dtoa_r+0x474>
 80076f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076f4:	1e7b      	subs	r3, r7, #1
 80076f6:	9314      	str	r3, [sp, #80]	; 0x50
 80076f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80076fc:	2b30      	cmp	r3, #48	; 0x30
 80076fe:	d0f8      	beq.n	80076f2 <_dtoa_r+0x63a>
 8007700:	46c1      	mov	r9, r8
 8007702:	e03a      	b.n	800777a <_dtoa_r+0x6c2>
 8007704:	4ba2      	ldr	r3, [pc, #648]	; (8007990 <_dtoa_r+0x8d8>)
 8007706:	f7f8 ff53 	bl	80005b0 <__aeabi_dmul>
 800770a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800770e:	e7bc      	b.n	800768a <_dtoa_r+0x5d2>
 8007710:	9f08      	ldr	r7, [sp, #32]
 8007712:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771a:	f7f9 f873 	bl	8000804 <__aeabi_ddiv>
 800771e:	f7f9 f9f7 	bl	8000b10 <__aeabi_d2iz>
 8007722:	4604      	mov	r4, r0
 8007724:	f7f8 feda 	bl	80004dc <__aeabi_i2d>
 8007728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800772c:	f7f8 ff40 	bl	80005b0 <__aeabi_dmul>
 8007730:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007734:	460b      	mov	r3, r1
 8007736:	4602      	mov	r2, r0
 8007738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800773c:	f7f8 fd80 	bl	8000240 <__aeabi_dsub>
 8007740:	f807 6b01 	strb.w	r6, [r7], #1
 8007744:	9e08      	ldr	r6, [sp, #32]
 8007746:	9b02      	ldr	r3, [sp, #8]
 8007748:	1bbe      	subs	r6, r7, r6
 800774a:	42b3      	cmp	r3, r6
 800774c:	d13a      	bne.n	80077c4 <_dtoa_r+0x70c>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	f7f8 fd77 	bl	8000244 <__adddf3>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800775e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007762:	f7f9 f9b5 	bl	8000ad0 <__aeabi_dcmpgt>
 8007766:	bb58      	cbnz	r0, 80077c0 <_dtoa_r+0x708>
 8007768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800776c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007770:	f7f9 f986 	bl	8000a80 <__aeabi_dcmpeq>
 8007774:	b108      	cbz	r0, 800777a <_dtoa_r+0x6c2>
 8007776:	07e1      	lsls	r1, r4, #31
 8007778:	d422      	bmi.n	80077c0 <_dtoa_r+0x708>
 800777a:	4628      	mov	r0, r5
 800777c:	4651      	mov	r1, sl
 800777e:	f001 f891 	bl	80088a4 <_Bfree>
 8007782:	2300      	movs	r3, #0
 8007784:	703b      	strb	r3, [r7, #0]
 8007786:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007788:	f109 0001 	add.w	r0, r9, #1
 800778c:	6018      	str	r0, [r3, #0]
 800778e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007790:	2b00      	cmp	r3, #0
 8007792:	f43f acdf 	beq.w	8007154 <_dtoa_r+0x9c>
 8007796:	601f      	str	r7, [r3, #0]
 8007798:	e4dc      	b.n	8007154 <_dtoa_r+0x9c>
 800779a:	4627      	mov	r7, r4
 800779c:	463b      	mov	r3, r7
 800779e:	461f      	mov	r7, r3
 80077a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a4:	2a39      	cmp	r2, #57	; 0x39
 80077a6:	d107      	bne.n	80077b8 <_dtoa_r+0x700>
 80077a8:	9a08      	ldr	r2, [sp, #32]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d1f7      	bne.n	800779e <_dtoa_r+0x6e6>
 80077ae:	2230      	movs	r2, #48	; 0x30
 80077b0:	9908      	ldr	r1, [sp, #32]
 80077b2:	f108 0801 	add.w	r8, r8, #1
 80077b6:	700a      	strb	r2, [r1, #0]
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	3201      	adds	r2, #1
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e79f      	b.n	8007700 <_dtoa_r+0x648>
 80077c0:	46c8      	mov	r8, r9
 80077c2:	e7eb      	b.n	800779c <_dtoa_r+0x6e4>
 80077c4:	2200      	movs	r2, #0
 80077c6:	4b72      	ldr	r3, [pc, #456]	; (8007990 <_dtoa_r+0x8d8>)
 80077c8:	f7f8 fef2 	bl	80005b0 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	f7f9 f952 	bl	8000a80 <__aeabi_dcmpeq>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d098      	beq.n	8007712 <_dtoa_r+0x65a>
 80077e0:	e7cb      	b.n	800777a <_dtoa_r+0x6c2>
 80077e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	f000 80cd 	beq.w	8007984 <_dtoa_r+0x8cc>
 80077ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077ec:	2a01      	cmp	r2, #1
 80077ee:	f300 80af 	bgt.w	8007950 <_dtoa_r+0x898>
 80077f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077f4:	2a00      	cmp	r2, #0
 80077f6:	f000 80a7 	beq.w	8007948 <_dtoa_r+0x890>
 80077fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007800:	9f06      	ldr	r7, [sp, #24]
 8007802:	9a06      	ldr	r2, [sp, #24]
 8007804:	2101      	movs	r1, #1
 8007806:	441a      	add	r2, r3
 8007808:	9206      	str	r2, [sp, #24]
 800780a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800780c:	4628      	mov	r0, r5
 800780e:	441a      	add	r2, r3
 8007810:	9209      	str	r2, [sp, #36]	; 0x24
 8007812:	f001 f94b 	bl	8008aac <__i2b>
 8007816:	4606      	mov	r6, r0
 8007818:	2f00      	cmp	r7, #0
 800781a:	dd0c      	ble.n	8007836 <_dtoa_r+0x77e>
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	dd09      	ble.n	8007836 <_dtoa_r+0x77e>
 8007822:	42bb      	cmp	r3, r7
 8007824:	bfa8      	it	ge
 8007826:	463b      	movge	r3, r7
 8007828:	9a06      	ldr	r2, [sp, #24]
 800782a:	1aff      	subs	r7, r7, r3
 800782c:	1ad2      	subs	r2, r2, r3
 800782e:	9206      	str	r2, [sp, #24]
 8007830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	9309      	str	r3, [sp, #36]	; 0x24
 8007836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007838:	b1f3      	cbz	r3, 8007878 <_dtoa_r+0x7c0>
 800783a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80a9 	beq.w	8007994 <_dtoa_r+0x8dc>
 8007842:	2c00      	cmp	r4, #0
 8007844:	dd10      	ble.n	8007868 <_dtoa_r+0x7b0>
 8007846:	4631      	mov	r1, r6
 8007848:	4622      	mov	r2, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f001 f9e8 	bl	8008c20 <__pow5mult>
 8007850:	4652      	mov	r2, sl
 8007852:	4601      	mov	r1, r0
 8007854:	4606      	mov	r6, r0
 8007856:	4628      	mov	r0, r5
 8007858:	f001 f93e 	bl	8008ad8 <__multiply>
 800785c:	4680      	mov	r8, r0
 800785e:	4651      	mov	r1, sl
 8007860:	4628      	mov	r0, r5
 8007862:	f001 f81f 	bl	80088a4 <_Bfree>
 8007866:	46c2      	mov	sl, r8
 8007868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786a:	1b1a      	subs	r2, r3, r4
 800786c:	d004      	beq.n	8007878 <_dtoa_r+0x7c0>
 800786e:	4651      	mov	r1, sl
 8007870:	4628      	mov	r0, r5
 8007872:	f001 f9d5 	bl	8008c20 <__pow5mult>
 8007876:	4682      	mov	sl, r0
 8007878:	2101      	movs	r1, #1
 800787a:	4628      	mov	r0, r5
 800787c:	f001 f916 	bl	8008aac <__i2b>
 8007880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007882:	4604      	mov	r4, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	f340 8087 	ble.w	8007998 <_dtoa_r+0x8e0>
 800788a:	461a      	mov	r2, r3
 800788c:	4601      	mov	r1, r0
 800788e:	4628      	mov	r0, r5
 8007890:	f001 f9c6 	bl	8008c20 <__pow5mult>
 8007894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007896:	4604      	mov	r4, r0
 8007898:	2b01      	cmp	r3, #1
 800789a:	f340 8080 	ble.w	800799e <_dtoa_r+0x8e6>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078a8:	6918      	ldr	r0, [r3, #16]
 80078aa:	f001 f8b1 	bl	8008a10 <__hi0bits>
 80078ae:	f1c0 0020 	rsb	r0, r0, #32
 80078b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b4:	4418      	add	r0, r3
 80078b6:	f010 001f 	ands.w	r0, r0, #31
 80078ba:	f000 8092 	beq.w	80079e2 <_dtoa_r+0x92a>
 80078be:	f1c0 0320 	rsb	r3, r0, #32
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	f340 808a 	ble.w	80079dc <_dtoa_r+0x924>
 80078c8:	f1c0 001c 	rsb	r0, r0, #28
 80078cc:	9b06      	ldr	r3, [sp, #24]
 80078ce:	4407      	add	r7, r0
 80078d0:	4403      	add	r3, r0
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d6:	4403      	add	r3, r0
 80078d8:	9309      	str	r3, [sp, #36]	; 0x24
 80078da:	9b06      	ldr	r3, [sp, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dd05      	ble.n	80078ec <_dtoa_r+0x834>
 80078e0:	4651      	mov	r1, sl
 80078e2:	461a      	mov	r2, r3
 80078e4:	4628      	mov	r0, r5
 80078e6:	f001 f9f5 	bl	8008cd4 <__lshift>
 80078ea:	4682      	mov	sl, r0
 80078ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd05      	ble.n	80078fe <_dtoa_r+0x846>
 80078f2:	4621      	mov	r1, r4
 80078f4:	461a      	mov	r2, r3
 80078f6:	4628      	mov	r0, r5
 80078f8:	f001 f9ec 	bl	8008cd4 <__lshift>
 80078fc:	4604      	mov	r4, r0
 80078fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d070      	beq.n	80079e6 <_dtoa_r+0x92e>
 8007904:	4621      	mov	r1, r4
 8007906:	4650      	mov	r0, sl
 8007908:	f001 fa50 	bl	8008dac <__mcmp>
 800790c:	2800      	cmp	r0, #0
 800790e:	da6a      	bge.n	80079e6 <_dtoa_r+0x92e>
 8007910:	2300      	movs	r3, #0
 8007912:	4651      	mov	r1, sl
 8007914:	220a      	movs	r2, #10
 8007916:	4628      	mov	r0, r5
 8007918:	f000 ffe6 	bl	80088e8 <__multadd>
 800791c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800791e:	4682      	mov	sl, r0
 8007920:	f109 39ff 	add.w	r9, r9, #4294967295
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8193 	beq.w	8007c50 <_dtoa_r+0xb98>
 800792a:	4631      	mov	r1, r6
 800792c:	2300      	movs	r3, #0
 800792e:	220a      	movs	r2, #10
 8007930:	4628      	mov	r0, r5
 8007932:	f000 ffd9 	bl	80088e8 <__multadd>
 8007936:	f1bb 0f00 	cmp.w	fp, #0
 800793a:	4606      	mov	r6, r0
 800793c:	f300 8093 	bgt.w	8007a66 <_dtoa_r+0x9ae>
 8007940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007942:	2b02      	cmp	r3, #2
 8007944:	dc57      	bgt.n	80079f6 <_dtoa_r+0x93e>
 8007946:	e08e      	b.n	8007a66 <_dtoa_r+0x9ae>
 8007948:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800794a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800794e:	e756      	b.n	80077fe <_dtoa_r+0x746>
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	1e5c      	subs	r4, r3, #1
 8007954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007956:	42a3      	cmp	r3, r4
 8007958:	bfb7      	itett	lt
 800795a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800795c:	1b1c      	subge	r4, r3, r4
 800795e:	1ae2      	sublt	r2, r4, r3
 8007960:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007962:	bfbe      	ittt	lt
 8007964:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007966:	189b      	addlt	r3, r3, r2
 8007968:	930e      	strlt	r3, [sp, #56]	; 0x38
 800796a:	9b02      	ldr	r3, [sp, #8]
 800796c:	bfb8      	it	lt
 800796e:	2400      	movlt	r4, #0
 8007970:	2b00      	cmp	r3, #0
 8007972:	bfbb      	ittet	lt
 8007974:	9b06      	ldrlt	r3, [sp, #24]
 8007976:	9a02      	ldrlt	r2, [sp, #8]
 8007978:	9f06      	ldrge	r7, [sp, #24]
 800797a:	1a9f      	sublt	r7, r3, r2
 800797c:	bfac      	ite	ge
 800797e:	9b02      	ldrge	r3, [sp, #8]
 8007980:	2300      	movlt	r3, #0
 8007982:	e73e      	b.n	8007802 <_dtoa_r+0x74a>
 8007984:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007986:	9f06      	ldr	r7, [sp, #24]
 8007988:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800798a:	e745      	b.n	8007818 <_dtoa_r+0x760>
 800798c:	3fe00000 	.word	0x3fe00000
 8007990:	40240000 	.word	0x40240000
 8007994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007996:	e76a      	b.n	800786e <_dtoa_r+0x7b6>
 8007998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800799a:	2b01      	cmp	r3, #1
 800799c:	dc19      	bgt.n	80079d2 <_dtoa_r+0x91a>
 800799e:	9b04      	ldr	r3, [sp, #16]
 80079a0:	b9bb      	cbnz	r3, 80079d2 <_dtoa_r+0x91a>
 80079a2:	9b05      	ldr	r3, [sp, #20]
 80079a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a8:	b99b      	cbnz	r3, 80079d2 <_dtoa_r+0x91a>
 80079aa:	9b05      	ldr	r3, [sp, #20]
 80079ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	b183      	cbz	r3, 80079d8 <_dtoa_r+0x920>
 80079b6:	f04f 0801 	mov.w	r8, #1
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	3301      	adds	r3, #1
 80079be:	9306      	str	r3, [sp, #24]
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	3301      	adds	r3, #1
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f af6a 	bne.w	80078a2 <_dtoa_r+0x7ea>
 80079ce:	2001      	movs	r0, #1
 80079d0:	e76f      	b.n	80078b2 <_dtoa_r+0x7fa>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	e7f6      	b.n	80079c6 <_dtoa_r+0x90e>
 80079d8:	4698      	mov	r8, r3
 80079da:	e7f4      	b.n	80079c6 <_dtoa_r+0x90e>
 80079dc:	f43f af7d 	beq.w	80078da <_dtoa_r+0x822>
 80079e0:	4618      	mov	r0, r3
 80079e2:	301c      	adds	r0, #28
 80079e4:	e772      	b.n	80078cc <_dtoa_r+0x814>
 80079e6:	9b02      	ldr	r3, [sp, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc36      	bgt.n	8007a5a <_dtoa_r+0x9a2>
 80079ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	dd33      	ble.n	8007a5a <_dtoa_r+0x9a2>
 80079f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80079f6:	f1bb 0f00 	cmp.w	fp, #0
 80079fa:	d10d      	bne.n	8007a18 <_dtoa_r+0x960>
 80079fc:	4621      	mov	r1, r4
 80079fe:	465b      	mov	r3, fp
 8007a00:	2205      	movs	r2, #5
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 ff70 	bl	80088e8 <__multadd>
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	f001 f9cd 	bl	8008dac <__mcmp>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	f73f adb6 	bgt.w	8007584 <_dtoa_r+0x4cc>
 8007a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a1a:	9f08      	ldr	r7, [sp, #32]
 8007a1c:	ea6f 0903 	mvn.w	r9, r3
 8007a20:	f04f 0800 	mov.w	r8, #0
 8007a24:	4621      	mov	r1, r4
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 ff3c 	bl	80088a4 <_Bfree>
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	f43f aea4 	beq.w	800777a <_dtoa_r+0x6c2>
 8007a32:	f1b8 0f00 	cmp.w	r8, #0
 8007a36:	d005      	beq.n	8007a44 <_dtoa_r+0x98c>
 8007a38:	45b0      	cmp	r8, r6
 8007a3a:	d003      	beq.n	8007a44 <_dtoa_r+0x98c>
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 ff30 	bl	80088a4 <_Bfree>
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 ff2c 	bl	80088a4 <_Bfree>
 8007a4c:	e695      	b.n	800777a <_dtoa_r+0x6c2>
 8007a4e:	2400      	movs	r4, #0
 8007a50:	4626      	mov	r6, r4
 8007a52:	e7e1      	b.n	8007a18 <_dtoa_r+0x960>
 8007a54:	46c1      	mov	r9, r8
 8007a56:	4626      	mov	r6, r4
 8007a58:	e594      	b.n	8007584 <_dtoa_r+0x4cc>
 8007a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80fc 	beq.w	8007c5e <_dtoa_r+0xba6>
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	dd05      	ble.n	8007a76 <_dtoa_r+0x9be>
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	463a      	mov	r2, r7
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f001 f930 	bl	8008cd4 <__lshift>
 8007a74:	4606      	mov	r6, r0
 8007a76:	f1b8 0f00 	cmp.w	r8, #0
 8007a7a:	d05c      	beq.n	8007b36 <_dtoa_r+0xa7e>
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	6871      	ldr	r1, [r6, #4]
 8007a80:	f000 fed0 	bl	8008824 <_Balloc>
 8007a84:	4607      	mov	r7, r0
 8007a86:	b928      	cbnz	r0, 8007a94 <_dtoa_r+0x9dc>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a8e:	4b7e      	ldr	r3, [pc, #504]	; (8007c88 <_dtoa_r+0xbd0>)
 8007a90:	f7ff bb26 	b.w	80070e0 <_dtoa_r+0x28>
 8007a94:	6932      	ldr	r2, [r6, #16]
 8007a96:	f106 010c 	add.w	r1, r6, #12
 8007a9a:	3202      	adds	r2, #2
 8007a9c:	0092      	lsls	r2, r2, #2
 8007a9e:	300c      	adds	r0, #12
 8007aa0:	f7fd fa92 	bl	8004fc8 <memcpy>
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f001 f913 	bl	8008cd4 <__lshift>
 8007aae:	46b0      	mov	r8, r6
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	9302      	str	r3, [sp, #8]
 8007ab8:	9b08      	ldr	r3, [sp, #32]
 8007aba:	445b      	add	r3, fp
 8007abc:	930a      	str	r3, [sp, #40]	; 0x28
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac6:	9b02      	ldr	r3, [sp, #8]
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4650      	mov	r0, sl
 8007acc:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ad0:	f7ff fa62 	bl	8006f98 <quorem>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	4641      	mov	r1, r8
 8007ad8:	3330      	adds	r3, #48	; 0x30
 8007ada:	9004      	str	r0, [sp, #16]
 8007adc:	4650      	mov	r0, sl
 8007ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ae0:	f001 f964 	bl	8008dac <__mcmp>
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	9006      	str	r0, [sp, #24]
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4628      	mov	r0, r5
 8007aec:	f001 f97a 	bl	8008de4 <__mdiff>
 8007af0:	68c2      	ldr	r2, [r0, #12]
 8007af2:	4607      	mov	r7, r0
 8007af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007af6:	bb02      	cbnz	r2, 8007b3a <_dtoa_r+0xa82>
 8007af8:	4601      	mov	r1, r0
 8007afa:	4650      	mov	r0, sl
 8007afc:	f001 f956 	bl	8008dac <__mcmp>
 8007b00:	4602      	mov	r2, r0
 8007b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b04:	4639      	mov	r1, r7
 8007b06:	4628      	mov	r0, r5
 8007b08:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007b0c:	f000 feca 	bl	80088a4 <_Bfree>
 8007b10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b14:	9f02      	ldr	r7, [sp, #8]
 8007b16:	ea43 0102 	orr.w	r1, r3, r2
 8007b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b20:	d10d      	bne.n	8007b3e <_dtoa_r+0xa86>
 8007b22:	2b39      	cmp	r3, #57	; 0x39
 8007b24:	d027      	beq.n	8007b76 <_dtoa_r+0xabe>
 8007b26:	9a06      	ldr	r2, [sp, #24]
 8007b28:	2a00      	cmp	r2, #0
 8007b2a:	dd01      	ble.n	8007b30 <_dtoa_r+0xa78>
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	3331      	adds	r3, #49	; 0x31
 8007b30:	f88b 3000 	strb.w	r3, [fp]
 8007b34:	e776      	b.n	8007a24 <_dtoa_r+0x96c>
 8007b36:	4630      	mov	r0, r6
 8007b38:	e7b9      	b.n	8007aae <_dtoa_r+0x9f6>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	e7e2      	b.n	8007b04 <_dtoa_r+0xa4c>
 8007b3e:	9906      	ldr	r1, [sp, #24]
 8007b40:	2900      	cmp	r1, #0
 8007b42:	db04      	blt.n	8007b4e <_dtoa_r+0xa96>
 8007b44:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007b46:	4301      	orrs	r1, r0
 8007b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b4a:	4301      	orrs	r1, r0
 8007b4c:	d120      	bne.n	8007b90 <_dtoa_r+0xad8>
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	ddee      	ble.n	8007b30 <_dtoa_r+0xa78>
 8007b52:	4651      	mov	r1, sl
 8007b54:	2201      	movs	r2, #1
 8007b56:	4628      	mov	r0, r5
 8007b58:	9302      	str	r3, [sp, #8]
 8007b5a:	f001 f8bb 	bl	8008cd4 <__lshift>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4682      	mov	sl, r0
 8007b62:	f001 f923 	bl	8008dac <__mcmp>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	dc02      	bgt.n	8007b72 <_dtoa_r+0xaba>
 8007b6c:	d1e0      	bne.n	8007b30 <_dtoa_r+0xa78>
 8007b6e:	07da      	lsls	r2, r3, #31
 8007b70:	d5de      	bpl.n	8007b30 <_dtoa_r+0xa78>
 8007b72:	2b39      	cmp	r3, #57	; 0x39
 8007b74:	d1da      	bne.n	8007b2c <_dtoa_r+0xa74>
 8007b76:	2339      	movs	r3, #57	; 0x39
 8007b78:	f88b 3000 	strb.w	r3, [fp]
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	461f      	mov	r7, r3
 8007b80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	2a39      	cmp	r2, #57	; 0x39
 8007b88:	d050      	beq.n	8007c2c <_dtoa_r+0xb74>
 8007b8a:	3201      	adds	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e749      	b.n	8007a24 <_dtoa_r+0x96c>
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	dd03      	ble.n	8007b9c <_dtoa_r+0xae4>
 8007b94:	2b39      	cmp	r3, #57	; 0x39
 8007b96:	d0ee      	beq.n	8007b76 <_dtoa_r+0xabe>
 8007b98:	3301      	adds	r3, #1
 8007b9a:	e7c9      	b.n	8007b30 <_dtoa_r+0xa78>
 8007b9c:	9a02      	ldr	r2, [sp, #8]
 8007b9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ba0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ba4:	428a      	cmp	r2, r1
 8007ba6:	d02a      	beq.n	8007bfe <_dtoa_r+0xb46>
 8007ba8:	4651      	mov	r1, sl
 8007baa:	2300      	movs	r3, #0
 8007bac:	220a      	movs	r2, #10
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 fe9a 	bl	80088e8 <__multadd>
 8007bb4:	45b0      	cmp	r8, r6
 8007bb6:	4682      	mov	sl, r0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	f04f 020a 	mov.w	r2, #10
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	d107      	bne.n	8007bd6 <_dtoa_r+0xb1e>
 8007bc6:	f000 fe8f 	bl	80088e8 <__multadd>
 8007bca:	4680      	mov	r8, r0
 8007bcc:	4606      	mov	r6, r0
 8007bce:	9b02      	ldr	r3, [sp, #8]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	9302      	str	r3, [sp, #8]
 8007bd4:	e777      	b.n	8007ac6 <_dtoa_r+0xa0e>
 8007bd6:	f000 fe87 	bl	80088e8 <__multadd>
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4680      	mov	r8, r0
 8007bde:	2300      	movs	r3, #0
 8007be0:	220a      	movs	r2, #10
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 fe80 	bl	80088e8 <__multadd>
 8007be8:	4606      	mov	r6, r0
 8007bea:	e7f0      	b.n	8007bce <_dtoa_r+0xb16>
 8007bec:	f1bb 0f00 	cmp.w	fp, #0
 8007bf0:	bfcc      	ite	gt
 8007bf2:	465f      	movgt	r7, fp
 8007bf4:	2701      	movle	r7, #1
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	9a08      	ldr	r2, [sp, #32]
 8007bfc:	4417      	add	r7, r2
 8007bfe:	4651      	mov	r1, sl
 8007c00:	2201      	movs	r2, #1
 8007c02:	4628      	mov	r0, r5
 8007c04:	9302      	str	r3, [sp, #8]
 8007c06:	f001 f865 	bl	8008cd4 <__lshift>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	f001 f8cd 	bl	8008dac <__mcmp>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	dcb2      	bgt.n	8007b7c <_dtoa_r+0xac4>
 8007c16:	d102      	bne.n	8007c1e <_dtoa_r+0xb66>
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	07db      	lsls	r3, r3, #31
 8007c1c:	d4ae      	bmi.n	8007b7c <_dtoa_r+0xac4>
 8007c1e:	463b      	mov	r3, r7
 8007c20:	461f      	mov	r7, r3
 8007c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c26:	2a30      	cmp	r2, #48	; 0x30
 8007c28:	d0fa      	beq.n	8007c20 <_dtoa_r+0xb68>
 8007c2a:	e6fb      	b.n	8007a24 <_dtoa_r+0x96c>
 8007c2c:	9a08      	ldr	r2, [sp, #32]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d1a5      	bne.n	8007b7e <_dtoa_r+0xac6>
 8007c32:	2331      	movs	r3, #49	; 0x31
 8007c34:	f109 0901 	add.w	r9, r9, #1
 8007c38:	7013      	strb	r3, [r2, #0]
 8007c3a:	e6f3      	b.n	8007a24 <_dtoa_r+0x96c>
 8007c3c:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <_dtoa_r+0xbd4>)
 8007c3e:	f7ff baa7 	b.w	8007190 <_dtoa_r+0xd8>
 8007c42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f47f aa80 	bne.w	800714a <_dtoa_r+0x92>
 8007c4a:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <_dtoa_r+0xbd8>)
 8007c4c:	f7ff baa0 	b.w	8007190 <_dtoa_r+0xd8>
 8007c50:	f1bb 0f00 	cmp.w	fp, #0
 8007c54:	dc03      	bgt.n	8007c5e <_dtoa_r+0xba6>
 8007c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	f73f aecc 	bgt.w	80079f6 <_dtoa_r+0x93e>
 8007c5e:	9f08      	ldr	r7, [sp, #32]
 8007c60:	4621      	mov	r1, r4
 8007c62:	4650      	mov	r0, sl
 8007c64:	f7ff f998 	bl	8006f98 <quorem>
 8007c68:	9a08      	ldr	r2, [sp, #32]
 8007c6a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c6e:	f807 3b01 	strb.w	r3, [r7], #1
 8007c72:	1aba      	subs	r2, r7, r2
 8007c74:	4593      	cmp	fp, r2
 8007c76:	ddb9      	ble.n	8007bec <_dtoa_r+0xb34>
 8007c78:	4651      	mov	r1, sl
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	220a      	movs	r2, #10
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 fe32 	bl	80088e8 <__multadd>
 8007c84:	4682      	mov	sl, r0
 8007c86:	e7eb      	b.n	8007c60 <_dtoa_r+0xba8>
 8007c88:	0800a453 	.word	0x0800a453
 8007c8c:	0800a6b9 	.word	0x0800a6b9
 8007c90:	0800a3d0 	.word	0x0800a3d0

08007c94 <__sflush_r>:
 8007c94:	898a      	ldrh	r2, [r1, #12]
 8007c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	0710      	lsls	r0, r2, #28
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	d458      	bmi.n	8007d54 <__sflush_r+0xc0>
 8007ca2:	684b      	ldr	r3, [r1, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dc05      	bgt.n	8007cb4 <__sflush_r+0x20>
 8007ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dc02      	bgt.n	8007cb4 <__sflush_r+0x20>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cb6:	2e00      	cmp	r6, #0
 8007cb8:	d0f9      	beq.n	8007cae <__sflush_r+0x1a>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc0:	682f      	ldr	r7, [r5, #0]
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	d032      	beq.n	8007d2c <__sflush_r+0x98>
 8007cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	075a      	lsls	r2, r3, #29
 8007ccc:	d505      	bpl.n	8007cda <__sflush_r+0x46>
 8007cce:	6863      	ldr	r3, [r4, #4]
 8007cd0:	1ac0      	subs	r0, r0, r3
 8007cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cd4:	b10b      	cbz	r3, 8007cda <__sflush_r+0x46>
 8007cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cd8:	1ac0      	subs	r0, r0, r3
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	6a21      	ldr	r1, [r4, #32]
 8007ce4:	47b0      	blx	r6
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	d106      	bne.n	8007cfa <__sflush_r+0x66>
 8007cec:	6829      	ldr	r1, [r5, #0]
 8007cee:	291d      	cmp	r1, #29
 8007cf0:	d82c      	bhi.n	8007d4c <__sflush_r+0xb8>
 8007cf2:	4a2a      	ldr	r2, [pc, #168]	; (8007d9c <__sflush_r+0x108>)
 8007cf4:	40ca      	lsrs	r2, r1
 8007cf6:	07d6      	lsls	r6, r2, #31
 8007cf8:	d528      	bpl.n	8007d4c <__sflush_r+0xb8>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	6062      	str	r2, [r4, #4]
 8007cfe:	6922      	ldr	r2, [r4, #16]
 8007d00:	04d9      	lsls	r1, r3, #19
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	d504      	bpl.n	8007d10 <__sflush_r+0x7c>
 8007d06:	1c42      	adds	r2, r0, #1
 8007d08:	d101      	bne.n	8007d0e <__sflush_r+0x7a>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	b903      	cbnz	r3, 8007d10 <__sflush_r+0x7c>
 8007d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d12:	602f      	str	r7, [r5, #0]
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d0ca      	beq.n	8007cae <__sflush_r+0x1a>
 8007d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	d002      	beq.n	8007d26 <__sflush_r+0x92>
 8007d20:	4628      	mov	r0, r5
 8007d22:	f7fd f967 	bl	8004ff4 <_free_r>
 8007d26:	2000      	movs	r0, #0
 8007d28:	6360      	str	r0, [r4, #52]	; 0x34
 8007d2a:	e7c1      	b.n	8007cb0 <__sflush_r+0x1c>
 8007d2c:	6a21      	ldr	r1, [r4, #32]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b0      	blx	r6
 8007d34:	1c41      	adds	r1, r0, #1
 8007d36:	d1c7      	bne.n	8007cc8 <__sflush_r+0x34>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0c4      	beq.n	8007cc8 <__sflush_r+0x34>
 8007d3e:	2b1d      	cmp	r3, #29
 8007d40:	d001      	beq.n	8007d46 <__sflush_r+0xb2>
 8007d42:	2b16      	cmp	r3, #22
 8007d44:	d101      	bne.n	8007d4a <__sflush_r+0xb6>
 8007d46:	602f      	str	r7, [r5, #0]
 8007d48:	e7b1      	b.n	8007cae <__sflush_r+0x1a>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	e7ad      	b.n	8007cb0 <__sflush_r+0x1c>
 8007d54:	690f      	ldr	r7, [r1, #16]
 8007d56:	2f00      	cmp	r7, #0
 8007d58:	d0a9      	beq.n	8007cae <__sflush_r+0x1a>
 8007d5a:	0793      	lsls	r3, r2, #30
 8007d5c:	bf18      	it	ne
 8007d5e:	2300      	movne	r3, #0
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	bf08      	it	eq
 8007d64:	694b      	ldreq	r3, [r1, #20]
 8007d66:	eba6 0807 	sub.w	r8, r6, r7
 8007d6a:	600f      	str	r7, [r1, #0]
 8007d6c:	608b      	str	r3, [r1, #8]
 8007d6e:	f1b8 0f00 	cmp.w	r8, #0
 8007d72:	dd9c      	ble.n	8007cae <__sflush_r+0x1a>
 8007d74:	4643      	mov	r3, r8
 8007d76:	463a      	mov	r2, r7
 8007d78:	4628      	mov	r0, r5
 8007d7a:	6a21      	ldr	r1, [r4, #32]
 8007d7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d7e:	47b0      	blx	r6
 8007d80:	2800      	cmp	r0, #0
 8007d82:	dc06      	bgt.n	8007d92 <__sflush_r+0xfe>
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	e78e      	b.n	8007cb0 <__sflush_r+0x1c>
 8007d92:	4407      	add	r7, r0
 8007d94:	eba8 0800 	sub.w	r8, r8, r0
 8007d98:	e7e9      	b.n	8007d6e <__sflush_r+0xda>
 8007d9a:	bf00      	nop
 8007d9c:	20400001 	.word	0x20400001

08007da0 <_fflush_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	690b      	ldr	r3, [r1, #16]
 8007da4:	4605      	mov	r5, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	b913      	cbnz	r3, 8007db0 <_fflush_r+0x10>
 8007daa:	2500      	movs	r5, #0
 8007dac:	4628      	mov	r0, r5
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	b118      	cbz	r0, 8007dba <_fflush_r+0x1a>
 8007db2:	6983      	ldr	r3, [r0, #24]
 8007db4:	b90b      	cbnz	r3, 8007dba <_fflush_r+0x1a>
 8007db6:	f000 f887 	bl	8007ec8 <__sinit>
 8007dba:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <_fflush_r+0x6c>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d11b      	bne.n	8007df8 <_fflush_r+0x58>
 8007dc0:	686c      	ldr	r4, [r5, #4]
 8007dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ef      	beq.n	8007daa <_fflush_r+0xa>
 8007dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dcc:	07d0      	lsls	r0, r2, #31
 8007dce:	d404      	bmi.n	8007dda <_fflush_r+0x3a>
 8007dd0:	0599      	lsls	r1, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_fflush_r+0x3a>
 8007dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd6:	f000 fc80 	bl	80086da <__retarget_lock_acquire_recursive>
 8007dda:	4628      	mov	r0, r5
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f7ff ff59 	bl	8007c94 <__sflush_r>
 8007de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de4:	4605      	mov	r5, r0
 8007de6:	07da      	lsls	r2, r3, #31
 8007de8:	d4e0      	bmi.n	8007dac <_fflush_r+0xc>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	059b      	lsls	r3, r3, #22
 8007dee:	d4dd      	bmi.n	8007dac <_fflush_r+0xc>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f000 fc73 	bl	80086dc <__retarget_lock_release_recursive>
 8007df6:	e7d9      	b.n	8007dac <_fflush_r+0xc>
 8007df8:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <_fflush_r+0x70>)
 8007dfa:	429c      	cmp	r4, r3
 8007dfc:	d101      	bne.n	8007e02 <_fflush_r+0x62>
 8007dfe:	68ac      	ldr	r4, [r5, #8]
 8007e00:	e7df      	b.n	8007dc2 <_fflush_r+0x22>
 8007e02:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <_fflush_r+0x74>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	bf08      	it	eq
 8007e08:	68ec      	ldreq	r4, [r5, #12]
 8007e0a:	e7da      	b.n	8007dc2 <_fflush_r+0x22>
 8007e0c:	0800a484 	.word	0x0800a484
 8007e10:	0800a4a4 	.word	0x0800a4a4
 8007e14:	0800a464 	.word	0x0800a464

08007e18 <std>:
 8007e18:	2300      	movs	r3, #0
 8007e1a:	b510      	push	{r4, lr}
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e26:	6083      	str	r3, [r0, #8]
 8007e28:	8181      	strh	r1, [r0, #12]
 8007e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e2c:	81c2      	strh	r2, [r0, #14]
 8007e2e:	6183      	str	r3, [r0, #24]
 8007e30:	4619      	mov	r1, r3
 8007e32:	2208      	movs	r2, #8
 8007e34:	305c      	adds	r0, #92	; 0x5c
 8007e36:	f7fd f8d5 	bl	8004fe4 <memset>
 8007e3a:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <std+0x38>)
 8007e3c:	6224      	str	r4, [r4, #32]
 8007e3e:	6263      	str	r3, [r4, #36]	; 0x24
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <std+0x3c>)
 8007e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <std+0x40>)
 8007e46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <std+0x44>)
 8007e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e4c:	bd10      	pop	{r4, pc}
 8007e4e:	bf00      	nop
 8007e50:	08005fdd 	.word	0x08005fdd
 8007e54:	08006003 	.word	0x08006003
 8007e58:	0800603b 	.word	0x0800603b
 8007e5c:	0800605f 	.word	0x0800605f

08007e60 <_cleanup_r>:
 8007e60:	4901      	ldr	r1, [pc, #4]	; (8007e68 <_cleanup_r+0x8>)
 8007e62:	f000 b8af 	b.w	8007fc4 <_fwalk_reent>
 8007e66:	bf00      	nop
 8007e68:	08007da1 	.word	0x08007da1

08007e6c <__sfmoreglue>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	2568      	movs	r5, #104	; 0x68
 8007e70:	1e4a      	subs	r2, r1, #1
 8007e72:	4355      	muls	r5, r2
 8007e74:	460e      	mov	r6, r1
 8007e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e7a:	f7fd f907 	bl	800508c <_malloc_r>
 8007e7e:	4604      	mov	r4, r0
 8007e80:	b140      	cbz	r0, 8007e94 <__sfmoreglue+0x28>
 8007e82:	2100      	movs	r1, #0
 8007e84:	e9c0 1600 	strd	r1, r6, [r0]
 8007e88:	300c      	adds	r0, #12
 8007e8a:	60a0      	str	r0, [r4, #8]
 8007e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e90:	f7fd f8a8 	bl	8004fe4 <memset>
 8007e94:	4620      	mov	r0, r4
 8007e96:	bd70      	pop	{r4, r5, r6, pc}

08007e98 <__sfp_lock_acquire>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__sfp_lock_acquire+0x8>)
 8007e9a:	f000 bc1e 	b.w	80086da <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	20000878 	.word	0x20000878

08007ea4 <__sfp_lock_release>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__sfp_lock_release+0x8>)
 8007ea6:	f000 bc19 	b.w	80086dc <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	20000878 	.word	0x20000878

08007eb0 <__sinit_lock_acquire>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__sinit_lock_acquire+0x8>)
 8007eb2:	f000 bc12 	b.w	80086da <__retarget_lock_acquire_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	20000873 	.word	0x20000873

08007ebc <__sinit_lock_release>:
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__sinit_lock_release+0x8>)
 8007ebe:	f000 bc0d 	b.w	80086dc <__retarget_lock_release_recursive>
 8007ec2:	bf00      	nop
 8007ec4:	20000873 	.word	0x20000873

08007ec8 <__sinit>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	4604      	mov	r4, r0
 8007ecc:	f7ff fff0 	bl	8007eb0 <__sinit_lock_acquire>
 8007ed0:	69a3      	ldr	r3, [r4, #24]
 8007ed2:	b11b      	cbz	r3, 8007edc <__sinit+0x14>
 8007ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed8:	f7ff bff0 	b.w	8007ebc <__sinit_lock_release>
 8007edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ee2:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <__sinit+0x68>)
 8007ee4:	4a13      	ldr	r2, [pc, #76]	; (8007f34 <__sinit+0x6c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eea:	42a3      	cmp	r3, r4
 8007eec:	bf08      	it	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	bf08      	it	eq
 8007ef4:	61a3      	streq	r3, [r4, #24]
 8007ef6:	f000 f81f 	bl	8007f38 <__sfp>
 8007efa:	6060      	str	r0, [r4, #4]
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 f81b 	bl	8007f38 <__sfp>
 8007f02:	60a0      	str	r0, [r4, #8]
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 f817 	bl	8007f38 <__sfp>
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2104      	movs	r1, #4
 8007f0e:	60e0      	str	r0, [r4, #12]
 8007f10:	6860      	ldr	r0, [r4, #4]
 8007f12:	f7ff ff81 	bl	8007e18 <std>
 8007f16:	2201      	movs	r2, #1
 8007f18:	2109      	movs	r1, #9
 8007f1a:	68a0      	ldr	r0, [r4, #8]
 8007f1c:	f7ff ff7c 	bl	8007e18 <std>
 8007f20:	2202      	movs	r2, #2
 8007f22:	2112      	movs	r1, #18
 8007f24:	68e0      	ldr	r0, [r4, #12]
 8007f26:	f7ff ff77 	bl	8007e18 <std>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61a3      	str	r3, [r4, #24]
 8007f2e:	e7d1      	b.n	8007ed4 <__sinit+0xc>
 8007f30:	0800a344 	.word	0x0800a344
 8007f34:	08007e61 	.word	0x08007e61

08007f38 <__sfp>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	f7ff ffac 	bl	8007e98 <__sfp_lock_acquire>
 8007f40:	4b1e      	ldr	r3, [pc, #120]	; (8007fbc <__sfp+0x84>)
 8007f42:	681e      	ldr	r6, [r3, #0]
 8007f44:	69b3      	ldr	r3, [r6, #24]
 8007f46:	b913      	cbnz	r3, 8007f4e <__sfp+0x16>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7ff ffbd 	bl	8007ec8 <__sinit>
 8007f4e:	3648      	adds	r6, #72	; 0x48
 8007f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	d503      	bpl.n	8007f60 <__sfp+0x28>
 8007f58:	6833      	ldr	r3, [r6, #0]
 8007f5a:	b30b      	cbz	r3, 8007fa0 <__sfp+0x68>
 8007f5c:	6836      	ldr	r6, [r6, #0]
 8007f5e:	e7f7      	b.n	8007f50 <__sfp+0x18>
 8007f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f64:	b9d5      	cbnz	r5, 8007f9c <__sfp+0x64>
 8007f66:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <__sfp+0x88>)
 8007f68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f6c:	60e3      	str	r3, [r4, #12]
 8007f6e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f70:	f000 fbb2 	bl	80086d8 <__retarget_lock_init_recursive>
 8007f74:	f7ff ff96 	bl	8007ea4 <__sfp_lock_release>
 8007f78:	2208      	movs	r2, #8
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f84:	6025      	str	r5, [r4, #0]
 8007f86:	61a5      	str	r5, [r4, #24]
 8007f88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f8c:	f7fd f82a 	bl	8004fe4 <memset>
 8007f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f98:	4620      	mov	r0, r4
 8007f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f9c:	3468      	adds	r4, #104	; 0x68
 8007f9e:	e7d9      	b.n	8007f54 <__sfp+0x1c>
 8007fa0:	2104      	movs	r1, #4
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f7ff ff62 	bl	8007e6c <__sfmoreglue>
 8007fa8:	4604      	mov	r4, r0
 8007faa:	6030      	str	r0, [r6, #0]
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d1d5      	bne.n	8007f5c <__sfp+0x24>
 8007fb0:	f7ff ff78 	bl	8007ea4 <__sfp_lock_release>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	e7ee      	b.n	8007f98 <__sfp+0x60>
 8007fba:	bf00      	nop
 8007fbc:	0800a344 	.word	0x0800a344
 8007fc0:	ffff0001 	.word	0xffff0001

08007fc4 <_fwalk_reent>:
 8007fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4606      	mov	r6, r0
 8007fca:	4688      	mov	r8, r1
 8007fcc:	2700      	movs	r7, #0
 8007fce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8007fda:	d505      	bpl.n	8007fe8 <_fwalk_reent+0x24>
 8007fdc:	6824      	ldr	r4, [r4, #0]
 8007fde:	2c00      	cmp	r4, #0
 8007fe0:	d1f7      	bne.n	8007fd2 <_fwalk_reent+0xe>
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d907      	bls.n	8007ffe <_fwalk_reent+0x3a>
 8007fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	d003      	beq.n	8007ffe <_fwalk_reent+0x3a>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	47c0      	blx	r8
 8007ffc:	4307      	orrs	r7, r0
 8007ffe:	3568      	adds	r5, #104	; 0x68
 8008000:	e7e9      	b.n	8007fd6 <_fwalk_reent+0x12>

08008002 <rshift>:
 8008002:	6903      	ldr	r3, [r0, #16]
 8008004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008008:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800800c:	f100 0414 	add.w	r4, r0, #20
 8008010:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008014:	dd46      	ble.n	80080a4 <rshift+0xa2>
 8008016:	f011 011f 	ands.w	r1, r1, #31
 800801a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800801e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008022:	d10c      	bne.n	800803e <rshift+0x3c>
 8008024:	4629      	mov	r1, r5
 8008026:	f100 0710 	add.w	r7, r0, #16
 800802a:	42b1      	cmp	r1, r6
 800802c:	d335      	bcc.n	800809a <rshift+0x98>
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	1eea      	subs	r2, r5, #3
 8008034:	4296      	cmp	r6, r2
 8008036:	bf38      	it	cc
 8008038:	2300      	movcc	r3, #0
 800803a:	4423      	add	r3, r4
 800803c:	e015      	b.n	800806a <rshift+0x68>
 800803e:	46a1      	mov	r9, r4
 8008040:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008044:	f1c1 0820 	rsb	r8, r1, #32
 8008048:	40cf      	lsrs	r7, r1
 800804a:	f105 0e04 	add.w	lr, r5, #4
 800804e:	4576      	cmp	r6, lr
 8008050:	46f4      	mov	ip, lr
 8008052:	d816      	bhi.n	8008082 <rshift+0x80>
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	009a      	lsls	r2, r3, #2
 8008058:	3a04      	subs	r2, #4
 800805a:	3501      	adds	r5, #1
 800805c:	42ae      	cmp	r6, r5
 800805e:	bf38      	it	cc
 8008060:	2200      	movcc	r2, #0
 8008062:	18a3      	adds	r3, r4, r2
 8008064:	50a7      	str	r7, [r4, r2]
 8008066:	b107      	cbz	r7, 800806a <rshift+0x68>
 8008068:	3304      	adds	r3, #4
 800806a:	42a3      	cmp	r3, r4
 800806c:	eba3 0204 	sub.w	r2, r3, r4
 8008070:	bf08      	it	eq
 8008072:	2300      	moveq	r3, #0
 8008074:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008078:	6102      	str	r2, [r0, #16]
 800807a:	bf08      	it	eq
 800807c:	6143      	streq	r3, [r0, #20]
 800807e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008082:	f8dc c000 	ldr.w	ip, [ip]
 8008086:	fa0c fc08 	lsl.w	ip, ip, r8
 800808a:	ea4c 0707 	orr.w	r7, ip, r7
 800808e:	f849 7b04 	str.w	r7, [r9], #4
 8008092:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008096:	40cf      	lsrs	r7, r1
 8008098:	e7d9      	b.n	800804e <rshift+0x4c>
 800809a:	f851 cb04 	ldr.w	ip, [r1], #4
 800809e:	f847 cf04 	str.w	ip, [r7, #4]!
 80080a2:	e7c2      	b.n	800802a <rshift+0x28>
 80080a4:	4623      	mov	r3, r4
 80080a6:	e7e0      	b.n	800806a <rshift+0x68>

080080a8 <__hexdig_fun>:
 80080a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80080ac:	2b09      	cmp	r3, #9
 80080ae:	d802      	bhi.n	80080b6 <__hexdig_fun+0xe>
 80080b0:	3820      	subs	r0, #32
 80080b2:	b2c0      	uxtb	r0, r0
 80080b4:	4770      	bx	lr
 80080b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d801      	bhi.n	80080c2 <__hexdig_fun+0x1a>
 80080be:	3847      	subs	r0, #71	; 0x47
 80080c0:	e7f7      	b.n	80080b2 <__hexdig_fun+0xa>
 80080c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d801      	bhi.n	80080ce <__hexdig_fun+0x26>
 80080ca:	3827      	subs	r0, #39	; 0x27
 80080cc:	e7f1      	b.n	80080b2 <__hexdig_fun+0xa>
 80080ce:	2000      	movs	r0, #0
 80080d0:	4770      	bx	lr
	...

080080d4 <__gethex>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	b08b      	sub	sp, #44	; 0x2c
 80080da:	9306      	str	r3, [sp, #24]
 80080dc:	4bb9      	ldr	r3, [pc, #740]	; (80083c4 <__gethex+0x2f0>)
 80080de:	9002      	str	r0, [sp, #8]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	468b      	mov	fp, r1
 80080e4:	4618      	mov	r0, r3
 80080e6:	4690      	mov	r8, r2
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	f7f8 f89d 	bl	8000228 <strlen>
 80080ee:	4682      	mov	sl, r0
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	f8db 2000 	ldr.w	r2, [fp]
 80080f6:	4403      	add	r3, r0
 80080f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80080fc:	9307      	str	r3, [sp, #28]
 80080fe:	1c93      	adds	r3, r2, #2
 8008100:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008104:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008108:	32fe      	adds	r2, #254	; 0xfe
 800810a:	18d1      	adds	r1, r2, r3
 800810c:	461f      	mov	r7, r3
 800810e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008112:	9101      	str	r1, [sp, #4]
 8008114:	2830      	cmp	r0, #48	; 0x30
 8008116:	d0f8      	beq.n	800810a <__gethex+0x36>
 8008118:	f7ff ffc6 	bl	80080a8 <__hexdig_fun>
 800811c:	4604      	mov	r4, r0
 800811e:	2800      	cmp	r0, #0
 8008120:	d13a      	bne.n	8008198 <__gethex+0xc4>
 8008122:	4652      	mov	r2, sl
 8008124:	4638      	mov	r0, r7
 8008126:	9903      	ldr	r1, [sp, #12]
 8008128:	f7fd ff9d 	bl	8006066 <strncmp>
 800812c:	4605      	mov	r5, r0
 800812e:	2800      	cmp	r0, #0
 8008130:	d166      	bne.n	8008200 <__gethex+0x12c>
 8008132:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008136:	eb07 060a 	add.w	r6, r7, sl
 800813a:	f7ff ffb5 	bl	80080a8 <__hexdig_fun>
 800813e:	2800      	cmp	r0, #0
 8008140:	d060      	beq.n	8008204 <__gethex+0x130>
 8008142:	4633      	mov	r3, r6
 8008144:	7818      	ldrb	r0, [r3, #0]
 8008146:	461f      	mov	r7, r3
 8008148:	2830      	cmp	r0, #48	; 0x30
 800814a:	f103 0301 	add.w	r3, r3, #1
 800814e:	d0f9      	beq.n	8008144 <__gethex+0x70>
 8008150:	f7ff ffaa 	bl	80080a8 <__hexdig_fun>
 8008154:	2301      	movs	r3, #1
 8008156:	fab0 f480 	clz	r4, r0
 800815a:	4635      	mov	r5, r6
 800815c:	0964      	lsrs	r4, r4, #5
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	463a      	mov	r2, r7
 8008162:	4616      	mov	r6, r2
 8008164:	7830      	ldrb	r0, [r6, #0]
 8008166:	3201      	adds	r2, #1
 8008168:	f7ff ff9e 	bl	80080a8 <__hexdig_fun>
 800816c:	2800      	cmp	r0, #0
 800816e:	d1f8      	bne.n	8008162 <__gethex+0x8e>
 8008170:	4652      	mov	r2, sl
 8008172:	4630      	mov	r0, r6
 8008174:	9903      	ldr	r1, [sp, #12]
 8008176:	f7fd ff76 	bl	8006066 <strncmp>
 800817a:	b980      	cbnz	r0, 800819e <__gethex+0xca>
 800817c:	b94d      	cbnz	r5, 8008192 <__gethex+0xbe>
 800817e:	eb06 050a 	add.w	r5, r6, sl
 8008182:	462a      	mov	r2, r5
 8008184:	4616      	mov	r6, r2
 8008186:	7830      	ldrb	r0, [r6, #0]
 8008188:	3201      	adds	r2, #1
 800818a:	f7ff ff8d 	bl	80080a8 <__hexdig_fun>
 800818e:	2800      	cmp	r0, #0
 8008190:	d1f8      	bne.n	8008184 <__gethex+0xb0>
 8008192:	1bad      	subs	r5, r5, r6
 8008194:	00ad      	lsls	r5, r5, #2
 8008196:	e004      	b.n	80081a2 <__gethex+0xce>
 8008198:	2400      	movs	r4, #0
 800819a:	4625      	mov	r5, r4
 800819c:	e7e0      	b.n	8008160 <__gethex+0x8c>
 800819e:	2d00      	cmp	r5, #0
 80081a0:	d1f7      	bne.n	8008192 <__gethex+0xbe>
 80081a2:	7833      	ldrb	r3, [r6, #0]
 80081a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081a8:	2b50      	cmp	r3, #80	; 0x50
 80081aa:	d139      	bne.n	8008220 <__gethex+0x14c>
 80081ac:	7873      	ldrb	r3, [r6, #1]
 80081ae:	2b2b      	cmp	r3, #43	; 0x2b
 80081b0:	d02a      	beq.n	8008208 <__gethex+0x134>
 80081b2:	2b2d      	cmp	r3, #45	; 0x2d
 80081b4:	d02c      	beq.n	8008210 <__gethex+0x13c>
 80081b6:	f04f 0900 	mov.w	r9, #0
 80081ba:	1c71      	adds	r1, r6, #1
 80081bc:	7808      	ldrb	r0, [r1, #0]
 80081be:	f7ff ff73 	bl	80080a8 <__hexdig_fun>
 80081c2:	1e43      	subs	r3, r0, #1
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b18      	cmp	r3, #24
 80081c8:	d82a      	bhi.n	8008220 <__gethex+0x14c>
 80081ca:	f1a0 0210 	sub.w	r2, r0, #16
 80081ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081d2:	f7ff ff69 	bl	80080a8 <__hexdig_fun>
 80081d6:	1e43      	subs	r3, r0, #1
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b18      	cmp	r3, #24
 80081dc:	d91b      	bls.n	8008216 <__gethex+0x142>
 80081de:	f1b9 0f00 	cmp.w	r9, #0
 80081e2:	d000      	beq.n	80081e6 <__gethex+0x112>
 80081e4:	4252      	negs	r2, r2
 80081e6:	4415      	add	r5, r2
 80081e8:	f8cb 1000 	str.w	r1, [fp]
 80081ec:	b1d4      	cbz	r4, 8008224 <__gethex+0x150>
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf14      	ite	ne
 80081f4:	2700      	movne	r7, #0
 80081f6:	2706      	moveq	r7, #6
 80081f8:	4638      	mov	r0, r7
 80081fa:	b00b      	add	sp, #44	; 0x2c
 80081fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008200:	463e      	mov	r6, r7
 8008202:	4625      	mov	r5, r4
 8008204:	2401      	movs	r4, #1
 8008206:	e7cc      	b.n	80081a2 <__gethex+0xce>
 8008208:	f04f 0900 	mov.w	r9, #0
 800820c:	1cb1      	adds	r1, r6, #2
 800820e:	e7d5      	b.n	80081bc <__gethex+0xe8>
 8008210:	f04f 0901 	mov.w	r9, #1
 8008214:	e7fa      	b.n	800820c <__gethex+0x138>
 8008216:	230a      	movs	r3, #10
 8008218:	fb03 0202 	mla	r2, r3, r2, r0
 800821c:	3a10      	subs	r2, #16
 800821e:	e7d6      	b.n	80081ce <__gethex+0xfa>
 8008220:	4631      	mov	r1, r6
 8008222:	e7e1      	b.n	80081e8 <__gethex+0x114>
 8008224:	4621      	mov	r1, r4
 8008226:	1bf3      	subs	r3, r6, r7
 8008228:	3b01      	subs	r3, #1
 800822a:	2b07      	cmp	r3, #7
 800822c:	dc0a      	bgt.n	8008244 <__gethex+0x170>
 800822e:	9802      	ldr	r0, [sp, #8]
 8008230:	f000 faf8 	bl	8008824 <_Balloc>
 8008234:	4604      	mov	r4, r0
 8008236:	b940      	cbnz	r0, 800824a <__gethex+0x176>
 8008238:	4602      	mov	r2, r0
 800823a:	21de      	movs	r1, #222	; 0xde
 800823c:	4b62      	ldr	r3, [pc, #392]	; (80083c8 <__gethex+0x2f4>)
 800823e:	4863      	ldr	r0, [pc, #396]	; (80083cc <__gethex+0x2f8>)
 8008240:	f001 fd6c 	bl	8009d1c <__assert_func>
 8008244:	3101      	adds	r1, #1
 8008246:	105b      	asrs	r3, r3, #1
 8008248:	e7ef      	b.n	800822a <__gethex+0x156>
 800824a:	f04f 0b00 	mov.w	fp, #0
 800824e:	f100 0914 	add.w	r9, r0, #20
 8008252:	f1ca 0301 	rsb	r3, sl, #1
 8008256:	f8cd 9010 	str.w	r9, [sp, #16]
 800825a:	f8cd b004 	str.w	fp, [sp, #4]
 800825e:	9308      	str	r3, [sp, #32]
 8008260:	42b7      	cmp	r7, r6
 8008262:	d33f      	bcc.n	80082e4 <__gethex+0x210>
 8008264:	9f04      	ldr	r7, [sp, #16]
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	f847 3b04 	str.w	r3, [r7], #4
 800826c:	eba7 0709 	sub.w	r7, r7, r9
 8008270:	10bf      	asrs	r7, r7, #2
 8008272:	6127      	str	r7, [r4, #16]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fbcb 	bl	8008a10 <__hi0bits>
 800827a:	017f      	lsls	r7, r7, #5
 800827c:	f8d8 6000 	ldr.w	r6, [r8]
 8008280:	1a3f      	subs	r7, r7, r0
 8008282:	42b7      	cmp	r7, r6
 8008284:	dd62      	ble.n	800834c <__gethex+0x278>
 8008286:	1bbf      	subs	r7, r7, r6
 8008288:	4639      	mov	r1, r7
 800828a:	4620      	mov	r0, r4
 800828c:	f000 ff61 	bl	8009152 <__any_on>
 8008290:	4682      	mov	sl, r0
 8008292:	b1a8      	cbz	r0, 80082c0 <__gethex+0x1ec>
 8008294:	f04f 0a01 	mov.w	sl, #1
 8008298:	1e7b      	subs	r3, r7, #1
 800829a:	1159      	asrs	r1, r3, #5
 800829c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80082a0:	f003 021f 	and.w	r2, r3, #31
 80082a4:	fa0a f202 	lsl.w	r2, sl, r2
 80082a8:	420a      	tst	r2, r1
 80082aa:	d009      	beq.n	80082c0 <__gethex+0x1ec>
 80082ac:	4553      	cmp	r3, sl
 80082ae:	dd05      	ble.n	80082bc <__gethex+0x1e8>
 80082b0:	4620      	mov	r0, r4
 80082b2:	1eb9      	subs	r1, r7, #2
 80082b4:	f000 ff4d 	bl	8009152 <__any_on>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d144      	bne.n	8008346 <__gethex+0x272>
 80082bc:	f04f 0a02 	mov.w	sl, #2
 80082c0:	4639      	mov	r1, r7
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7ff fe9d 	bl	8008002 <rshift>
 80082c8:	443d      	add	r5, r7
 80082ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082ce:	42ab      	cmp	r3, r5
 80082d0:	da4a      	bge.n	8008368 <__gethex+0x294>
 80082d2:	4621      	mov	r1, r4
 80082d4:	9802      	ldr	r0, [sp, #8]
 80082d6:	f000 fae5 	bl	80088a4 <_Bfree>
 80082da:	2300      	movs	r3, #0
 80082dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082de:	27a3      	movs	r7, #163	; 0xa3
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	e789      	b.n	80081f8 <__gethex+0x124>
 80082e4:	1e73      	subs	r3, r6, #1
 80082e6:	9a07      	ldr	r2, [sp, #28]
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d019      	beq.n	8008326 <__gethex+0x252>
 80082f2:	f1bb 0f20 	cmp.w	fp, #32
 80082f6:	d107      	bne.n	8008308 <__gethex+0x234>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	9a01      	ldr	r2, [sp, #4]
 80082fc:	f843 2b04 	str.w	r2, [r3], #4
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	2300      	movs	r3, #0
 8008304:	469b      	mov	fp, r3
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800830c:	f7ff fecc 	bl	80080a8 <__hexdig_fun>
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	f000 000f 	and.w	r0, r0, #15
 8008316:	fa00 f00b 	lsl.w	r0, r0, fp
 800831a:	4303      	orrs	r3, r0
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	f10b 0b04 	add.w	fp, fp, #4
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	e00d      	b.n	8008342 <__gethex+0x26e>
 8008326:	9b05      	ldr	r3, [sp, #20]
 8008328:	9a08      	ldr	r2, [sp, #32]
 800832a:	4413      	add	r3, r2
 800832c:	42bb      	cmp	r3, r7
 800832e:	d3e0      	bcc.n	80082f2 <__gethex+0x21e>
 8008330:	4618      	mov	r0, r3
 8008332:	4652      	mov	r2, sl
 8008334:	9903      	ldr	r1, [sp, #12]
 8008336:	9309      	str	r3, [sp, #36]	; 0x24
 8008338:	f7fd fe95 	bl	8006066 <strncmp>
 800833c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833e:	2800      	cmp	r0, #0
 8008340:	d1d7      	bne.n	80082f2 <__gethex+0x21e>
 8008342:	461e      	mov	r6, r3
 8008344:	e78c      	b.n	8008260 <__gethex+0x18c>
 8008346:	f04f 0a03 	mov.w	sl, #3
 800834a:	e7b9      	b.n	80082c0 <__gethex+0x1ec>
 800834c:	da09      	bge.n	8008362 <__gethex+0x28e>
 800834e:	1bf7      	subs	r7, r6, r7
 8008350:	4621      	mov	r1, r4
 8008352:	463a      	mov	r2, r7
 8008354:	9802      	ldr	r0, [sp, #8]
 8008356:	f000 fcbd 	bl	8008cd4 <__lshift>
 800835a:	4604      	mov	r4, r0
 800835c:	1bed      	subs	r5, r5, r7
 800835e:	f100 0914 	add.w	r9, r0, #20
 8008362:	f04f 0a00 	mov.w	sl, #0
 8008366:	e7b0      	b.n	80082ca <__gethex+0x1f6>
 8008368:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800836c:	42a8      	cmp	r0, r5
 800836e:	dd71      	ble.n	8008454 <__gethex+0x380>
 8008370:	1b45      	subs	r5, r0, r5
 8008372:	42ae      	cmp	r6, r5
 8008374:	dc34      	bgt.n	80083e0 <__gethex+0x30c>
 8008376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d028      	beq.n	80083d0 <__gethex+0x2fc>
 800837e:	2b03      	cmp	r3, #3
 8008380:	d02a      	beq.n	80083d8 <__gethex+0x304>
 8008382:	2b01      	cmp	r3, #1
 8008384:	d115      	bne.n	80083b2 <__gethex+0x2de>
 8008386:	42ae      	cmp	r6, r5
 8008388:	d113      	bne.n	80083b2 <__gethex+0x2de>
 800838a:	2e01      	cmp	r6, #1
 800838c:	d10b      	bne.n	80083a6 <__gethex+0x2d2>
 800838e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008392:	9a06      	ldr	r2, [sp, #24]
 8008394:	2762      	movs	r7, #98	; 0x62
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	2301      	movs	r3, #1
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	f8c9 3000 	str.w	r3, [r9]
 80083a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083a2:	601c      	str	r4, [r3, #0]
 80083a4:	e728      	b.n	80081f8 <__gethex+0x124>
 80083a6:	4620      	mov	r0, r4
 80083a8:	1e71      	subs	r1, r6, #1
 80083aa:	f000 fed2 	bl	8009152 <__any_on>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d1ed      	bne.n	800838e <__gethex+0x2ba>
 80083b2:	4621      	mov	r1, r4
 80083b4:	9802      	ldr	r0, [sp, #8]
 80083b6:	f000 fa75 	bl	80088a4 <_Bfree>
 80083ba:	2300      	movs	r3, #0
 80083bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083be:	2750      	movs	r7, #80	; 0x50
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	e719      	b.n	80081f8 <__gethex+0x124>
 80083c4:	0800a530 	.word	0x0800a530
 80083c8:	0800a453 	.word	0x0800a453
 80083cc:	0800a4c4 	.word	0x0800a4c4
 80083d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1ed      	bne.n	80083b2 <__gethex+0x2de>
 80083d6:	e7da      	b.n	800838e <__gethex+0x2ba>
 80083d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1d7      	bne.n	800838e <__gethex+0x2ba>
 80083de:	e7e8      	b.n	80083b2 <__gethex+0x2de>
 80083e0:	1e6f      	subs	r7, r5, #1
 80083e2:	f1ba 0f00 	cmp.w	sl, #0
 80083e6:	d132      	bne.n	800844e <__gethex+0x37a>
 80083e8:	b127      	cbz	r7, 80083f4 <__gethex+0x320>
 80083ea:	4639      	mov	r1, r7
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 feb0 	bl	8009152 <__any_on>
 80083f2:	4682      	mov	sl, r0
 80083f4:	2101      	movs	r1, #1
 80083f6:	117b      	asrs	r3, r7, #5
 80083f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80083fc:	f007 071f 	and.w	r7, r7, #31
 8008400:	fa01 f707 	lsl.w	r7, r1, r7
 8008404:	421f      	tst	r7, r3
 8008406:	f04f 0702 	mov.w	r7, #2
 800840a:	4629      	mov	r1, r5
 800840c:	4620      	mov	r0, r4
 800840e:	bf18      	it	ne
 8008410:	f04a 0a02 	orrne.w	sl, sl, #2
 8008414:	1b76      	subs	r6, r6, r5
 8008416:	f7ff fdf4 	bl	8008002 <rshift>
 800841a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800841e:	f1ba 0f00 	cmp.w	sl, #0
 8008422:	d048      	beq.n	80084b6 <__gethex+0x3e2>
 8008424:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008428:	2b02      	cmp	r3, #2
 800842a:	d015      	beq.n	8008458 <__gethex+0x384>
 800842c:	2b03      	cmp	r3, #3
 800842e:	d017      	beq.n	8008460 <__gethex+0x38c>
 8008430:	2b01      	cmp	r3, #1
 8008432:	d109      	bne.n	8008448 <__gethex+0x374>
 8008434:	f01a 0f02 	tst.w	sl, #2
 8008438:	d006      	beq.n	8008448 <__gethex+0x374>
 800843a:	f8d9 0000 	ldr.w	r0, [r9]
 800843e:	ea4a 0a00 	orr.w	sl, sl, r0
 8008442:	f01a 0f01 	tst.w	sl, #1
 8008446:	d10e      	bne.n	8008466 <__gethex+0x392>
 8008448:	f047 0710 	orr.w	r7, r7, #16
 800844c:	e033      	b.n	80084b6 <__gethex+0x3e2>
 800844e:	f04f 0a01 	mov.w	sl, #1
 8008452:	e7cf      	b.n	80083f4 <__gethex+0x320>
 8008454:	2701      	movs	r7, #1
 8008456:	e7e2      	b.n	800841e <__gethex+0x34a>
 8008458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800845a:	f1c3 0301 	rsb	r3, r3, #1
 800845e:	9315      	str	r3, [sp, #84]	; 0x54
 8008460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0f0      	beq.n	8008448 <__gethex+0x374>
 8008466:	f04f 0c00 	mov.w	ip, #0
 800846a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800846e:	f104 0314 	add.w	r3, r4, #20
 8008472:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008476:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800847a:	4618      	mov	r0, r3
 800847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008480:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008484:	d01c      	beq.n	80084c0 <__gethex+0x3ec>
 8008486:	3201      	adds	r2, #1
 8008488:	6002      	str	r2, [r0, #0]
 800848a:	2f02      	cmp	r7, #2
 800848c:	f104 0314 	add.w	r3, r4, #20
 8008490:	d13d      	bne.n	800850e <__gethex+0x43a>
 8008492:	f8d8 2000 	ldr.w	r2, [r8]
 8008496:	3a01      	subs	r2, #1
 8008498:	42b2      	cmp	r2, r6
 800849a:	d10a      	bne.n	80084b2 <__gethex+0x3de>
 800849c:	2201      	movs	r2, #1
 800849e:	1171      	asrs	r1, r6, #5
 80084a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084a4:	f006 061f 	and.w	r6, r6, #31
 80084a8:	fa02 f606 	lsl.w	r6, r2, r6
 80084ac:	421e      	tst	r6, r3
 80084ae:	bf18      	it	ne
 80084b0:	4617      	movne	r7, r2
 80084b2:	f047 0720 	orr.w	r7, r7, #32
 80084b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084b8:	601c      	str	r4, [r3, #0]
 80084ba:	9b06      	ldr	r3, [sp, #24]
 80084bc:	601d      	str	r5, [r3, #0]
 80084be:	e69b      	b.n	80081f8 <__gethex+0x124>
 80084c0:	4299      	cmp	r1, r3
 80084c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80084c6:	d8d8      	bhi.n	800847a <__gethex+0x3a6>
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	459b      	cmp	fp, r3
 80084cc:	db17      	blt.n	80084fe <__gethex+0x42a>
 80084ce:	6861      	ldr	r1, [r4, #4]
 80084d0:	9802      	ldr	r0, [sp, #8]
 80084d2:	3101      	adds	r1, #1
 80084d4:	f000 f9a6 	bl	8008824 <_Balloc>
 80084d8:	4681      	mov	r9, r0
 80084da:	b918      	cbnz	r0, 80084e4 <__gethex+0x410>
 80084dc:	4602      	mov	r2, r0
 80084de:	2184      	movs	r1, #132	; 0x84
 80084e0:	4b19      	ldr	r3, [pc, #100]	; (8008548 <__gethex+0x474>)
 80084e2:	e6ac      	b.n	800823e <__gethex+0x16a>
 80084e4:	6922      	ldr	r2, [r4, #16]
 80084e6:	f104 010c 	add.w	r1, r4, #12
 80084ea:	3202      	adds	r2, #2
 80084ec:	0092      	lsls	r2, r2, #2
 80084ee:	300c      	adds	r0, #12
 80084f0:	f7fc fd6a 	bl	8004fc8 <memcpy>
 80084f4:	4621      	mov	r1, r4
 80084f6:	9802      	ldr	r0, [sp, #8]
 80084f8:	f000 f9d4 	bl	80088a4 <_Bfree>
 80084fc:	464c      	mov	r4, r9
 80084fe:	6923      	ldr	r3, [r4, #16]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	6122      	str	r2, [r4, #16]
 8008504:	2201      	movs	r2, #1
 8008506:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800850a:	615a      	str	r2, [r3, #20]
 800850c:	e7bd      	b.n	800848a <__gethex+0x3b6>
 800850e:	6922      	ldr	r2, [r4, #16]
 8008510:	455a      	cmp	r2, fp
 8008512:	dd0b      	ble.n	800852c <__gethex+0x458>
 8008514:	2101      	movs	r1, #1
 8008516:	4620      	mov	r0, r4
 8008518:	f7ff fd73 	bl	8008002 <rshift>
 800851c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008520:	3501      	adds	r5, #1
 8008522:	42ab      	cmp	r3, r5
 8008524:	f6ff aed5 	blt.w	80082d2 <__gethex+0x1fe>
 8008528:	2701      	movs	r7, #1
 800852a:	e7c2      	b.n	80084b2 <__gethex+0x3de>
 800852c:	f016 061f 	ands.w	r6, r6, #31
 8008530:	d0fa      	beq.n	8008528 <__gethex+0x454>
 8008532:	449a      	add	sl, r3
 8008534:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008538:	f000 fa6a 	bl	8008a10 <__hi0bits>
 800853c:	f1c6 0620 	rsb	r6, r6, #32
 8008540:	42b0      	cmp	r0, r6
 8008542:	dbe7      	blt.n	8008514 <__gethex+0x440>
 8008544:	e7f0      	b.n	8008528 <__gethex+0x454>
 8008546:	bf00      	nop
 8008548:	0800a453 	.word	0x0800a453

0800854c <L_shift>:
 800854c:	f1c2 0208 	rsb	r2, r2, #8
 8008550:	0092      	lsls	r2, r2, #2
 8008552:	b570      	push	{r4, r5, r6, lr}
 8008554:	f1c2 0620 	rsb	r6, r2, #32
 8008558:	6843      	ldr	r3, [r0, #4]
 800855a:	6804      	ldr	r4, [r0, #0]
 800855c:	fa03 f506 	lsl.w	r5, r3, r6
 8008560:	432c      	orrs	r4, r5
 8008562:	40d3      	lsrs	r3, r2
 8008564:	6004      	str	r4, [r0, #0]
 8008566:	f840 3f04 	str.w	r3, [r0, #4]!
 800856a:	4288      	cmp	r0, r1
 800856c:	d3f4      	bcc.n	8008558 <L_shift+0xc>
 800856e:	bd70      	pop	{r4, r5, r6, pc}

08008570 <__match>:
 8008570:	b530      	push	{r4, r5, lr}
 8008572:	6803      	ldr	r3, [r0, #0]
 8008574:	3301      	adds	r3, #1
 8008576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857a:	b914      	cbnz	r4, 8008582 <__match+0x12>
 800857c:	6003      	str	r3, [r0, #0]
 800857e:	2001      	movs	r0, #1
 8008580:	bd30      	pop	{r4, r5, pc}
 8008582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008586:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800858a:	2d19      	cmp	r5, #25
 800858c:	bf98      	it	ls
 800858e:	3220      	addls	r2, #32
 8008590:	42a2      	cmp	r2, r4
 8008592:	d0f0      	beq.n	8008576 <__match+0x6>
 8008594:	2000      	movs	r0, #0
 8008596:	e7f3      	b.n	8008580 <__match+0x10>

08008598 <__hexnan>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	2500      	movs	r5, #0
 800859e:	680b      	ldr	r3, [r1, #0]
 80085a0:	4682      	mov	sl, r0
 80085a2:	115e      	asrs	r6, r3, #5
 80085a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80085a8:	f013 031f 	ands.w	r3, r3, #31
 80085ac:	bf18      	it	ne
 80085ae:	3604      	addne	r6, #4
 80085b0:	1f37      	subs	r7, r6, #4
 80085b2:	4690      	mov	r8, r2
 80085b4:	46b9      	mov	r9, r7
 80085b6:	463c      	mov	r4, r7
 80085b8:	46ab      	mov	fp, r5
 80085ba:	b087      	sub	sp, #28
 80085bc:	6801      	ldr	r1, [r0, #0]
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	f846 5c04 	str.w	r5, [r6, #-4]
 80085c4:	9502      	str	r5, [sp, #8]
 80085c6:	784a      	ldrb	r2, [r1, #1]
 80085c8:	1c4b      	adds	r3, r1, #1
 80085ca:	9303      	str	r3, [sp, #12]
 80085cc:	b342      	cbz	r2, 8008620 <__hexnan+0x88>
 80085ce:	4610      	mov	r0, r2
 80085d0:	9105      	str	r1, [sp, #20]
 80085d2:	9204      	str	r2, [sp, #16]
 80085d4:	f7ff fd68 	bl	80080a8 <__hexdig_fun>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d14f      	bne.n	800867c <__hexnan+0xe4>
 80085dc:	9a04      	ldr	r2, [sp, #16]
 80085de:	9905      	ldr	r1, [sp, #20]
 80085e0:	2a20      	cmp	r2, #32
 80085e2:	d818      	bhi.n	8008616 <__hexnan+0x7e>
 80085e4:	9b02      	ldr	r3, [sp, #8]
 80085e6:	459b      	cmp	fp, r3
 80085e8:	dd13      	ble.n	8008612 <__hexnan+0x7a>
 80085ea:	454c      	cmp	r4, r9
 80085ec:	d206      	bcs.n	80085fc <__hexnan+0x64>
 80085ee:	2d07      	cmp	r5, #7
 80085f0:	dc04      	bgt.n	80085fc <__hexnan+0x64>
 80085f2:	462a      	mov	r2, r5
 80085f4:	4649      	mov	r1, r9
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff ffa8 	bl	800854c <L_shift>
 80085fc:	4544      	cmp	r4, r8
 80085fe:	d950      	bls.n	80086a2 <__hexnan+0x10a>
 8008600:	2300      	movs	r3, #0
 8008602:	f1a4 0904 	sub.w	r9, r4, #4
 8008606:	f844 3c04 	str.w	r3, [r4, #-4]
 800860a:	461d      	mov	r5, r3
 800860c:	464c      	mov	r4, r9
 800860e:	f8cd b008 	str.w	fp, [sp, #8]
 8008612:	9903      	ldr	r1, [sp, #12]
 8008614:	e7d7      	b.n	80085c6 <__hexnan+0x2e>
 8008616:	2a29      	cmp	r2, #41	; 0x29
 8008618:	d156      	bne.n	80086c8 <__hexnan+0x130>
 800861a:	3102      	adds	r1, #2
 800861c:	f8ca 1000 	str.w	r1, [sl]
 8008620:	f1bb 0f00 	cmp.w	fp, #0
 8008624:	d050      	beq.n	80086c8 <__hexnan+0x130>
 8008626:	454c      	cmp	r4, r9
 8008628:	d206      	bcs.n	8008638 <__hexnan+0xa0>
 800862a:	2d07      	cmp	r5, #7
 800862c:	dc04      	bgt.n	8008638 <__hexnan+0xa0>
 800862e:	462a      	mov	r2, r5
 8008630:	4649      	mov	r1, r9
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff ff8a 	bl	800854c <L_shift>
 8008638:	4544      	cmp	r4, r8
 800863a:	d934      	bls.n	80086a6 <__hexnan+0x10e>
 800863c:	4623      	mov	r3, r4
 800863e:	f1a8 0204 	sub.w	r2, r8, #4
 8008642:	f853 1b04 	ldr.w	r1, [r3], #4
 8008646:	429f      	cmp	r7, r3
 8008648:	f842 1f04 	str.w	r1, [r2, #4]!
 800864c:	d2f9      	bcs.n	8008642 <__hexnan+0xaa>
 800864e:	1b3b      	subs	r3, r7, r4
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	3304      	adds	r3, #4
 8008656:	3401      	adds	r4, #1
 8008658:	3e03      	subs	r6, #3
 800865a:	42b4      	cmp	r4, r6
 800865c:	bf88      	it	hi
 800865e:	2304      	movhi	r3, #4
 8008660:	2200      	movs	r2, #0
 8008662:	4443      	add	r3, r8
 8008664:	f843 2b04 	str.w	r2, [r3], #4
 8008668:	429f      	cmp	r7, r3
 800866a:	d2fb      	bcs.n	8008664 <__hexnan+0xcc>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	b91b      	cbnz	r3, 8008678 <__hexnan+0xe0>
 8008670:	4547      	cmp	r7, r8
 8008672:	d127      	bne.n	80086c4 <__hexnan+0x12c>
 8008674:	2301      	movs	r3, #1
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	2005      	movs	r0, #5
 800867a:	e026      	b.n	80086ca <__hexnan+0x132>
 800867c:	3501      	adds	r5, #1
 800867e:	2d08      	cmp	r5, #8
 8008680:	f10b 0b01 	add.w	fp, fp, #1
 8008684:	dd06      	ble.n	8008694 <__hexnan+0xfc>
 8008686:	4544      	cmp	r4, r8
 8008688:	d9c3      	bls.n	8008612 <__hexnan+0x7a>
 800868a:	2300      	movs	r3, #0
 800868c:	2501      	movs	r5, #1
 800868e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008692:	3c04      	subs	r4, #4
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	f000 000f 	and.w	r0, r0, #15
 800869a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	e7b7      	b.n	8008612 <__hexnan+0x7a>
 80086a2:	2508      	movs	r5, #8
 80086a4:	e7b5      	b.n	8008612 <__hexnan+0x7a>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0df      	beq.n	800866c <__hexnan+0xd4>
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	f1c3 0320 	rsb	r3, r3, #32
 80086b4:	fa22 f303 	lsr.w	r3, r2, r3
 80086b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086bc:	401a      	ands	r2, r3
 80086be:	f846 2c04 	str.w	r2, [r6, #-4]
 80086c2:	e7d3      	b.n	800866c <__hexnan+0xd4>
 80086c4:	3f04      	subs	r7, #4
 80086c6:	e7d1      	b.n	800866c <__hexnan+0xd4>
 80086c8:	2004      	movs	r0, #4
 80086ca:	b007      	add	sp, #28
 80086cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086d0 <_localeconv_r>:
 80086d0:	4800      	ldr	r0, [pc, #0]	; (80086d4 <_localeconv_r+0x4>)
 80086d2:	4770      	bx	lr
 80086d4:	200001a0 	.word	0x200001a0

080086d8 <__retarget_lock_init_recursive>:
 80086d8:	4770      	bx	lr

080086da <__retarget_lock_acquire_recursive>:
 80086da:	4770      	bx	lr

080086dc <__retarget_lock_release_recursive>:
 80086dc:	4770      	bx	lr
	...

080086e0 <_lseek_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	2200      	movs	r2, #0
 80086ea:	4d05      	ldr	r5, [pc, #20]	; (8008700 <_lseek_r+0x20>)
 80086ec:	602a      	str	r2, [r5, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f7f9 ffbc 	bl	800266c <_lseek>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_lseek_r+0x1e>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_lseek_r+0x1e>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	2000087c 	.word	0x2000087c

08008704 <__swhatbuf_r>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	460e      	mov	r6, r1
 8008708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870c:	4614      	mov	r4, r2
 800870e:	2900      	cmp	r1, #0
 8008710:	461d      	mov	r5, r3
 8008712:	b096      	sub	sp, #88	; 0x58
 8008714:	da07      	bge.n	8008726 <__swhatbuf_r+0x22>
 8008716:	2300      	movs	r3, #0
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	89b3      	ldrh	r3, [r6, #12]
 800871c:	061a      	lsls	r2, r3, #24
 800871e:	d410      	bmi.n	8008742 <__swhatbuf_r+0x3e>
 8008720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008724:	e00e      	b.n	8008744 <__swhatbuf_r+0x40>
 8008726:	466a      	mov	r2, sp
 8008728:	f001 fb28 	bl	8009d7c <_fstat_r>
 800872c:	2800      	cmp	r0, #0
 800872e:	dbf2      	blt.n	8008716 <__swhatbuf_r+0x12>
 8008730:	9a01      	ldr	r2, [sp, #4]
 8008732:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008736:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800873a:	425a      	negs	r2, r3
 800873c:	415a      	adcs	r2, r3
 800873e:	602a      	str	r2, [r5, #0]
 8008740:	e7ee      	b.n	8008720 <__swhatbuf_r+0x1c>
 8008742:	2340      	movs	r3, #64	; 0x40
 8008744:	2000      	movs	r0, #0
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	b016      	add	sp, #88	; 0x58
 800874a:	bd70      	pop	{r4, r5, r6, pc}

0800874c <__smakebuf_r>:
 800874c:	898b      	ldrh	r3, [r1, #12]
 800874e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008750:	079d      	lsls	r5, r3, #30
 8008752:	4606      	mov	r6, r0
 8008754:	460c      	mov	r4, r1
 8008756:	d507      	bpl.n	8008768 <__smakebuf_r+0x1c>
 8008758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	2301      	movs	r3, #1
 8008762:	6163      	str	r3, [r4, #20]
 8008764:	b002      	add	sp, #8
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	466a      	mov	r2, sp
 800876a:	ab01      	add	r3, sp, #4
 800876c:	f7ff ffca 	bl	8008704 <__swhatbuf_r>
 8008770:	9900      	ldr	r1, [sp, #0]
 8008772:	4605      	mov	r5, r0
 8008774:	4630      	mov	r0, r6
 8008776:	f7fc fc89 	bl	800508c <_malloc_r>
 800877a:	b948      	cbnz	r0, 8008790 <__smakebuf_r+0x44>
 800877c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008780:	059a      	lsls	r2, r3, #22
 8008782:	d4ef      	bmi.n	8008764 <__smakebuf_r+0x18>
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	f043 0302 	orr.w	r3, r3, #2
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	e7e3      	b.n	8008758 <__smakebuf_r+0xc>
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <__smakebuf_r+0x7c>)
 8008792:	62b3      	str	r3, [r6, #40]	; 0x28
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	6120      	str	r0, [r4, #16]
 80087a2:	6163      	str	r3, [r4, #20]
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	b15b      	cbz	r3, 80087c0 <__smakebuf_r+0x74>
 80087a8:	4630      	mov	r0, r6
 80087aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ae:	f001 faf7 	bl	8009da0 <_isatty_r>
 80087b2:	b128      	cbz	r0, 80087c0 <__smakebuf_r+0x74>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	89a0      	ldrh	r0, [r4, #12]
 80087c2:	4305      	orrs	r5, r0
 80087c4:	81a5      	strh	r5, [r4, #12]
 80087c6:	e7cd      	b.n	8008764 <__smakebuf_r+0x18>
 80087c8:	08007e61 	.word	0x08007e61

080087cc <__ascii_mbtowc>:
 80087cc:	b082      	sub	sp, #8
 80087ce:	b901      	cbnz	r1, 80087d2 <__ascii_mbtowc+0x6>
 80087d0:	a901      	add	r1, sp, #4
 80087d2:	b142      	cbz	r2, 80087e6 <__ascii_mbtowc+0x1a>
 80087d4:	b14b      	cbz	r3, 80087ea <__ascii_mbtowc+0x1e>
 80087d6:	7813      	ldrb	r3, [r2, #0]
 80087d8:	600b      	str	r3, [r1, #0]
 80087da:	7812      	ldrb	r2, [r2, #0]
 80087dc:	1e10      	subs	r0, r2, #0
 80087de:	bf18      	it	ne
 80087e0:	2001      	movne	r0, #1
 80087e2:	b002      	add	sp, #8
 80087e4:	4770      	bx	lr
 80087e6:	4610      	mov	r0, r2
 80087e8:	e7fb      	b.n	80087e2 <__ascii_mbtowc+0x16>
 80087ea:	f06f 0001 	mvn.w	r0, #1
 80087ee:	e7f8      	b.n	80087e2 <__ascii_mbtowc+0x16>

080087f0 <memchr>:
 80087f0:	4603      	mov	r3, r0
 80087f2:	b510      	push	{r4, lr}
 80087f4:	b2c9      	uxtb	r1, r1
 80087f6:	4402      	add	r2, r0
 80087f8:	4293      	cmp	r3, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	d101      	bne.n	8008802 <memchr+0x12>
 80087fe:	2000      	movs	r0, #0
 8008800:	e003      	b.n	800880a <memchr+0x1a>
 8008802:	7804      	ldrb	r4, [r0, #0]
 8008804:	3301      	adds	r3, #1
 8008806:	428c      	cmp	r4, r1
 8008808:	d1f6      	bne.n	80087f8 <memchr+0x8>
 800880a:	bd10      	pop	{r4, pc}

0800880c <__malloc_lock>:
 800880c:	4801      	ldr	r0, [pc, #4]	; (8008814 <__malloc_lock+0x8>)
 800880e:	f7ff bf64 	b.w	80086da <__retarget_lock_acquire_recursive>
 8008812:	bf00      	nop
 8008814:	20000874 	.word	0x20000874

08008818 <__malloc_unlock>:
 8008818:	4801      	ldr	r0, [pc, #4]	; (8008820 <__malloc_unlock+0x8>)
 800881a:	f7ff bf5f 	b.w	80086dc <__retarget_lock_release_recursive>
 800881e:	bf00      	nop
 8008820:	20000874 	.word	0x20000874

08008824 <_Balloc>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	b976      	cbnz	r6, 800884c <_Balloc+0x28>
 800882e:	2010      	movs	r0, #16
 8008830:	f7fc fbba 	bl	8004fa8 <malloc>
 8008834:	4602      	mov	r2, r0
 8008836:	6260      	str	r0, [r4, #36]	; 0x24
 8008838:	b920      	cbnz	r0, 8008844 <_Balloc+0x20>
 800883a:	2166      	movs	r1, #102	; 0x66
 800883c:	4b17      	ldr	r3, [pc, #92]	; (800889c <_Balloc+0x78>)
 800883e:	4818      	ldr	r0, [pc, #96]	; (80088a0 <_Balloc+0x7c>)
 8008840:	f001 fa6c 	bl	8009d1c <__assert_func>
 8008844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008848:	6006      	str	r6, [r0, #0]
 800884a:	60c6      	str	r6, [r0, #12]
 800884c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800884e:	68f3      	ldr	r3, [r6, #12]
 8008850:	b183      	cbz	r3, 8008874 <_Balloc+0x50>
 8008852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800885a:	b9b8      	cbnz	r0, 800888c <_Balloc+0x68>
 800885c:	2101      	movs	r1, #1
 800885e:	fa01 f605 	lsl.w	r6, r1, r5
 8008862:	1d72      	adds	r2, r6, #5
 8008864:	4620      	mov	r0, r4
 8008866:	0092      	lsls	r2, r2, #2
 8008868:	f000 fc94 	bl	8009194 <_calloc_r>
 800886c:	b160      	cbz	r0, 8008888 <_Balloc+0x64>
 800886e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008872:	e00e      	b.n	8008892 <_Balloc+0x6e>
 8008874:	2221      	movs	r2, #33	; 0x21
 8008876:	2104      	movs	r1, #4
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fc8b 	bl	8009194 <_calloc_r>
 800887e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008880:	60f0      	str	r0, [r6, #12]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e4      	bne.n	8008852 <_Balloc+0x2e>
 8008888:	2000      	movs	r0, #0
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	6802      	ldr	r2, [r0, #0]
 800888e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008892:	2300      	movs	r3, #0
 8008894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008898:	e7f7      	b.n	800888a <_Balloc+0x66>
 800889a:	bf00      	nop
 800889c:	0800a3dd 	.word	0x0800a3dd
 80088a0:	0800a544 	.word	0x0800a544

080088a4 <_Bfree>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088a8:	4605      	mov	r5, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	b976      	cbnz	r6, 80088cc <_Bfree+0x28>
 80088ae:	2010      	movs	r0, #16
 80088b0:	f7fc fb7a 	bl	8004fa8 <malloc>
 80088b4:	4602      	mov	r2, r0
 80088b6:	6268      	str	r0, [r5, #36]	; 0x24
 80088b8:	b920      	cbnz	r0, 80088c4 <_Bfree+0x20>
 80088ba:	218a      	movs	r1, #138	; 0x8a
 80088bc:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <_Bfree+0x3c>)
 80088be:	4809      	ldr	r0, [pc, #36]	; (80088e4 <_Bfree+0x40>)
 80088c0:	f001 fa2c 	bl	8009d1c <__assert_func>
 80088c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c8:	6006      	str	r6, [r0, #0]
 80088ca:	60c6      	str	r6, [r0, #12]
 80088cc:	b13c      	cbz	r4, 80088de <_Bfree+0x3a>
 80088ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088d0:	6862      	ldr	r2, [r4, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088d8:	6021      	str	r1, [r4, #0]
 80088da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	0800a3dd 	.word	0x0800a3dd
 80088e4:	0800a544 	.word	0x0800a544

080088e8 <__multadd>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	4698      	mov	r8, r3
 80088ee:	460c      	mov	r4, r1
 80088f0:	2300      	movs	r3, #0
 80088f2:	690e      	ldr	r6, [r1, #16]
 80088f4:	4607      	mov	r7, r0
 80088f6:	f101 0014 	add.w	r0, r1, #20
 80088fa:	6805      	ldr	r5, [r0, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	b2a9      	uxth	r1, r5
 8008900:	fb02 8101 	mla	r1, r2, r1, r8
 8008904:	0c2d      	lsrs	r5, r5, #16
 8008906:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800890a:	fb02 c505 	mla	r5, r2, r5, ip
 800890e:	b289      	uxth	r1, r1
 8008910:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008914:	429e      	cmp	r6, r3
 8008916:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800891a:	f840 1b04 	str.w	r1, [r0], #4
 800891e:	dcec      	bgt.n	80088fa <__multadd+0x12>
 8008920:	f1b8 0f00 	cmp.w	r8, #0
 8008924:	d022      	beq.n	800896c <__multadd+0x84>
 8008926:	68a3      	ldr	r3, [r4, #8]
 8008928:	42b3      	cmp	r3, r6
 800892a:	dc19      	bgt.n	8008960 <__multadd+0x78>
 800892c:	6861      	ldr	r1, [r4, #4]
 800892e:	4638      	mov	r0, r7
 8008930:	3101      	adds	r1, #1
 8008932:	f7ff ff77 	bl	8008824 <_Balloc>
 8008936:	4605      	mov	r5, r0
 8008938:	b928      	cbnz	r0, 8008946 <__multadd+0x5e>
 800893a:	4602      	mov	r2, r0
 800893c:	21b5      	movs	r1, #181	; 0xb5
 800893e:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <__multadd+0x8c>)
 8008940:	480d      	ldr	r0, [pc, #52]	; (8008978 <__multadd+0x90>)
 8008942:	f001 f9eb 	bl	8009d1c <__assert_func>
 8008946:	6922      	ldr	r2, [r4, #16]
 8008948:	f104 010c 	add.w	r1, r4, #12
 800894c:	3202      	adds	r2, #2
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	300c      	adds	r0, #12
 8008952:	f7fc fb39 	bl	8004fc8 <memcpy>
 8008956:	4621      	mov	r1, r4
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ffa3 	bl	80088a4 <_Bfree>
 800895e:	462c      	mov	r4, r5
 8008960:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008964:	3601      	adds	r6, #1
 8008966:	f8c3 8014 	str.w	r8, [r3, #20]
 800896a:	6126      	str	r6, [r4, #16]
 800896c:	4620      	mov	r0, r4
 800896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008972:	bf00      	nop
 8008974:	0800a453 	.word	0x0800a453
 8008978:	0800a544 	.word	0x0800a544

0800897c <__s2b>:
 800897c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008980:	4615      	mov	r5, r2
 8008982:	2209      	movs	r2, #9
 8008984:	461f      	mov	r7, r3
 8008986:	3308      	adds	r3, #8
 8008988:	460c      	mov	r4, r1
 800898a:	fb93 f3f2 	sdiv	r3, r3, r2
 800898e:	4606      	mov	r6, r0
 8008990:	2201      	movs	r2, #1
 8008992:	2100      	movs	r1, #0
 8008994:	429a      	cmp	r2, r3
 8008996:	db09      	blt.n	80089ac <__s2b+0x30>
 8008998:	4630      	mov	r0, r6
 800899a:	f7ff ff43 	bl	8008824 <_Balloc>
 800899e:	b940      	cbnz	r0, 80089b2 <__s2b+0x36>
 80089a0:	4602      	mov	r2, r0
 80089a2:	21ce      	movs	r1, #206	; 0xce
 80089a4:	4b18      	ldr	r3, [pc, #96]	; (8008a08 <__s2b+0x8c>)
 80089a6:	4819      	ldr	r0, [pc, #100]	; (8008a0c <__s2b+0x90>)
 80089a8:	f001 f9b8 	bl	8009d1c <__assert_func>
 80089ac:	0052      	lsls	r2, r2, #1
 80089ae:	3101      	adds	r1, #1
 80089b0:	e7f0      	b.n	8008994 <__s2b+0x18>
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	2d09      	cmp	r5, #9
 80089b6:	6143      	str	r3, [r0, #20]
 80089b8:	f04f 0301 	mov.w	r3, #1
 80089bc:	6103      	str	r3, [r0, #16]
 80089be:	dd16      	ble.n	80089ee <__s2b+0x72>
 80089c0:	f104 0909 	add.w	r9, r4, #9
 80089c4:	46c8      	mov	r8, r9
 80089c6:	442c      	add	r4, r5
 80089c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089cc:	4601      	mov	r1, r0
 80089ce:	220a      	movs	r2, #10
 80089d0:	4630      	mov	r0, r6
 80089d2:	3b30      	subs	r3, #48	; 0x30
 80089d4:	f7ff ff88 	bl	80088e8 <__multadd>
 80089d8:	45a0      	cmp	r8, r4
 80089da:	d1f5      	bne.n	80089c8 <__s2b+0x4c>
 80089dc:	f1a5 0408 	sub.w	r4, r5, #8
 80089e0:	444c      	add	r4, r9
 80089e2:	1b2d      	subs	r5, r5, r4
 80089e4:	1963      	adds	r3, r4, r5
 80089e6:	42bb      	cmp	r3, r7
 80089e8:	db04      	blt.n	80089f4 <__s2b+0x78>
 80089ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ee:	2509      	movs	r5, #9
 80089f0:	340a      	adds	r4, #10
 80089f2:	e7f6      	b.n	80089e2 <__s2b+0x66>
 80089f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089f8:	4601      	mov	r1, r0
 80089fa:	220a      	movs	r2, #10
 80089fc:	4630      	mov	r0, r6
 80089fe:	3b30      	subs	r3, #48	; 0x30
 8008a00:	f7ff ff72 	bl	80088e8 <__multadd>
 8008a04:	e7ee      	b.n	80089e4 <__s2b+0x68>
 8008a06:	bf00      	nop
 8008a08:	0800a453 	.word	0x0800a453
 8008a0c:	0800a544 	.word	0x0800a544

08008a10 <__hi0bits>:
 8008a10:	0c02      	lsrs	r2, r0, #16
 8008a12:	0412      	lsls	r2, r2, #16
 8008a14:	4603      	mov	r3, r0
 8008a16:	b9ca      	cbnz	r2, 8008a4c <__hi0bits+0x3c>
 8008a18:	0403      	lsls	r3, r0, #16
 8008a1a:	2010      	movs	r0, #16
 8008a1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008a20:	bf04      	itt	eq
 8008a22:	021b      	lsleq	r3, r3, #8
 8008a24:	3008      	addeq	r0, #8
 8008a26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008a2a:	bf04      	itt	eq
 8008a2c:	011b      	lsleq	r3, r3, #4
 8008a2e:	3004      	addeq	r0, #4
 8008a30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008a34:	bf04      	itt	eq
 8008a36:	009b      	lsleq	r3, r3, #2
 8008a38:	3002      	addeq	r0, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	db05      	blt.n	8008a4a <__hi0bits+0x3a>
 8008a3e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008a42:	f100 0001 	add.w	r0, r0, #1
 8008a46:	bf08      	it	eq
 8008a48:	2020      	moveq	r0, #32
 8008a4a:	4770      	bx	lr
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e7e5      	b.n	8008a1c <__hi0bits+0xc>

08008a50 <__lo0bits>:
 8008a50:	6803      	ldr	r3, [r0, #0]
 8008a52:	4602      	mov	r2, r0
 8008a54:	f013 0007 	ands.w	r0, r3, #7
 8008a58:	d00b      	beq.n	8008a72 <__lo0bits+0x22>
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	d422      	bmi.n	8008aa4 <__lo0bits+0x54>
 8008a5e:	0798      	lsls	r0, r3, #30
 8008a60:	bf49      	itett	mi
 8008a62:	085b      	lsrmi	r3, r3, #1
 8008a64:	089b      	lsrpl	r3, r3, #2
 8008a66:	2001      	movmi	r0, #1
 8008a68:	6013      	strmi	r3, [r2, #0]
 8008a6a:	bf5c      	itt	pl
 8008a6c:	2002      	movpl	r0, #2
 8008a6e:	6013      	strpl	r3, [r2, #0]
 8008a70:	4770      	bx	lr
 8008a72:	b299      	uxth	r1, r3
 8008a74:	b909      	cbnz	r1, 8008a7a <__lo0bits+0x2a>
 8008a76:	2010      	movs	r0, #16
 8008a78:	0c1b      	lsrs	r3, r3, #16
 8008a7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a7e:	bf04      	itt	eq
 8008a80:	0a1b      	lsreq	r3, r3, #8
 8008a82:	3008      	addeq	r0, #8
 8008a84:	0719      	lsls	r1, r3, #28
 8008a86:	bf04      	itt	eq
 8008a88:	091b      	lsreq	r3, r3, #4
 8008a8a:	3004      	addeq	r0, #4
 8008a8c:	0799      	lsls	r1, r3, #30
 8008a8e:	bf04      	itt	eq
 8008a90:	089b      	lsreq	r3, r3, #2
 8008a92:	3002      	addeq	r0, #2
 8008a94:	07d9      	lsls	r1, r3, #31
 8008a96:	d403      	bmi.n	8008aa0 <__lo0bits+0x50>
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	f100 0001 	add.w	r0, r0, #1
 8008a9e:	d003      	beq.n	8008aa8 <__lo0bits+0x58>
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	4770      	bx	lr
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	4770      	bx	lr
 8008aa8:	2020      	movs	r0, #32
 8008aaa:	4770      	bx	lr

08008aac <__i2b>:
 8008aac:	b510      	push	{r4, lr}
 8008aae:	460c      	mov	r4, r1
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	f7ff feb7 	bl	8008824 <_Balloc>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	b928      	cbnz	r0, 8008ac6 <__i2b+0x1a>
 8008aba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008abe:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <__i2b+0x24>)
 8008ac0:	4804      	ldr	r0, [pc, #16]	; (8008ad4 <__i2b+0x28>)
 8008ac2:	f001 f92b 	bl	8009d1c <__assert_func>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	6144      	str	r4, [r0, #20]
 8008aca:	6103      	str	r3, [r0, #16]
 8008acc:	bd10      	pop	{r4, pc}
 8008ace:	bf00      	nop
 8008ad0:	0800a453 	.word	0x0800a453
 8008ad4:	0800a544 	.word	0x0800a544

08008ad8 <__multiply>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	4614      	mov	r4, r2
 8008ade:	690a      	ldr	r2, [r1, #16]
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	bfbe      	ittt	lt
 8008ae8:	460b      	movlt	r3, r1
 8008aea:	4625      	movlt	r5, r4
 8008aec:	461c      	movlt	r4, r3
 8008aee:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008af2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008af6:	68ab      	ldr	r3, [r5, #8]
 8008af8:	6869      	ldr	r1, [r5, #4]
 8008afa:	eb0a 0709 	add.w	r7, sl, r9
 8008afe:	42bb      	cmp	r3, r7
 8008b00:	b085      	sub	sp, #20
 8008b02:	bfb8      	it	lt
 8008b04:	3101      	addlt	r1, #1
 8008b06:	f7ff fe8d 	bl	8008824 <_Balloc>
 8008b0a:	b930      	cbnz	r0, 8008b1a <__multiply+0x42>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	f240 115d 	movw	r1, #349	; 0x15d
 8008b12:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <__multiply+0x140>)
 8008b14:	4841      	ldr	r0, [pc, #260]	; (8008c1c <__multiply+0x144>)
 8008b16:	f001 f901 	bl	8009d1c <__assert_func>
 8008b1a:	f100 0614 	add.w	r6, r0, #20
 8008b1e:	4633      	mov	r3, r6
 8008b20:	2200      	movs	r2, #0
 8008b22:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b26:	4543      	cmp	r3, r8
 8008b28:	d31e      	bcc.n	8008b68 <__multiply+0x90>
 8008b2a:	f105 0c14 	add.w	ip, r5, #20
 8008b2e:	f104 0314 	add.w	r3, r4, #20
 8008b32:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b36:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	ebac 0205 	sub.w	r2, ip, r5
 8008b40:	3a15      	subs	r2, #21
 8008b42:	f022 0203 	bic.w	r2, r2, #3
 8008b46:	3204      	adds	r2, #4
 8008b48:	f105 0115 	add.w	r1, r5, #21
 8008b4c:	458c      	cmp	ip, r1
 8008b4e:	bf38      	it	cc
 8008b50:	2204      	movcc	r2, #4
 8008b52:	9201      	str	r2, [sp, #4]
 8008b54:	9a02      	ldr	r2, [sp, #8]
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d808      	bhi.n	8008b6e <__multiply+0x96>
 8008b5c:	2f00      	cmp	r7, #0
 8008b5e:	dc55      	bgt.n	8008c0c <__multiply+0x134>
 8008b60:	6107      	str	r7, [r0, #16]
 8008b62:	b005      	add	sp, #20
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	f843 2b04 	str.w	r2, [r3], #4
 8008b6c:	e7db      	b.n	8008b26 <__multiply+0x4e>
 8008b6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b72:	f1ba 0f00 	cmp.w	sl, #0
 8008b76:	d020      	beq.n	8008bba <__multiply+0xe2>
 8008b78:	46b1      	mov	r9, r6
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f105 0e14 	add.w	lr, r5, #20
 8008b80:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b84:	f8d9 b000 	ldr.w	fp, [r9]
 8008b88:	b2a1      	uxth	r1, r4
 8008b8a:	fa1f fb8b 	uxth.w	fp, fp
 8008b8e:	fb0a b101 	mla	r1, sl, r1, fp
 8008b92:	4411      	add	r1, r2
 8008b94:	f8d9 2000 	ldr.w	r2, [r9]
 8008b98:	0c24      	lsrs	r4, r4, #16
 8008b9a:	0c12      	lsrs	r2, r2, #16
 8008b9c:	fb0a 2404 	mla	r4, sl, r4, r2
 8008ba0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ba4:	b289      	uxth	r1, r1
 8008ba6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008baa:	45f4      	cmp	ip, lr
 8008bac:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008bb0:	f849 1b04 	str.w	r1, [r9], #4
 8008bb4:	d8e4      	bhi.n	8008b80 <__multiply+0xa8>
 8008bb6:	9901      	ldr	r1, [sp, #4]
 8008bb8:	5072      	str	r2, [r6, r1]
 8008bba:	9a03      	ldr	r2, [sp, #12]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bc2:	f1b9 0f00 	cmp.w	r9, #0
 8008bc6:	d01f      	beq.n	8008c08 <__multiply+0x130>
 8008bc8:	46b6      	mov	lr, r6
 8008bca:	f04f 0a00 	mov.w	sl, #0
 8008bce:	6834      	ldr	r4, [r6, #0]
 8008bd0:	f105 0114 	add.w	r1, r5, #20
 8008bd4:	880a      	ldrh	r2, [r1, #0]
 8008bd6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008bda:	b2a4      	uxth	r4, r4
 8008bdc:	fb09 b202 	mla	r2, r9, r2, fp
 8008be0:	4492      	add	sl, r2
 8008be2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008be6:	f84e 4b04 	str.w	r4, [lr], #4
 8008bea:	f851 4b04 	ldr.w	r4, [r1], #4
 8008bee:	f8be 2000 	ldrh.w	r2, [lr]
 8008bf2:	0c24      	lsrs	r4, r4, #16
 8008bf4:	fb09 2404 	mla	r4, r9, r4, r2
 8008bf8:	458c      	cmp	ip, r1
 8008bfa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008bfe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c02:	d8e7      	bhi.n	8008bd4 <__multiply+0xfc>
 8008c04:	9a01      	ldr	r2, [sp, #4]
 8008c06:	50b4      	str	r4, [r6, r2]
 8008c08:	3604      	adds	r6, #4
 8008c0a:	e7a3      	b.n	8008b54 <__multiply+0x7c>
 8008c0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1a5      	bne.n	8008b60 <__multiply+0x88>
 8008c14:	3f01      	subs	r7, #1
 8008c16:	e7a1      	b.n	8008b5c <__multiply+0x84>
 8008c18:	0800a453 	.word	0x0800a453
 8008c1c:	0800a544 	.word	0x0800a544

08008c20 <__pow5mult>:
 8008c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c24:	4615      	mov	r5, r2
 8008c26:	f012 0203 	ands.w	r2, r2, #3
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	d007      	beq.n	8008c40 <__pow5mult+0x20>
 8008c30:	4c25      	ldr	r4, [pc, #148]	; (8008cc8 <__pow5mult+0xa8>)
 8008c32:	3a01      	subs	r2, #1
 8008c34:	2300      	movs	r3, #0
 8008c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c3a:	f7ff fe55 	bl	80088e8 <__multadd>
 8008c3e:	4607      	mov	r7, r0
 8008c40:	10ad      	asrs	r5, r5, #2
 8008c42:	d03d      	beq.n	8008cc0 <__pow5mult+0xa0>
 8008c44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c46:	b97c      	cbnz	r4, 8008c68 <__pow5mult+0x48>
 8008c48:	2010      	movs	r0, #16
 8008c4a:	f7fc f9ad 	bl	8004fa8 <malloc>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6270      	str	r0, [r6, #36]	; 0x24
 8008c52:	b928      	cbnz	r0, 8008c60 <__pow5mult+0x40>
 8008c54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c58:	4b1c      	ldr	r3, [pc, #112]	; (8008ccc <__pow5mult+0xac>)
 8008c5a:	481d      	ldr	r0, [pc, #116]	; (8008cd0 <__pow5mult+0xb0>)
 8008c5c:	f001 f85e 	bl	8009d1c <__assert_func>
 8008c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c64:	6004      	str	r4, [r0, #0]
 8008c66:	60c4      	str	r4, [r0, #12]
 8008c68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c70:	b94c      	cbnz	r4, 8008c86 <__pow5mult+0x66>
 8008c72:	f240 2171 	movw	r1, #625	; 0x271
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7ff ff18 	bl	8008aac <__i2b>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c84:	6003      	str	r3, [r0, #0]
 8008c86:	f04f 0900 	mov.w	r9, #0
 8008c8a:	07eb      	lsls	r3, r5, #31
 8008c8c:	d50a      	bpl.n	8008ca4 <__pow5mult+0x84>
 8008c8e:	4639      	mov	r1, r7
 8008c90:	4622      	mov	r2, r4
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7ff ff20 	bl	8008ad8 <__multiply>
 8008c98:	4680      	mov	r8, r0
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7ff fe01 	bl	80088a4 <_Bfree>
 8008ca2:	4647      	mov	r7, r8
 8008ca4:	106d      	asrs	r5, r5, #1
 8008ca6:	d00b      	beq.n	8008cc0 <__pow5mult+0xa0>
 8008ca8:	6820      	ldr	r0, [r4, #0]
 8008caa:	b938      	cbnz	r0, 8008cbc <__pow5mult+0x9c>
 8008cac:	4622      	mov	r2, r4
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7ff ff11 	bl	8008ad8 <__multiply>
 8008cb6:	6020      	str	r0, [r4, #0]
 8008cb8:	f8c0 9000 	str.w	r9, [r0]
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	e7e4      	b.n	8008c8a <__pow5mult+0x6a>
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc6:	bf00      	nop
 8008cc8:	0800a698 	.word	0x0800a698
 8008ccc:	0800a3dd 	.word	0x0800a3dd
 8008cd0:	0800a544 	.word	0x0800a544

08008cd4 <__lshift>:
 8008cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd8:	460c      	mov	r4, r1
 8008cda:	4607      	mov	r7, r0
 8008cdc:	4691      	mov	r9, r2
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	6849      	ldr	r1, [r1, #4]
 8008ce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ce6:	68a3      	ldr	r3, [r4, #8]
 8008ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cec:	f108 0601 	add.w	r6, r8, #1
 8008cf0:	42b3      	cmp	r3, r6
 8008cf2:	db0b      	blt.n	8008d0c <__lshift+0x38>
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	f7ff fd95 	bl	8008824 <_Balloc>
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	b948      	cbnz	r0, 8008d12 <__lshift+0x3e>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d04:	4b27      	ldr	r3, [pc, #156]	; (8008da4 <__lshift+0xd0>)
 8008d06:	4828      	ldr	r0, [pc, #160]	; (8008da8 <__lshift+0xd4>)
 8008d08:	f001 f808 	bl	8009d1c <__assert_func>
 8008d0c:	3101      	adds	r1, #1
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	e7ee      	b.n	8008cf0 <__lshift+0x1c>
 8008d12:	2300      	movs	r3, #0
 8008d14:	f100 0114 	add.w	r1, r0, #20
 8008d18:	f100 0210 	add.w	r2, r0, #16
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	4553      	cmp	r3, sl
 8008d20:	db33      	blt.n	8008d8a <__lshift+0xb6>
 8008d22:	6920      	ldr	r0, [r4, #16]
 8008d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d28:	f104 0314 	add.w	r3, r4, #20
 8008d2c:	f019 091f 	ands.w	r9, r9, #31
 8008d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d38:	d02b      	beq.n	8008d92 <__lshift+0xbe>
 8008d3a:	468a      	mov	sl, r1
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d42:	6818      	ldr	r0, [r3, #0]
 8008d44:	fa00 f009 	lsl.w	r0, r0, r9
 8008d48:	4302      	orrs	r2, r0
 8008d4a:	f84a 2b04 	str.w	r2, [sl], #4
 8008d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d52:	459c      	cmp	ip, r3
 8008d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d58:	d8f3      	bhi.n	8008d42 <__lshift+0x6e>
 8008d5a:	ebac 0304 	sub.w	r3, ip, r4
 8008d5e:	3b15      	subs	r3, #21
 8008d60:	f023 0303 	bic.w	r3, r3, #3
 8008d64:	3304      	adds	r3, #4
 8008d66:	f104 0015 	add.w	r0, r4, #21
 8008d6a:	4584      	cmp	ip, r0
 8008d6c:	bf38      	it	cc
 8008d6e:	2304      	movcc	r3, #4
 8008d70:	50ca      	str	r2, [r1, r3]
 8008d72:	b10a      	cbz	r2, 8008d78 <__lshift+0xa4>
 8008d74:	f108 0602 	add.w	r6, r8, #2
 8008d78:	3e01      	subs	r6, #1
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	612e      	str	r6, [r5, #16]
 8008d80:	f7ff fd90 	bl	80088a4 <_Bfree>
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d8e:	3301      	adds	r3, #1
 8008d90:	e7c5      	b.n	8008d1e <__lshift+0x4a>
 8008d92:	3904      	subs	r1, #4
 8008d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d98:	459c      	cmp	ip, r3
 8008d9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d9e:	d8f9      	bhi.n	8008d94 <__lshift+0xc0>
 8008da0:	e7ea      	b.n	8008d78 <__lshift+0xa4>
 8008da2:	bf00      	nop
 8008da4:	0800a453 	.word	0x0800a453
 8008da8:	0800a544 	.word	0x0800a544

08008dac <__mcmp>:
 8008dac:	4603      	mov	r3, r0
 8008dae:	690a      	ldr	r2, [r1, #16]
 8008db0:	6900      	ldr	r0, [r0, #16]
 8008db2:	b530      	push	{r4, r5, lr}
 8008db4:	1a80      	subs	r0, r0, r2
 8008db6:	d10d      	bne.n	8008dd4 <__mcmp+0x28>
 8008db8:	3314      	adds	r3, #20
 8008dba:	3114      	adds	r1, #20
 8008dbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008dc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008dc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008dcc:	4295      	cmp	r5, r2
 8008dce:	d002      	beq.n	8008dd6 <__mcmp+0x2a>
 8008dd0:	d304      	bcc.n	8008ddc <__mcmp+0x30>
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	bd30      	pop	{r4, r5, pc}
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	d3f4      	bcc.n	8008dc4 <__mcmp+0x18>
 8008dda:	e7fb      	b.n	8008dd4 <__mcmp+0x28>
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	e7f8      	b.n	8008dd4 <__mcmp+0x28>
	...

08008de4 <__mdiff>:
 8008de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	460c      	mov	r4, r1
 8008dea:	4606      	mov	r6, r0
 8008dec:	4611      	mov	r1, r2
 8008dee:	4620      	mov	r0, r4
 8008df0:	4692      	mov	sl, r2
 8008df2:	f7ff ffdb 	bl	8008dac <__mcmp>
 8008df6:	1e05      	subs	r5, r0, #0
 8008df8:	d111      	bne.n	8008e1e <__mdiff+0x3a>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff fd11 	bl	8008824 <_Balloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	b928      	cbnz	r0, 8008e12 <__mdiff+0x2e>
 8008e06:	f240 2132 	movw	r1, #562	; 0x232
 8008e0a:	4b3c      	ldr	r3, [pc, #240]	; (8008efc <__mdiff+0x118>)
 8008e0c:	483c      	ldr	r0, [pc, #240]	; (8008f00 <__mdiff+0x11c>)
 8008e0e:	f000 ff85 	bl	8009d1c <__assert_func>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e18:	4610      	mov	r0, r2
 8008e1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1e:	bfa4      	itt	ge
 8008e20:	4653      	movge	r3, sl
 8008e22:	46a2      	movge	sl, r4
 8008e24:	4630      	mov	r0, r6
 8008e26:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008e2a:	bfa6      	itte	ge
 8008e2c:	461c      	movge	r4, r3
 8008e2e:	2500      	movge	r5, #0
 8008e30:	2501      	movlt	r5, #1
 8008e32:	f7ff fcf7 	bl	8008824 <_Balloc>
 8008e36:	4602      	mov	r2, r0
 8008e38:	b918      	cbnz	r0, 8008e42 <__mdiff+0x5e>
 8008e3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e3e:	4b2f      	ldr	r3, [pc, #188]	; (8008efc <__mdiff+0x118>)
 8008e40:	e7e4      	b.n	8008e0c <__mdiff+0x28>
 8008e42:	f100 0814 	add.w	r8, r0, #20
 8008e46:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008e4a:	60c5      	str	r5, [r0, #12]
 8008e4c:	f04f 0c00 	mov.w	ip, #0
 8008e50:	f10a 0514 	add.w	r5, sl, #20
 8008e54:	f10a 0010 	add.w	r0, sl, #16
 8008e58:	46c2      	mov	sl, r8
 8008e5a:	6926      	ldr	r6, [r4, #16]
 8008e5c:	f104 0914 	add.w	r9, r4, #20
 8008e60:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008e64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e68:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008e6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e70:	fa1f f18b 	uxth.w	r1, fp
 8008e74:	4461      	add	r1, ip
 8008e76:	fa1f fc83 	uxth.w	ip, r3
 8008e7a:	0c1b      	lsrs	r3, r3, #16
 8008e7c:	eba1 010c 	sub.w	r1, r1, ip
 8008e80:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e84:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e88:	b289      	uxth	r1, r1
 8008e8a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008e8e:	454e      	cmp	r6, r9
 8008e90:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e94:	f84a 3b04 	str.w	r3, [sl], #4
 8008e98:	d8e6      	bhi.n	8008e68 <__mdiff+0x84>
 8008e9a:	1b33      	subs	r3, r6, r4
 8008e9c:	3b15      	subs	r3, #21
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	3415      	adds	r4, #21
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	42a6      	cmp	r6, r4
 8008ea8:	bf38      	it	cc
 8008eaa:	2304      	movcc	r3, #4
 8008eac:	441d      	add	r5, r3
 8008eae:	4443      	add	r3, r8
 8008eb0:	461e      	mov	r6, r3
 8008eb2:	462c      	mov	r4, r5
 8008eb4:	4574      	cmp	r4, lr
 8008eb6:	d30e      	bcc.n	8008ed6 <__mdiff+0xf2>
 8008eb8:	f10e 0103 	add.w	r1, lr, #3
 8008ebc:	1b49      	subs	r1, r1, r5
 8008ebe:	f021 0103 	bic.w	r1, r1, #3
 8008ec2:	3d03      	subs	r5, #3
 8008ec4:	45ae      	cmp	lr, r5
 8008ec6:	bf38      	it	cc
 8008ec8:	2100      	movcc	r1, #0
 8008eca:	4419      	add	r1, r3
 8008ecc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ed0:	b18b      	cbz	r3, 8008ef6 <__mdiff+0x112>
 8008ed2:	6117      	str	r7, [r2, #16]
 8008ed4:	e7a0      	b.n	8008e18 <__mdiff+0x34>
 8008ed6:	f854 8b04 	ldr.w	r8, [r4], #4
 8008eda:	fa1f f188 	uxth.w	r1, r8
 8008ede:	4461      	add	r1, ip
 8008ee0:	1408      	asrs	r0, r1, #16
 8008ee2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008ee6:	b289      	uxth	r1, r1
 8008ee8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008eec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ef0:	f846 1b04 	str.w	r1, [r6], #4
 8008ef4:	e7de      	b.n	8008eb4 <__mdiff+0xd0>
 8008ef6:	3f01      	subs	r7, #1
 8008ef8:	e7e8      	b.n	8008ecc <__mdiff+0xe8>
 8008efa:	bf00      	nop
 8008efc:	0800a453 	.word	0x0800a453
 8008f00:	0800a544 	.word	0x0800a544

08008f04 <__ulp>:
 8008f04:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <__ulp+0x48>)
 8008f06:	400b      	ands	r3, r1
 8008f08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dd02      	ble.n	8008f16 <__ulp+0x12>
 8008f10:	2000      	movs	r0, #0
 8008f12:	4619      	mov	r1, r3
 8008f14:	4770      	bx	lr
 8008f16:	425b      	negs	r3, r3
 8008f18:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008f1c:	f04f 0000 	mov.w	r0, #0
 8008f20:	f04f 0100 	mov.w	r1, #0
 8008f24:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f28:	da04      	bge.n	8008f34 <__ulp+0x30>
 8008f2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f2e:	fa43 f102 	asr.w	r1, r3, r2
 8008f32:	4770      	bx	lr
 8008f34:	f1a2 0314 	sub.w	r3, r2, #20
 8008f38:	2b1e      	cmp	r3, #30
 8008f3a:	bfd6      	itet	le
 8008f3c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008f40:	2301      	movgt	r3, #1
 8008f42:	fa22 f303 	lsrle.w	r3, r2, r3
 8008f46:	4618      	mov	r0, r3
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	7ff00000 	.word	0x7ff00000

08008f50 <__b2d>:
 8008f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f54:	6907      	ldr	r7, [r0, #16]
 8008f56:	f100 0914 	add.w	r9, r0, #20
 8008f5a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008f5e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008f62:	f1a7 0804 	sub.w	r8, r7, #4
 8008f66:	4630      	mov	r0, r6
 8008f68:	f7ff fd52 	bl	8008a10 <__hi0bits>
 8008f6c:	f1c0 0320 	rsb	r3, r0, #32
 8008f70:	280a      	cmp	r0, #10
 8008f72:	600b      	str	r3, [r1, #0]
 8008f74:	491f      	ldr	r1, [pc, #124]	; (8008ff4 <__b2d+0xa4>)
 8008f76:	dc17      	bgt.n	8008fa8 <__b2d+0x58>
 8008f78:	45c1      	cmp	r9, r8
 8008f7a:	bf28      	it	cs
 8008f7c:	2200      	movcs	r2, #0
 8008f7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f82:	fa26 f30c 	lsr.w	r3, r6, ip
 8008f86:	bf38      	it	cc
 8008f88:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008f8c:	ea43 0501 	orr.w	r5, r3, r1
 8008f90:	f100 0315 	add.w	r3, r0, #21
 8008f94:	fa06 f303 	lsl.w	r3, r6, r3
 8008f98:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f9c:	ea43 0402 	orr.w	r4, r3, r2
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa8:	45c1      	cmp	r9, r8
 8008faa:	bf2e      	itee	cs
 8008fac:	2200      	movcs	r2, #0
 8008fae:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008fb2:	f1a7 0808 	subcc.w	r8, r7, #8
 8008fb6:	f1b0 030b 	subs.w	r3, r0, #11
 8008fba:	d016      	beq.n	8008fea <__b2d+0x9a>
 8008fbc:	f1c3 0720 	rsb	r7, r3, #32
 8008fc0:	fa22 f107 	lsr.w	r1, r2, r7
 8008fc4:	45c8      	cmp	r8, r9
 8008fc6:	fa06 f603 	lsl.w	r6, r6, r3
 8008fca:	ea46 0601 	orr.w	r6, r6, r1
 8008fce:	bf94      	ite	ls
 8008fd0:	2100      	movls	r1, #0
 8008fd2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008fd6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008fda:	fa02 f003 	lsl.w	r0, r2, r3
 8008fde:	40f9      	lsrs	r1, r7
 8008fe0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008fe4:	ea40 0401 	orr.w	r4, r0, r1
 8008fe8:	e7da      	b.n	8008fa0 <__b2d+0x50>
 8008fea:	4614      	mov	r4, r2
 8008fec:	ea46 0501 	orr.w	r5, r6, r1
 8008ff0:	e7d6      	b.n	8008fa0 <__b2d+0x50>
 8008ff2:	bf00      	nop
 8008ff4:	3ff00000 	.word	0x3ff00000

08008ff8 <__d2b>:
 8008ff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009002:	4690      	mov	r8, r2
 8009004:	461d      	mov	r5, r3
 8009006:	f7ff fc0d 	bl	8008824 <_Balloc>
 800900a:	4604      	mov	r4, r0
 800900c:	b930      	cbnz	r0, 800901c <__d2b+0x24>
 800900e:	4602      	mov	r2, r0
 8009010:	f240 310a 	movw	r1, #778	; 0x30a
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <__d2b+0xb0>)
 8009016:	4825      	ldr	r0, [pc, #148]	; (80090ac <__d2b+0xb4>)
 8009018:	f000 fe80 	bl	8009d1c <__assert_func>
 800901c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009020:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009024:	bb2d      	cbnz	r5, 8009072 <__d2b+0x7a>
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	f1b8 0300 	subs.w	r3, r8, #0
 800902c:	d026      	beq.n	800907c <__d2b+0x84>
 800902e:	4668      	mov	r0, sp
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	f7ff fd0d 	bl	8008a50 <__lo0bits>
 8009036:	9900      	ldr	r1, [sp, #0]
 8009038:	b1f0      	cbz	r0, 8009078 <__d2b+0x80>
 800903a:	9a01      	ldr	r2, [sp, #4]
 800903c:	f1c0 0320 	rsb	r3, r0, #32
 8009040:	fa02 f303 	lsl.w	r3, r2, r3
 8009044:	430b      	orrs	r3, r1
 8009046:	40c2      	lsrs	r2, r0
 8009048:	6163      	str	r3, [r4, #20]
 800904a:	9201      	str	r2, [sp, #4]
 800904c:	9b01      	ldr	r3, [sp, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	bf14      	ite	ne
 8009052:	2102      	movne	r1, #2
 8009054:	2101      	moveq	r1, #1
 8009056:	61a3      	str	r3, [r4, #24]
 8009058:	6121      	str	r1, [r4, #16]
 800905a:	b1c5      	cbz	r5, 800908e <__d2b+0x96>
 800905c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009060:	4405      	add	r5, r0
 8009062:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009066:	603d      	str	r5, [r7, #0]
 8009068:	6030      	str	r0, [r6, #0]
 800906a:	4620      	mov	r0, r4
 800906c:	b002      	add	sp, #8
 800906e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009076:	e7d6      	b.n	8009026 <__d2b+0x2e>
 8009078:	6161      	str	r1, [r4, #20]
 800907a:	e7e7      	b.n	800904c <__d2b+0x54>
 800907c:	a801      	add	r0, sp, #4
 800907e:	f7ff fce7 	bl	8008a50 <__lo0bits>
 8009082:	2101      	movs	r1, #1
 8009084:	9b01      	ldr	r3, [sp, #4]
 8009086:	6121      	str	r1, [r4, #16]
 8009088:	6163      	str	r3, [r4, #20]
 800908a:	3020      	adds	r0, #32
 800908c:	e7e5      	b.n	800905a <__d2b+0x62>
 800908e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009092:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009096:	6038      	str	r0, [r7, #0]
 8009098:	6918      	ldr	r0, [r3, #16]
 800909a:	f7ff fcb9 	bl	8008a10 <__hi0bits>
 800909e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80090a2:	6031      	str	r1, [r6, #0]
 80090a4:	e7e1      	b.n	800906a <__d2b+0x72>
 80090a6:	bf00      	nop
 80090a8:	0800a453 	.word	0x0800a453
 80090ac:	0800a544 	.word	0x0800a544

080090b0 <__ratio>:
 80090b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	4688      	mov	r8, r1
 80090b6:	4669      	mov	r1, sp
 80090b8:	4681      	mov	r9, r0
 80090ba:	f7ff ff49 	bl	8008f50 <__b2d>
 80090be:	460f      	mov	r7, r1
 80090c0:	4604      	mov	r4, r0
 80090c2:	460d      	mov	r5, r1
 80090c4:	4640      	mov	r0, r8
 80090c6:	a901      	add	r1, sp, #4
 80090c8:	f7ff ff42 	bl	8008f50 <__b2d>
 80090cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090d4:	468b      	mov	fp, r1
 80090d6:	eba3 0c02 	sub.w	ip, r3, r2
 80090da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfd5      	itete	le
 80090e8:	460a      	movle	r2, r1
 80090ea:	462a      	movgt	r2, r5
 80090ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090f0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090f4:	bfd8      	it	le
 80090f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80090fa:	465b      	mov	r3, fp
 80090fc:	4602      	mov	r2, r0
 80090fe:	4639      	mov	r1, r7
 8009100:	4620      	mov	r0, r4
 8009102:	f7f7 fb7f 	bl	8000804 <__aeabi_ddiv>
 8009106:	b003      	add	sp, #12
 8009108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800910c <__copybits>:
 800910c:	3901      	subs	r1, #1
 800910e:	b570      	push	{r4, r5, r6, lr}
 8009110:	1149      	asrs	r1, r1, #5
 8009112:	6914      	ldr	r4, [r2, #16]
 8009114:	3101      	adds	r1, #1
 8009116:	f102 0314 	add.w	r3, r2, #20
 800911a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800911e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009122:	1f05      	subs	r5, r0, #4
 8009124:	42a3      	cmp	r3, r4
 8009126:	d30c      	bcc.n	8009142 <__copybits+0x36>
 8009128:	1aa3      	subs	r3, r4, r2
 800912a:	3b11      	subs	r3, #17
 800912c:	f023 0303 	bic.w	r3, r3, #3
 8009130:	3211      	adds	r2, #17
 8009132:	42a2      	cmp	r2, r4
 8009134:	bf88      	it	hi
 8009136:	2300      	movhi	r3, #0
 8009138:	4418      	add	r0, r3
 800913a:	2300      	movs	r3, #0
 800913c:	4288      	cmp	r0, r1
 800913e:	d305      	bcc.n	800914c <__copybits+0x40>
 8009140:	bd70      	pop	{r4, r5, r6, pc}
 8009142:	f853 6b04 	ldr.w	r6, [r3], #4
 8009146:	f845 6f04 	str.w	r6, [r5, #4]!
 800914a:	e7eb      	b.n	8009124 <__copybits+0x18>
 800914c:	f840 3b04 	str.w	r3, [r0], #4
 8009150:	e7f4      	b.n	800913c <__copybits+0x30>

08009152 <__any_on>:
 8009152:	f100 0214 	add.w	r2, r0, #20
 8009156:	6900      	ldr	r0, [r0, #16]
 8009158:	114b      	asrs	r3, r1, #5
 800915a:	4298      	cmp	r0, r3
 800915c:	b510      	push	{r4, lr}
 800915e:	db11      	blt.n	8009184 <__any_on+0x32>
 8009160:	dd0a      	ble.n	8009178 <__any_on+0x26>
 8009162:	f011 011f 	ands.w	r1, r1, #31
 8009166:	d007      	beq.n	8009178 <__any_on+0x26>
 8009168:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800916c:	fa24 f001 	lsr.w	r0, r4, r1
 8009170:	fa00 f101 	lsl.w	r1, r0, r1
 8009174:	428c      	cmp	r4, r1
 8009176:	d10b      	bne.n	8009190 <__any_on+0x3e>
 8009178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800917c:	4293      	cmp	r3, r2
 800917e:	d803      	bhi.n	8009188 <__any_on+0x36>
 8009180:	2000      	movs	r0, #0
 8009182:	bd10      	pop	{r4, pc}
 8009184:	4603      	mov	r3, r0
 8009186:	e7f7      	b.n	8009178 <__any_on+0x26>
 8009188:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800918c:	2900      	cmp	r1, #0
 800918e:	d0f5      	beq.n	800917c <__any_on+0x2a>
 8009190:	2001      	movs	r0, #1
 8009192:	e7f6      	b.n	8009182 <__any_on+0x30>

08009194 <_calloc_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	fb02 f501 	mul.w	r5, r2, r1
 800919a:	4629      	mov	r1, r5
 800919c:	f7fb ff76 	bl	800508c <_malloc_r>
 80091a0:	4604      	mov	r4, r0
 80091a2:	b118      	cbz	r0, 80091ac <_calloc_r+0x18>
 80091a4:	462a      	mov	r2, r5
 80091a6:	2100      	movs	r1, #0
 80091a8:	f7fb ff1c 	bl	8004fe4 <memset>
 80091ac:	4620      	mov	r0, r4
 80091ae:	bd38      	pop	{r3, r4, r5, pc}

080091b0 <_realloc_r>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	4607      	mov	r7, r0
 80091b4:	4614      	mov	r4, r2
 80091b6:	460e      	mov	r6, r1
 80091b8:	b921      	cbnz	r1, 80091c4 <_realloc_r+0x14>
 80091ba:	4611      	mov	r1, r2
 80091bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091c0:	f7fb bf64 	b.w	800508c <_malloc_r>
 80091c4:	b922      	cbnz	r2, 80091d0 <_realloc_r+0x20>
 80091c6:	f7fb ff15 	bl	8004ff4 <_free_r>
 80091ca:	4625      	mov	r5, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d0:	f000 fe10 	bl	8009df4 <_malloc_usable_size_r>
 80091d4:	42a0      	cmp	r0, r4
 80091d6:	d20f      	bcs.n	80091f8 <_realloc_r+0x48>
 80091d8:	4621      	mov	r1, r4
 80091da:	4638      	mov	r0, r7
 80091dc:	f7fb ff56 	bl	800508c <_malloc_r>
 80091e0:	4605      	mov	r5, r0
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d0f2      	beq.n	80091cc <_realloc_r+0x1c>
 80091e6:	4631      	mov	r1, r6
 80091e8:	4622      	mov	r2, r4
 80091ea:	f7fb feed 	bl	8004fc8 <memcpy>
 80091ee:	4631      	mov	r1, r6
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7fb feff 	bl	8004ff4 <_free_r>
 80091f6:	e7e9      	b.n	80091cc <_realloc_r+0x1c>
 80091f8:	4635      	mov	r5, r6
 80091fa:	e7e7      	b.n	80091cc <_realloc_r+0x1c>

080091fc <__ssputs_r>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	688e      	ldr	r6, [r1, #8]
 8009202:	4682      	mov	sl, r0
 8009204:	429e      	cmp	r6, r3
 8009206:	460c      	mov	r4, r1
 8009208:	4690      	mov	r8, r2
 800920a:	461f      	mov	r7, r3
 800920c:	d838      	bhi.n	8009280 <__ssputs_r+0x84>
 800920e:	898a      	ldrh	r2, [r1, #12]
 8009210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009214:	d032      	beq.n	800927c <__ssputs_r+0x80>
 8009216:	6825      	ldr	r5, [r4, #0]
 8009218:	6909      	ldr	r1, [r1, #16]
 800921a:	3301      	adds	r3, #1
 800921c:	eba5 0901 	sub.w	r9, r5, r1
 8009220:	6965      	ldr	r5, [r4, #20]
 8009222:	444b      	add	r3, r9
 8009224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800922c:	106d      	asrs	r5, r5, #1
 800922e:	429d      	cmp	r5, r3
 8009230:	bf38      	it	cc
 8009232:	461d      	movcc	r5, r3
 8009234:	0553      	lsls	r3, r2, #21
 8009236:	d531      	bpl.n	800929c <__ssputs_r+0xa0>
 8009238:	4629      	mov	r1, r5
 800923a:	f7fb ff27 	bl	800508c <_malloc_r>
 800923e:	4606      	mov	r6, r0
 8009240:	b950      	cbnz	r0, 8009258 <__ssputs_r+0x5c>
 8009242:	230c      	movs	r3, #12
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	f8ca 3000 	str.w	r3, [sl]
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	464a      	mov	r2, r9
 800925a:	6921      	ldr	r1, [r4, #16]
 800925c:	f7fb feb4 	bl	8004fc8 <memcpy>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	6126      	str	r6, [r4, #16]
 800926e:	444e      	add	r6, r9
 8009270:	6026      	str	r6, [r4, #0]
 8009272:	463e      	mov	r6, r7
 8009274:	6165      	str	r5, [r4, #20]
 8009276:	eba5 0509 	sub.w	r5, r5, r9
 800927a:	60a5      	str	r5, [r4, #8]
 800927c:	42be      	cmp	r6, r7
 800927e:	d900      	bls.n	8009282 <__ssputs_r+0x86>
 8009280:	463e      	mov	r6, r7
 8009282:	4632      	mov	r2, r6
 8009284:	4641      	mov	r1, r8
 8009286:	6820      	ldr	r0, [r4, #0]
 8009288:	f000 fd9a 	bl	8009dc0 <memmove>
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	1b9b      	subs	r3, r3, r6
 8009292:	4432      	add	r2, r6
 8009294:	2000      	movs	r0, #0
 8009296:	60a3      	str	r3, [r4, #8]
 8009298:	6022      	str	r2, [r4, #0]
 800929a:	e7db      	b.n	8009254 <__ssputs_r+0x58>
 800929c:	462a      	mov	r2, r5
 800929e:	f7ff ff87 	bl	80091b0 <_realloc_r>
 80092a2:	4606      	mov	r6, r0
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d1e1      	bne.n	800926c <__ssputs_r+0x70>
 80092a8:	4650      	mov	r0, sl
 80092aa:	6921      	ldr	r1, [r4, #16]
 80092ac:	f7fb fea2 	bl	8004ff4 <_free_r>
 80092b0:	e7c7      	b.n	8009242 <__ssputs_r+0x46>
	...

080092b4 <_svfiprintf_r>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	4698      	mov	r8, r3
 80092ba:	898b      	ldrh	r3, [r1, #12]
 80092bc:	4607      	mov	r7, r0
 80092be:	061b      	lsls	r3, r3, #24
 80092c0:	460d      	mov	r5, r1
 80092c2:	4614      	mov	r4, r2
 80092c4:	b09d      	sub	sp, #116	; 0x74
 80092c6:	d50e      	bpl.n	80092e6 <_svfiprintf_r+0x32>
 80092c8:	690b      	ldr	r3, [r1, #16]
 80092ca:	b963      	cbnz	r3, 80092e6 <_svfiprintf_r+0x32>
 80092cc:	2140      	movs	r1, #64	; 0x40
 80092ce:	f7fb fedd 	bl	800508c <_malloc_r>
 80092d2:	6028      	str	r0, [r5, #0]
 80092d4:	6128      	str	r0, [r5, #16]
 80092d6:	b920      	cbnz	r0, 80092e2 <_svfiprintf_r+0x2e>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	e0d1      	b.n	8009486 <_svfiprintf_r+0x1d2>
 80092e2:	2340      	movs	r3, #64	; 0x40
 80092e4:	616b      	str	r3, [r5, #20]
 80092e6:	2300      	movs	r3, #0
 80092e8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ea:	2320      	movs	r3, #32
 80092ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092f0:	2330      	movs	r3, #48	; 0x30
 80092f2:	f04f 0901 	mov.w	r9, #1
 80092f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80094a0 <_svfiprintf_r+0x1ec>
 80092fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009302:	4623      	mov	r3, r4
 8009304:	469a      	mov	sl, r3
 8009306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930a:	b10a      	cbz	r2, 8009310 <_svfiprintf_r+0x5c>
 800930c:	2a25      	cmp	r2, #37	; 0x25
 800930e:	d1f9      	bne.n	8009304 <_svfiprintf_r+0x50>
 8009310:	ebba 0b04 	subs.w	fp, sl, r4
 8009314:	d00b      	beq.n	800932e <_svfiprintf_r+0x7a>
 8009316:	465b      	mov	r3, fp
 8009318:	4622      	mov	r2, r4
 800931a:	4629      	mov	r1, r5
 800931c:	4638      	mov	r0, r7
 800931e:	f7ff ff6d 	bl	80091fc <__ssputs_r>
 8009322:	3001      	adds	r0, #1
 8009324:	f000 80aa 	beq.w	800947c <_svfiprintf_r+0x1c8>
 8009328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932a:	445a      	add	r2, fp
 800932c:	9209      	str	r2, [sp, #36]	; 0x24
 800932e:	f89a 3000 	ldrb.w	r3, [sl]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80a2 	beq.w	800947c <_svfiprintf_r+0x1c8>
 8009338:	2300      	movs	r3, #0
 800933a:	f04f 32ff 	mov.w	r2, #4294967295
 800933e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009342:	f10a 0a01 	add.w	sl, sl, #1
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800934e:	931a      	str	r3, [sp, #104]	; 0x68
 8009350:	4654      	mov	r4, sl
 8009352:	2205      	movs	r2, #5
 8009354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009358:	4851      	ldr	r0, [pc, #324]	; (80094a0 <_svfiprintf_r+0x1ec>)
 800935a:	f7ff fa49 	bl	80087f0 <memchr>
 800935e:	9a04      	ldr	r2, [sp, #16]
 8009360:	b9d8      	cbnz	r0, 800939a <_svfiprintf_r+0xe6>
 8009362:	06d0      	lsls	r0, r2, #27
 8009364:	bf44      	itt	mi
 8009366:	2320      	movmi	r3, #32
 8009368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936c:	0711      	lsls	r1, r2, #28
 800936e:	bf44      	itt	mi
 8009370:	232b      	movmi	r3, #43	; 0x2b
 8009372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009376:	f89a 3000 	ldrb.w	r3, [sl]
 800937a:	2b2a      	cmp	r3, #42	; 0x2a
 800937c:	d015      	beq.n	80093aa <_svfiprintf_r+0xf6>
 800937e:	4654      	mov	r4, sl
 8009380:	2000      	movs	r0, #0
 8009382:	f04f 0c0a 	mov.w	ip, #10
 8009386:	9a07      	ldr	r2, [sp, #28]
 8009388:	4621      	mov	r1, r4
 800938a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938e:	3b30      	subs	r3, #48	; 0x30
 8009390:	2b09      	cmp	r3, #9
 8009392:	d94e      	bls.n	8009432 <_svfiprintf_r+0x17e>
 8009394:	b1b0      	cbz	r0, 80093c4 <_svfiprintf_r+0x110>
 8009396:	9207      	str	r2, [sp, #28]
 8009398:	e014      	b.n	80093c4 <_svfiprintf_r+0x110>
 800939a:	eba0 0308 	sub.w	r3, r0, r8
 800939e:	fa09 f303 	lsl.w	r3, r9, r3
 80093a2:	4313      	orrs	r3, r2
 80093a4:	46a2      	mov	sl, r4
 80093a6:	9304      	str	r3, [sp, #16]
 80093a8:	e7d2      	b.n	8009350 <_svfiprintf_r+0x9c>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	1d19      	adds	r1, r3, #4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	9103      	str	r1, [sp, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bfbb      	ittet	lt
 80093b6:	425b      	neglt	r3, r3
 80093b8:	f042 0202 	orrlt.w	r2, r2, #2
 80093bc:	9307      	strge	r3, [sp, #28]
 80093be:	9307      	strlt	r3, [sp, #28]
 80093c0:	bfb8      	it	lt
 80093c2:	9204      	strlt	r2, [sp, #16]
 80093c4:	7823      	ldrb	r3, [r4, #0]
 80093c6:	2b2e      	cmp	r3, #46	; 0x2e
 80093c8:	d10c      	bne.n	80093e4 <_svfiprintf_r+0x130>
 80093ca:	7863      	ldrb	r3, [r4, #1]
 80093cc:	2b2a      	cmp	r3, #42	; 0x2a
 80093ce:	d135      	bne.n	800943c <_svfiprintf_r+0x188>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	3402      	adds	r4, #2
 80093d4:	1d1a      	adds	r2, r3, #4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	9203      	str	r2, [sp, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bfb8      	it	lt
 80093de:	f04f 33ff 	movlt.w	r3, #4294967295
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094b0 <_svfiprintf_r+0x1fc>
 80093e8:	2203      	movs	r2, #3
 80093ea:	4650      	mov	r0, sl
 80093ec:	7821      	ldrb	r1, [r4, #0]
 80093ee:	f7ff f9ff 	bl	80087f0 <memchr>
 80093f2:	b140      	cbz	r0, 8009406 <_svfiprintf_r+0x152>
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	eba0 000a 	sub.w	r0, r0, sl
 80093fa:	fa03 f000 	lsl.w	r0, r3, r0
 80093fe:	9b04      	ldr	r3, [sp, #16]
 8009400:	3401      	adds	r4, #1
 8009402:	4303      	orrs	r3, r0
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800940a:	2206      	movs	r2, #6
 800940c:	4825      	ldr	r0, [pc, #148]	; (80094a4 <_svfiprintf_r+0x1f0>)
 800940e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009412:	f7ff f9ed 	bl	80087f0 <memchr>
 8009416:	2800      	cmp	r0, #0
 8009418:	d038      	beq.n	800948c <_svfiprintf_r+0x1d8>
 800941a:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <_svfiprintf_r+0x1f4>)
 800941c:	bb1b      	cbnz	r3, 8009466 <_svfiprintf_r+0x1b2>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	3307      	adds	r3, #7
 8009422:	f023 0307 	bic.w	r3, r3, #7
 8009426:	3308      	adds	r3, #8
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942c:	4433      	add	r3, r6
 800942e:	9309      	str	r3, [sp, #36]	; 0x24
 8009430:	e767      	b.n	8009302 <_svfiprintf_r+0x4e>
 8009432:	460c      	mov	r4, r1
 8009434:	2001      	movs	r0, #1
 8009436:	fb0c 3202 	mla	r2, ip, r2, r3
 800943a:	e7a5      	b.n	8009388 <_svfiprintf_r+0xd4>
 800943c:	2300      	movs	r3, #0
 800943e:	f04f 0c0a 	mov.w	ip, #10
 8009442:	4619      	mov	r1, r3
 8009444:	3401      	adds	r4, #1
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	4620      	mov	r0, r4
 800944a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944e:	3a30      	subs	r2, #48	; 0x30
 8009450:	2a09      	cmp	r2, #9
 8009452:	d903      	bls.n	800945c <_svfiprintf_r+0x1a8>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0c5      	beq.n	80093e4 <_svfiprintf_r+0x130>
 8009458:	9105      	str	r1, [sp, #20]
 800945a:	e7c3      	b.n	80093e4 <_svfiprintf_r+0x130>
 800945c:	4604      	mov	r4, r0
 800945e:	2301      	movs	r3, #1
 8009460:	fb0c 2101 	mla	r1, ip, r1, r2
 8009464:	e7f0      	b.n	8009448 <_svfiprintf_r+0x194>
 8009466:	ab03      	add	r3, sp, #12
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	462a      	mov	r2, r5
 800946c:	4638      	mov	r0, r7
 800946e:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <_svfiprintf_r+0x1f8>)
 8009470:	a904      	add	r1, sp, #16
 8009472:	f7fb ff03 	bl	800527c <_printf_float>
 8009476:	1c42      	adds	r2, r0, #1
 8009478:	4606      	mov	r6, r0
 800947a:	d1d6      	bne.n	800942a <_svfiprintf_r+0x176>
 800947c:	89ab      	ldrh	r3, [r5, #12]
 800947e:	065b      	lsls	r3, r3, #25
 8009480:	f53f af2c 	bmi.w	80092dc <_svfiprintf_r+0x28>
 8009484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009486:	b01d      	add	sp, #116	; 0x74
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	ab03      	add	r3, sp, #12
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	462a      	mov	r2, r5
 8009492:	4638      	mov	r0, r7
 8009494:	4b05      	ldr	r3, [pc, #20]	; (80094ac <_svfiprintf_r+0x1f8>)
 8009496:	a904      	add	r1, sp, #16
 8009498:	f7fc f98c 	bl	80057b4 <_printf_i>
 800949c:	e7eb      	b.n	8009476 <_svfiprintf_r+0x1c2>
 800949e:	bf00      	nop
 80094a0:	0800a6a4 	.word	0x0800a6a4
 80094a4:	0800a6ae 	.word	0x0800a6ae
 80094a8:	0800527d 	.word	0x0800527d
 80094ac:	080091fd 	.word	0x080091fd
 80094b0:	0800a6aa 	.word	0x0800a6aa

080094b4 <_sungetc_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	1c4b      	adds	r3, r1, #1
 80094b8:	4614      	mov	r4, r2
 80094ba:	d103      	bne.n	80094c4 <_sungetc_r+0x10>
 80094bc:	f04f 35ff 	mov.w	r5, #4294967295
 80094c0:	4628      	mov	r0, r5
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	8993      	ldrh	r3, [r2, #12]
 80094c6:	b2cd      	uxtb	r5, r1
 80094c8:	f023 0320 	bic.w	r3, r3, #32
 80094cc:	8193      	strh	r3, [r2, #12]
 80094ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094d0:	6852      	ldr	r2, [r2, #4]
 80094d2:	b18b      	cbz	r3, 80094f8 <_sungetc_r+0x44>
 80094d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094d6:	4293      	cmp	r3, r2
 80094d8:	dd08      	ble.n	80094ec <_sungetc_r+0x38>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	1e5a      	subs	r2, r3, #1
 80094de:	6022      	str	r2, [r4, #0]
 80094e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	3301      	adds	r3, #1
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	e7e9      	b.n	80094c0 <_sungetc_r+0xc>
 80094ec:	4621      	mov	r1, r4
 80094ee:	f000 fbcf 	bl	8009c90 <__submore>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d0f1      	beq.n	80094da <_sungetc_r+0x26>
 80094f6:	e7e1      	b.n	80094bc <_sungetc_r+0x8>
 80094f8:	6921      	ldr	r1, [r4, #16]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	b151      	cbz	r1, 8009514 <_sungetc_r+0x60>
 80094fe:	4299      	cmp	r1, r3
 8009500:	d208      	bcs.n	8009514 <_sungetc_r+0x60>
 8009502:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009506:	42a9      	cmp	r1, r5
 8009508:	d104      	bne.n	8009514 <_sungetc_r+0x60>
 800950a:	3b01      	subs	r3, #1
 800950c:	3201      	adds	r2, #1
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	6062      	str	r2, [r4, #4]
 8009512:	e7d5      	b.n	80094c0 <_sungetc_r+0xc>
 8009514:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800951c:	6363      	str	r3, [r4, #52]	; 0x34
 800951e:	2303      	movs	r3, #3
 8009520:	63a3      	str	r3, [r4, #56]	; 0x38
 8009522:	4623      	mov	r3, r4
 8009524:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	2301      	movs	r3, #1
 800952c:	e7dc      	b.n	80094e8 <_sungetc_r+0x34>

0800952e <__ssrefill_r>:
 800952e:	b510      	push	{r4, lr}
 8009530:	460c      	mov	r4, r1
 8009532:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009534:	b169      	cbz	r1, 8009552 <__ssrefill_r+0x24>
 8009536:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800953a:	4299      	cmp	r1, r3
 800953c:	d001      	beq.n	8009542 <__ssrefill_r+0x14>
 800953e:	f7fb fd59 	bl	8004ff4 <_free_r>
 8009542:	2000      	movs	r0, #0
 8009544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009546:	6360      	str	r0, [r4, #52]	; 0x34
 8009548:	6063      	str	r3, [r4, #4]
 800954a:	b113      	cbz	r3, 8009552 <__ssrefill_r+0x24>
 800954c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	bd10      	pop	{r4, pc}
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	2300      	movs	r3, #0
 800955c:	6063      	str	r3, [r4, #4]
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f043 0320 	orr.w	r3, r3, #32
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7f3      	b.n	8009550 <__ssrefill_r+0x22>

08009568 <__ssvfiscanf_r>:
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	460c      	mov	r4, r1
 800956e:	2100      	movs	r1, #0
 8009570:	4606      	mov	r6, r0
 8009572:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009576:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800957a:	49b3      	ldr	r1, [pc, #716]	; (8009848 <__ssvfiscanf_r+0x2e0>)
 800957c:	f10d 0804 	add.w	r8, sp, #4
 8009580:	91a0      	str	r1, [sp, #640]	; 0x280
 8009582:	49b2      	ldr	r1, [pc, #712]	; (800984c <__ssvfiscanf_r+0x2e4>)
 8009584:	4fb2      	ldr	r7, [pc, #712]	; (8009850 <__ssvfiscanf_r+0x2e8>)
 8009586:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8009854 <__ssvfiscanf_r+0x2ec>
 800958a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800958e:	91a1      	str	r1, [sp, #644]	; 0x284
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	f892 a000 	ldrb.w	sl, [r2]
 8009596:	f1ba 0f00 	cmp.w	sl, #0
 800959a:	f000 8153 	beq.w	8009844 <__ssvfiscanf_r+0x2dc>
 800959e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80095a2:	1c55      	adds	r5, r2, #1
 80095a4:	f013 0308 	ands.w	r3, r3, #8
 80095a8:	d019      	beq.n	80095de <__ssvfiscanf_r+0x76>
 80095aa:	6863      	ldr	r3, [r4, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd0f      	ble.n	80095d0 <__ssvfiscanf_r+0x68>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	781a      	ldrb	r2, [r3, #0]
 80095b4:	5cba      	ldrb	r2, [r7, r2]
 80095b6:	0712      	lsls	r2, r2, #28
 80095b8:	d401      	bmi.n	80095be <__ssvfiscanf_r+0x56>
 80095ba:	462a      	mov	r2, r5
 80095bc:	e7e9      	b.n	8009592 <__ssvfiscanf_r+0x2a>
 80095be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80095c0:	3301      	adds	r3, #1
 80095c2:	3201      	adds	r2, #1
 80095c4:	9245      	str	r2, [sp, #276]	; 0x114
 80095c6:	6862      	ldr	r2, [r4, #4]
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	3a01      	subs	r2, #1
 80095cc:	6062      	str	r2, [r4, #4]
 80095ce:	e7ec      	b.n	80095aa <__ssvfiscanf_r+0x42>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095d6:	4798      	blx	r3
 80095d8:	2800      	cmp	r0, #0
 80095da:	d0e9      	beq.n	80095b0 <__ssvfiscanf_r+0x48>
 80095dc:	e7ed      	b.n	80095ba <__ssvfiscanf_r+0x52>
 80095de:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80095e2:	f040 8086 	bne.w	80096f2 <__ssvfiscanf_r+0x18a>
 80095e6:	9341      	str	r3, [sp, #260]	; 0x104
 80095e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80095ea:	7853      	ldrb	r3, [r2, #1]
 80095ec:	2b2a      	cmp	r3, #42	; 0x2a
 80095ee:	bf04      	itt	eq
 80095f0:	2310      	moveq	r3, #16
 80095f2:	1c95      	addeq	r5, r2, #2
 80095f4:	f04f 020a 	mov.w	r2, #10
 80095f8:	bf08      	it	eq
 80095fa:	9341      	streq	r3, [sp, #260]	; 0x104
 80095fc:	46ab      	mov	fp, r5
 80095fe:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009602:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009606:	2b09      	cmp	r3, #9
 8009608:	d91d      	bls.n	8009646 <__ssvfiscanf_r+0xde>
 800960a:	2203      	movs	r2, #3
 800960c:	4891      	ldr	r0, [pc, #580]	; (8009854 <__ssvfiscanf_r+0x2ec>)
 800960e:	f7ff f8ef 	bl	80087f0 <memchr>
 8009612:	b140      	cbz	r0, 8009626 <__ssvfiscanf_r+0xbe>
 8009614:	2301      	movs	r3, #1
 8009616:	465d      	mov	r5, fp
 8009618:	eba0 0009 	sub.w	r0, r0, r9
 800961c:	fa03 f000 	lsl.w	r0, r3, r0
 8009620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009622:	4318      	orrs	r0, r3
 8009624:	9041      	str	r0, [sp, #260]	; 0x104
 8009626:	f815 3b01 	ldrb.w	r3, [r5], #1
 800962a:	2b78      	cmp	r3, #120	; 0x78
 800962c:	d806      	bhi.n	800963c <__ssvfiscanf_r+0xd4>
 800962e:	2b57      	cmp	r3, #87	; 0x57
 8009630:	d810      	bhi.n	8009654 <__ssvfiscanf_r+0xec>
 8009632:	2b25      	cmp	r3, #37	; 0x25
 8009634:	d05d      	beq.n	80096f2 <__ssvfiscanf_r+0x18a>
 8009636:	d857      	bhi.n	80096e8 <__ssvfiscanf_r+0x180>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d075      	beq.n	8009728 <__ssvfiscanf_r+0x1c0>
 800963c:	2303      	movs	r3, #3
 800963e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009640:	230a      	movs	r3, #10
 8009642:	9342      	str	r3, [sp, #264]	; 0x108
 8009644:	e082      	b.n	800974c <__ssvfiscanf_r+0x1e4>
 8009646:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009648:	465d      	mov	r5, fp
 800964a:	fb02 1303 	mla	r3, r2, r3, r1
 800964e:	3b30      	subs	r3, #48	; 0x30
 8009650:	9343      	str	r3, [sp, #268]	; 0x10c
 8009652:	e7d3      	b.n	80095fc <__ssvfiscanf_r+0x94>
 8009654:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009658:	2a20      	cmp	r2, #32
 800965a:	d8ef      	bhi.n	800963c <__ssvfiscanf_r+0xd4>
 800965c:	a101      	add	r1, pc, #4	; (adr r1, 8009664 <__ssvfiscanf_r+0xfc>)
 800965e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009662:	bf00      	nop
 8009664:	08009737 	.word	0x08009737
 8009668:	0800963d 	.word	0x0800963d
 800966c:	0800963d 	.word	0x0800963d
 8009670:	08009795 	.word	0x08009795
 8009674:	0800963d 	.word	0x0800963d
 8009678:	0800963d 	.word	0x0800963d
 800967c:	0800963d 	.word	0x0800963d
 8009680:	0800963d 	.word	0x0800963d
 8009684:	0800963d 	.word	0x0800963d
 8009688:	0800963d 	.word	0x0800963d
 800968c:	0800963d 	.word	0x0800963d
 8009690:	080097ab 	.word	0x080097ab
 8009694:	08009781 	.word	0x08009781
 8009698:	080096ef 	.word	0x080096ef
 800969c:	080096ef 	.word	0x080096ef
 80096a0:	080096ef 	.word	0x080096ef
 80096a4:	0800963d 	.word	0x0800963d
 80096a8:	08009785 	.word	0x08009785
 80096ac:	0800963d 	.word	0x0800963d
 80096b0:	0800963d 	.word	0x0800963d
 80096b4:	0800963d 	.word	0x0800963d
 80096b8:	0800963d 	.word	0x0800963d
 80096bc:	080097bb 	.word	0x080097bb
 80096c0:	0800978d 	.word	0x0800978d
 80096c4:	0800972f 	.word	0x0800972f
 80096c8:	0800963d 	.word	0x0800963d
 80096cc:	0800963d 	.word	0x0800963d
 80096d0:	080097b7 	.word	0x080097b7
 80096d4:	0800963d 	.word	0x0800963d
 80096d8:	08009781 	.word	0x08009781
 80096dc:	0800963d 	.word	0x0800963d
 80096e0:	0800963d 	.word	0x0800963d
 80096e4:	08009737 	.word	0x08009737
 80096e8:	3b45      	subs	r3, #69	; 0x45
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d8a6      	bhi.n	800963c <__ssvfiscanf_r+0xd4>
 80096ee:	2305      	movs	r3, #5
 80096f0:	e02b      	b.n	800974a <__ssvfiscanf_r+0x1e2>
 80096f2:	6863      	ldr	r3, [r4, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dd0d      	ble.n	8009714 <__ssvfiscanf_r+0x1ac>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	4552      	cmp	r2, sl
 80096fe:	f040 80a1 	bne.w	8009844 <__ssvfiscanf_r+0x2dc>
 8009702:	3301      	adds	r3, #1
 8009704:	6862      	ldr	r2, [r4, #4]
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800970a:	3a01      	subs	r2, #1
 800970c:	3301      	adds	r3, #1
 800970e:	6062      	str	r2, [r4, #4]
 8009710:	9345      	str	r3, [sp, #276]	; 0x114
 8009712:	e752      	b.n	80095ba <__ssvfiscanf_r+0x52>
 8009714:	4621      	mov	r1, r4
 8009716:	4630      	mov	r0, r6
 8009718:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800971a:	4798      	blx	r3
 800971c:	2800      	cmp	r0, #0
 800971e:	d0eb      	beq.n	80096f8 <__ssvfiscanf_r+0x190>
 8009720:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009722:	2800      	cmp	r0, #0
 8009724:	f040 8084 	bne.w	8009830 <__ssvfiscanf_r+0x2c8>
 8009728:	f04f 30ff 	mov.w	r0, #4294967295
 800972c:	e086      	b.n	800983c <__ssvfiscanf_r+0x2d4>
 800972e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009730:	f042 0220 	orr.w	r2, r2, #32
 8009734:	9241      	str	r2, [sp, #260]	; 0x104
 8009736:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800973c:	9241      	str	r2, [sp, #260]	; 0x104
 800973e:	2210      	movs	r2, #16
 8009740:	2b6f      	cmp	r3, #111	; 0x6f
 8009742:	bf34      	ite	cc
 8009744:	2303      	movcc	r3, #3
 8009746:	2304      	movcs	r3, #4
 8009748:	9242      	str	r2, [sp, #264]	; 0x108
 800974a:	9347      	str	r3, [sp, #284]	; 0x11c
 800974c:	6863      	ldr	r3, [r4, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd41      	ble.n	80097d6 <__ssvfiscanf_r+0x26e>
 8009752:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009754:	0659      	lsls	r1, r3, #25
 8009756:	d404      	bmi.n	8009762 <__ssvfiscanf_r+0x1fa>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	5cba      	ldrb	r2, [r7, r2]
 800975e:	0712      	lsls	r2, r2, #28
 8009760:	d440      	bmi.n	80097e4 <__ssvfiscanf_r+0x27c>
 8009762:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009764:	2b02      	cmp	r3, #2
 8009766:	dc4f      	bgt.n	8009808 <__ssvfiscanf_r+0x2a0>
 8009768:	466b      	mov	r3, sp
 800976a:	4622      	mov	r2, r4
 800976c:	4630      	mov	r0, r6
 800976e:	a941      	add	r1, sp, #260	; 0x104
 8009770:	f000 f874 	bl	800985c <_scanf_chars>
 8009774:	2801      	cmp	r0, #1
 8009776:	d065      	beq.n	8009844 <__ssvfiscanf_r+0x2dc>
 8009778:	2802      	cmp	r0, #2
 800977a:	f47f af1e 	bne.w	80095ba <__ssvfiscanf_r+0x52>
 800977e:	e7cf      	b.n	8009720 <__ssvfiscanf_r+0x1b8>
 8009780:	220a      	movs	r2, #10
 8009782:	e7dd      	b.n	8009740 <__ssvfiscanf_r+0x1d8>
 8009784:	2300      	movs	r3, #0
 8009786:	9342      	str	r3, [sp, #264]	; 0x108
 8009788:	2303      	movs	r3, #3
 800978a:	e7de      	b.n	800974a <__ssvfiscanf_r+0x1e2>
 800978c:	2308      	movs	r3, #8
 800978e:	9342      	str	r3, [sp, #264]	; 0x108
 8009790:	2304      	movs	r3, #4
 8009792:	e7da      	b.n	800974a <__ssvfiscanf_r+0x1e2>
 8009794:	4629      	mov	r1, r5
 8009796:	4640      	mov	r0, r8
 8009798:	f000 f9c2 	bl	8009b20 <__sccl>
 800979c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800979e:	4605      	mov	r5, r0
 80097a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a4:	9341      	str	r3, [sp, #260]	; 0x104
 80097a6:	2301      	movs	r3, #1
 80097a8:	e7cf      	b.n	800974a <__ssvfiscanf_r+0x1e2>
 80097aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b0:	9341      	str	r3, [sp, #260]	; 0x104
 80097b2:	2300      	movs	r3, #0
 80097b4:	e7c9      	b.n	800974a <__ssvfiscanf_r+0x1e2>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e7c7      	b.n	800974a <__ssvfiscanf_r+0x1e2>
 80097ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80097bc:	06c3      	lsls	r3, r0, #27
 80097be:	f53f aefc 	bmi.w	80095ba <__ssvfiscanf_r+0x52>
 80097c2:	9b00      	ldr	r3, [sp, #0]
 80097c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097c6:	1d19      	adds	r1, r3, #4
 80097c8:	9100      	str	r1, [sp, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	07c0      	lsls	r0, r0, #31
 80097ce:	bf4c      	ite	mi
 80097d0:	801a      	strhmi	r2, [r3, #0]
 80097d2:	601a      	strpl	r2, [r3, #0]
 80097d4:	e6f1      	b.n	80095ba <__ssvfiscanf_r+0x52>
 80097d6:	4621      	mov	r1, r4
 80097d8:	4630      	mov	r0, r6
 80097da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097dc:	4798      	blx	r3
 80097de:	2800      	cmp	r0, #0
 80097e0:	d0b7      	beq.n	8009752 <__ssvfiscanf_r+0x1ea>
 80097e2:	e79d      	b.n	8009720 <__ssvfiscanf_r+0x1b8>
 80097e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097e6:	3201      	adds	r2, #1
 80097e8:	9245      	str	r2, [sp, #276]	; 0x114
 80097ea:	6862      	ldr	r2, [r4, #4]
 80097ec:	3a01      	subs	r2, #1
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	6062      	str	r2, [r4, #4]
 80097f2:	dd02      	ble.n	80097fa <__ssvfiscanf_r+0x292>
 80097f4:	3301      	adds	r3, #1
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	e7ae      	b.n	8009758 <__ssvfiscanf_r+0x1f0>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4630      	mov	r0, r6
 80097fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009800:	4798      	blx	r3
 8009802:	2800      	cmp	r0, #0
 8009804:	d0a8      	beq.n	8009758 <__ssvfiscanf_r+0x1f0>
 8009806:	e78b      	b.n	8009720 <__ssvfiscanf_r+0x1b8>
 8009808:	2b04      	cmp	r3, #4
 800980a:	dc06      	bgt.n	800981a <__ssvfiscanf_r+0x2b2>
 800980c:	466b      	mov	r3, sp
 800980e:	4622      	mov	r2, r4
 8009810:	4630      	mov	r0, r6
 8009812:	a941      	add	r1, sp, #260	; 0x104
 8009814:	f000 f87a 	bl	800990c <_scanf_i>
 8009818:	e7ac      	b.n	8009774 <__ssvfiscanf_r+0x20c>
 800981a:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <__ssvfiscanf_r+0x2f0>)
 800981c:	2b00      	cmp	r3, #0
 800981e:	f43f aecc 	beq.w	80095ba <__ssvfiscanf_r+0x52>
 8009822:	466b      	mov	r3, sp
 8009824:	4622      	mov	r2, r4
 8009826:	4630      	mov	r0, r6
 8009828:	a941      	add	r1, sp, #260	; 0x104
 800982a:	f7fc f8e9 	bl	8005a00 <_scanf_float>
 800982e:	e7a1      	b.n	8009774 <__ssvfiscanf_r+0x20c>
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009836:	bf18      	it	ne
 8009838:	f04f 30ff 	movne.w	r0, #4294967295
 800983c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009846:	e7f9      	b.n	800983c <__ssvfiscanf_r+0x2d4>
 8009848:	080094b5 	.word	0x080094b5
 800984c:	0800952f 	.word	0x0800952f
 8009850:	0800a241 	.word	0x0800a241
 8009854:	0800a6aa 	.word	0x0800a6aa
 8009858:	08005a01 	.word	0x08005a01

0800985c <_scanf_chars>:
 800985c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009860:	4615      	mov	r5, r2
 8009862:	688a      	ldr	r2, [r1, #8]
 8009864:	4680      	mov	r8, r0
 8009866:	460c      	mov	r4, r1
 8009868:	b932      	cbnz	r2, 8009878 <_scanf_chars+0x1c>
 800986a:	698a      	ldr	r2, [r1, #24]
 800986c:	2a00      	cmp	r2, #0
 800986e:	bf0c      	ite	eq
 8009870:	2201      	moveq	r2, #1
 8009872:	f04f 32ff 	movne.w	r2, #4294967295
 8009876:	608a      	str	r2, [r1, #8]
 8009878:	2700      	movs	r7, #0
 800987a:	6822      	ldr	r2, [r4, #0]
 800987c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8009908 <_scanf_chars+0xac>
 8009880:	06d1      	lsls	r1, r2, #27
 8009882:	bf5f      	itttt	pl
 8009884:	681a      	ldrpl	r2, [r3, #0]
 8009886:	1d11      	addpl	r1, r2, #4
 8009888:	6019      	strpl	r1, [r3, #0]
 800988a:	6816      	ldrpl	r6, [r2, #0]
 800988c:	69a0      	ldr	r0, [r4, #24]
 800988e:	b188      	cbz	r0, 80098b4 <_scanf_chars+0x58>
 8009890:	2801      	cmp	r0, #1
 8009892:	d107      	bne.n	80098a4 <_scanf_chars+0x48>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	6963      	ldr	r3, [r4, #20]
 800989a:	5c9b      	ldrb	r3, [r3, r2]
 800989c:	b953      	cbnz	r3, 80098b4 <_scanf_chars+0x58>
 800989e:	bb27      	cbnz	r7, 80098ea <_scanf_chars+0x8e>
 80098a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a4:	2802      	cmp	r0, #2
 80098a6:	d120      	bne.n	80098ea <_scanf_chars+0x8e>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f813 3009 	ldrb.w	r3, [r3, r9]
 80098b0:	071b      	lsls	r3, r3, #28
 80098b2:	d41a      	bmi.n	80098ea <_scanf_chars+0x8e>
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	3701      	adds	r7, #1
 80098b8:	06da      	lsls	r2, r3, #27
 80098ba:	bf5e      	ittt	pl
 80098bc:	682b      	ldrpl	r3, [r5, #0]
 80098be:	781b      	ldrbpl	r3, [r3, #0]
 80098c0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80098c4:	682a      	ldr	r2, [r5, #0]
 80098c6:	686b      	ldr	r3, [r5, #4]
 80098c8:	3201      	adds	r2, #1
 80098ca:	602a      	str	r2, [r5, #0]
 80098cc:	68a2      	ldr	r2, [r4, #8]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	3a01      	subs	r2, #1
 80098d2:	606b      	str	r3, [r5, #4]
 80098d4:	60a2      	str	r2, [r4, #8]
 80098d6:	b142      	cbz	r2, 80098ea <_scanf_chars+0x8e>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	dcd7      	bgt.n	800988c <_scanf_chars+0x30>
 80098dc:	4629      	mov	r1, r5
 80098de:	4640      	mov	r0, r8
 80098e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098e4:	4798      	blx	r3
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d0d0      	beq.n	800988c <_scanf_chars+0x30>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	f013 0310 	ands.w	r3, r3, #16
 80098f0:	d105      	bne.n	80098fe <_scanf_chars+0xa2>
 80098f2:	68e2      	ldr	r2, [r4, #12]
 80098f4:	3201      	adds	r2, #1
 80098f6:	60e2      	str	r2, [r4, #12]
 80098f8:	69a2      	ldr	r2, [r4, #24]
 80098fa:	b102      	cbz	r2, 80098fe <_scanf_chars+0xa2>
 80098fc:	7033      	strb	r3, [r6, #0]
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	2000      	movs	r0, #0
 8009902:	441f      	add	r7, r3
 8009904:	6127      	str	r7, [r4, #16]
 8009906:	e7cb      	b.n	80098a0 <_scanf_chars+0x44>
 8009908:	0800a241 	.word	0x0800a241

0800990c <_scanf_i>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	460c      	mov	r4, r1
 8009912:	4698      	mov	r8, r3
 8009914:	4b72      	ldr	r3, [pc, #456]	; (8009ae0 <_scanf_i+0x1d4>)
 8009916:	b087      	sub	sp, #28
 8009918:	4682      	mov	sl, r0
 800991a:	4616      	mov	r6, r2
 800991c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009920:	ab03      	add	r3, sp, #12
 8009922:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009926:	4b6f      	ldr	r3, [pc, #444]	; (8009ae4 <_scanf_i+0x1d8>)
 8009928:	69a1      	ldr	r1, [r4, #24]
 800992a:	4a6f      	ldr	r2, [pc, #444]	; (8009ae8 <_scanf_i+0x1dc>)
 800992c:	4627      	mov	r7, r4
 800992e:	2903      	cmp	r1, #3
 8009930:	bf18      	it	ne
 8009932:	461a      	movne	r2, r3
 8009934:	68a3      	ldr	r3, [r4, #8]
 8009936:	9201      	str	r2, [sp, #4]
 8009938:	1e5a      	subs	r2, r3, #1
 800993a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800993e:	bf81      	itttt	hi
 8009940:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009944:	eb03 0905 	addhi.w	r9, r3, r5
 8009948:	f240 135d 	movwhi	r3, #349	; 0x15d
 800994c:	60a3      	strhi	r3, [r4, #8]
 800994e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009952:	bf98      	it	ls
 8009954:	f04f 0900 	movls.w	r9, #0
 8009958:	463d      	mov	r5, r7
 800995a:	f04f 0b00 	mov.w	fp, #0
 800995e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	6831      	ldr	r1, [r6, #0]
 8009966:	ab03      	add	r3, sp, #12
 8009968:	2202      	movs	r2, #2
 800996a:	7809      	ldrb	r1, [r1, #0]
 800996c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009970:	f7fe ff3e 	bl	80087f0 <memchr>
 8009974:	b328      	cbz	r0, 80099c2 <_scanf_i+0xb6>
 8009976:	f1bb 0f01 	cmp.w	fp, #1
 800997a:	d159      	bne.n	8009a30 <_scanf_i+0x124>
 800997c:	6862      	ldr	r2, [r4, #4]
 800997e:	b92a      	cbnz	r2, 800998c <_scanf_i+0x80>
 8009980:	2308      	movs	r3, #8
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	6063      	str	r3, [r4, #4]
 8009986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800998a:	6022      	str	r2, [r4, #0]
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009992:	6022      	str	r2, [r4, #0]
 8009994:	68a2      	ldr	r2, [r4, #8]
 8009996:	1e51      	subs	r1, r2, #1
 8009998:	60a1      	str	r1, [r4, #8]
 800999a:	b192      	cbz	r2, 80099c2 <_scanf_i+0xb6>
 800999c:	6832      	ldr	r2, [r6, #0]
 800999e:	1c51      	adds	r1, r2, #1
 80099a0:	6031      	str	r1, [r6, #0]
 80099a2:	7812      	ldrb	r2, [r2, #0]
 80099a4:	f805 2b01 	strb.w	r2, [r5], #1
 80099a8:	6872      	ldr	r2, [r6, #4]
 80099aa:	3a01      	subs	r2, #1
 80099ac:	2a00      	cmp	r2, #0
 80099ae:	6072      	str	r2, [r6, #4]
 80099b0:	dc07      	bgt.n	80099c2 <_scanf_i+0xb6>
 80099b2:	4631      	mov	r1, r6
 80099b4:	4650      	mov	r0, sl
 80099b6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80099ba:	4790      	blx	r2
 80099bc:	2800      	cmp	r0, #0
 80099be:	f040 8085 	bne.w	8009acc <_scanf_i+0x1c0>
 80099c2:	f10b 0b01 	add.w	fp, fp, #1
 80099c6:	f1bb 0f03 	cmp.w	fp, #3
 80099ca:	d1cb      	bne.n	8009964 <_scanf_i+0x58>
 80099cc:	6863      	ldr	r3, [r4, #4]
 80099ce:	b90b      	cbnz	r3, 80099d4 <_scanf_i+0xc8>
 80099d0:	230a      	movs	r3, #10
 80099d2:	6063      	str	r3, [r4, #4]
 80099d4:	6863      	ldr	r3, [r4, #4]
 80099d6:	4945      	ldr	r1, [pc, #276]	; (8009aec <_scanf_i+0x1e0>)
 80099d8:	6960      	ldr	r0, [r4, #20]
 80099da:	1ac9      	subs	r1, r1, r3
 80099dc:	f000 f8a0 	bl	8009b20 <__sccl>
 80099e0:	f04f 0b00 	mov.w	fp, #0
 80099e4:	68a3      	ldr	r3, [r4, #8]
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d03d      	beq.n	8009a68 <_scanf_i+0x15c>
 80099ec:	6831      	ldr	r1, [r6, #0]
 80099ee:	6960      	ldr	r0, [r4, #20]
 80099f0:	f891 c000 	ldrb.w	ip, [r1]
 80099f4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d035      	beq.n	8009a68 <_scanf_i+0x15c>
 80099fc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009a00:	d124      	bne.n	8009a4c <_scanf_i+0x140>
 8009a02:	0510      	lsls	r0, r2, #20
 8009a04:	d522      	bpl.n	8009a4c <_scanf_i+0x140>
 8009a06:	f10b 0b01 	add.w	fp, fp, #1
 8009a0a:	f1b9 0f00 	cmp.w	r9, #0
 8009a0e:	d003      	beq.n	8009a18 <_scanf_i+0x10c>
 8009a10:	3301      	adds	r3, #1
 8009a12:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a16:	60a3      	str	r3, [r4, #8]
 8009a18:	6873      	ldr	r3, [r6, #4]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	6073      	str	r3, [r6, #4]
 8009a20:	dd1b      	ble.n	8009a5a <_scanf_i+0x14e>
 8009a22:	6833      	ldr	r3, [r6, #0]
 8009a24:	3301      	adds	r3, #1
 8009a26:	6033      	str	r3, [r6, #0]
 8009a28:	68a3      	ldr	r3, [r4, #8]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	60a3      	str	r3, [r4, #8]
 8009a2e:	e7d9      	b.n	80099e4 <_scanf_i+0xd8>
 8009a30:	f1bb 0f02 	cmp.w	fp, #2
 8009a34:	d1ae      	bne.n	8009994 <_scanf_i+0x88>
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009a3c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a40:	d1bf      	bne.n	80099c2 <_scanf_i+0xb6>
 8009a42:	2310      	movs	r3, #16
 8009a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a48:	6063      	str	r3, [r4, #4]
 8009a4a:	e7a2      	b.n	8009992 <_scanf_i+0x86>
 8009a4c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009a50:	6022      	str	r2, [r4, #0]
 8009a52:	780b      	ldrb	r3, [r1, #0]
 8009a54:	f805 3b01 	strb.w	r3, [r5], #1
 8009a58:	e7de      	b.n	8009a18 <_scanf_i+0x10c>
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a62:	4798      	blx	r3
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d0df      	beq.n	8009a28 <_scanf_i+0x11c>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	05d9      	lsls	r1, r3, #23
 8009a6c:	d50d      	bpl.n	8009a8a <_scanf_i+0x17e>
 8009a6e:	42bd      	cmp	r5, r7
 8009a70:	d909      	bls.n	8009a86 <_scanf_i+0x17a>
 8009a72:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a76:	4632      	mov	r2, r6
 8009a78:	4650      	mov	r0, sl
 8009a7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a7e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009a82:	4798      	blx	r3
 8009a84:	464d      	mov	r5, r9
 8009a86:	42bd      	cmp	r5, r7
 8009a88:	d028      	beq.n	8009adc <_scanf_i+0x1d0>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	f012 0210 	ands.w	r2, r2, #16
 8009a90:	d113      	bne.n	8009aba <_scanf_i+0x1ae>
 8009a92:	702a      	strb	r2, [r5, #0]
 8009a94:	4639      	mov	r1, r7
 8009a96:	6863      	ldr	r3, [r4, #4]
 8009a98:	4650      	mov	r0, sl
 8009a9a:	9e01      	ldr	r6, [sp, #4]
 8009a9c:	47b0      	blx	r6
 8009a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa2:	6821      	ldr	r1, [r4, #0]
 8009aa4:	1d1a      	adds	r2, r3, #4
 8009aa6:	f8c8 2000 	str.w	r2, [r8]
 8009aaa:	f011 0f20 	tst.w	r1, #32
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	d00f      	beq.n	8009ad2 <_scanf_i+0x1c6>
 8009ab2:	6018      	str	r0, [r3, #0]
 8009ab4:	68e3      	ldr	r3, [r4, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60e3      	str	r3, [r4, #12]
 8009aba:	2000      	movs	r0, #0
 8009abc:	1bed      	subs	r5, r5, r7
 8009abe:	44ab      	add	fp, r5
 8009ac0:	6925      	ldr	r5, [r4, #16]
 8009ac2:	445d      	add	r5, fp
 8009ac4:	6125      	str	r5, [r4, #16]
 8009ac6:	b007      	add	sp, #28
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	f04f 0b00 	mov.w	fp, #0
 8009ad0:	e7ca      	b.n	8009a68 <_scanf_i+0x15c>
 8009ad2:	07ca      	lsls	r2, r1, #31
 8009ad4:	bf4c      	ite	mi
 8009ad6:	8018      	strhmi	r0, [r3, #0]
 8009ad8:	6018      	strpl	r0, [r3, #0]
 8009ada:	e7eb      	b.n	8009ab4 <_scanf_i+0x1a8>
 8009adc:	2001      	movs	r0, #1
 8009ade:	e7f2      	b.n	8009ac6 <_scanf_i+0x1ba>
 8009ae0:	0800a218 	.word	0x0800a218
 8009ae4:	08009c8d 	.word	0x08009c8d
 8009ae8:	08006dd1 	.word	0x08006dd1
 8009aec:	0800a6ce 	.word	0x0800a6ce

08009af0 <_read_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	4611      	mov	r1, r2
 8009af8:	2200      	movs	r2, #0
 8009afa:	4d05      	ldr	r5, [pc, #20]	; (8009b10 <_read_r+0x20>)
 8009afc:	602a      	str	r2, [r5, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7f8 fd57 	bl	80025b2 <_read>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_read_r+0x1e>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_read_r+0x1e>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	2000087c 	.word	0x2000087c

08009b14 <nan>:
 8009b14:	2000      	movs	r0, #0
 8009b16:	4901      	ldr	r1, [pc, #4]	; (8009b1c <nan+0x8>)
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	7ff80000 	.word	0x7ff80000

08009b20 <__sccl>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	780b      	ldrb	r3, [r1, #0]
 8009b24:	4604      	mov	r4, r0
 8009b26:	2b5e      	cmp	r3, #94	; 0x5e
 8009b28:	bf13      	iteet	ne
 8009b2a:	2200      	movne	r2, #0
 8009b2c:	2201      	moveq	r2, #1
 8009b2e:	784b      	ldrbeq	r3, [r1, #1]
 8009b30:	1c48      	addne	r0, r1, #1
 8009b32:	bf08      	it	eq
 8009b34:	1c88      	addeq	r0, r1, #2
 8009b36:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009b3a:	1e61      	subs	r1, r4, #1
 8009b3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009b40:	42a9      	cmp	r1, r5
 8009b42:	d1fb      	bne.n	8009b3c <__sccl+0x1c>
 8009b44:	b90b      	cbnz	r3, 8009b4a <__sccl+0x2a>
 8009b46:	3801      	subs	r0, #1
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	f082 0101 	eor.w	r1, r2, #1
 8009b4e:	54e1      	strb	r1, [r4, r3]
 8009b50:	1c42      	adds	r2, r0, #1
 8009b52:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009b56:	4610      	mov	r0, r2
 8009b58:	2d2d      	cmp	r5, #45	; 0x2d
 8009b5a:	f102 36ff 	add.w	r6, r2, #4294967295
 8009b5e:	d006      	beq.n	8009b6e <__sccl+0x4e>
 8009b60:	2d5d      	cmp	r5, #93	; 0x5d
 8009b62:	d0f1      	beq.n	8009b48 <__sccl+0x28>
 8009b64:	b90d      	cbnz	r5, 8009b6a <__sccl+0x4a>
 8009b66:	4630      	mov	r0, r6
 8009b68:	e7ee      	b.n	8009b48 <__sccl+0x28>
 8009b6a:	462b      	mov	r3, r5
 8009b6c:	e7ef      	b.n	8009b4e <__sccl+0x2e>
 8009b6e:	7816      	ldrb	r6, [r2, #0]
 8009b70:	2e5d      	cmp	r6, #93	; 0x5d
 8009b72:	d0fa      	beq.n	8009b6a <__sccl+0x4a>
 8009b74:	42b3      	cmp	r3, r6
 8009b76:	dcf8      	bgt.n	8009b6a <__sccl+0x4a>
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	4286      	cmp	r6, r0
 8009b7e:	5421      	strb	r1, [r4, r0]
 8009b80:	dcfb      	bgt.n	8009b7a <__sccl+0x5a>
 8009b82:	43d8      	mvns	r0, r3
 8009b84:	4430      	add	r0, r6
 8009b86:	42b3      	cmp	r3, r6
 8009b88:	bfa8      	it	ge
 8009b8a:	2000      	movge	r0, #0
 8009b8c:	1c5d      	adds	r5, r3, #1
 8009b8e:	182b      	adds	r3, r5, r0
 8009b90:	3202      	adds	r2, #2
 8009b92:	e7de      	b.n	8009b52 <__sccl+0x32>

08009b94 <_strtoul_l.isra.0>:
 8009b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b98:	468c      	mov	ip, r1
 8009b9a:	4686      	mov	lr, r0
 8009b9c:	4e3a      	ldr	r6, [pc, #232]	; (8009c88 <_strtoul_l.isra.0+0xf4>)
 8009b9e:	4660      	mov	r0, ip
 8009ba0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ba4:	5da5      	ldrb	r5, [r4, r6]
 8009ba6:	f015 0508 	ands.w	r5, r5, #8
 8009baa:	d1f8      	bne.n	8009b9e <_strtoul_l.isra.0+0xa>
 8009bac:	2c2d      	cmp	r4, #45	; 0x2d
 8009bae:	d134      	bne.n	8009c1a <_strtoul_l.isra.0+0x86>
 8009bb0:	f04f 0801 	mov.w	r8, #1
 8009bb4:	f89c 4000 	ldrb.w	r4, [ip]
 8009bb8:	f100 0c02 	add.w	ip, r0, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d05e      	beq.n	8009c7e <_strtoul_l.isra.0+0xea>
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d10c      	bne.n	8009bde <_strtoul_l.isra.0+0x4a>
 8009bc4:	2c30      	cmp	r4, #48	; 0x30
 8009bc6:	d10a      	bne.n	8009bde <_strtoul_l.isra.0+0x4a>
 8009bc8:	f89c 0000 	ldrb.w	r0, [ip]
 8009bcc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009bd0:	2858      	cmp	r0, #88	; 0x58
 8009bd2:	d14f      	bne.n	8009c74 <_strtoul_l.isra.0+0xe0>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009bda:	f10c 0c02 	add.w	ip, ip, #2
 8009bde:	f04f 37ff 	mov.w	r7, #4294967295
 8009be2:	fbb7 f7f3 	udiv	r7, r7, r3
 8009be6:	2500      	movs	r5, #0
 8009be8:	fb03 f907 	mul.w	r9, r3, r7
 8009bec:	4628      	mov	r0, r5
 8009bee:	ea6f 0909 	mvn.w	r9, r9
 8009bf2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009bf6:	2e09      	cmp	r6, #9
 8009bf8:	d818      	bhi.n	8009c2c <_strtoul_l.isra.0+0x98>
 8009bfa:	4634      	mov	r4, r6
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	dd24      	ble.n	8009c4a <_strtoul_l.isra.0+0xb6>
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	db1f      	blt.n	8009c44 <_strtoul_l.isra.0+0xb0>
 8009c04:	4287      	cmp	r7, r0
 8009c06:	d31d      	bcc.n	8009c44 <_strtoul_l.isra.0+0xb0>
 8009c08:	d101      	bne.n	8009c0e <_strtoul_l.isra.0+0x7a>
 8009c0a:	45a1      	cmp	r9, r4
 8009c0c:	db1a      	blt.n	8009c44 <_strtoul_l.isra.0+0xb0>
 8009c0e:	2501      	movs	r5, #1
 8009c10:	fb00 4003 	mla	r0, r0, r3, r4
 8009c14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009c18:	e7eb      	b.n	8009bf2 <_strtoul_l.isra.0+0x5e>
 8009c1a:	2c2b      	cmp	r4, #43	; 0x2b
 8009c1c:	bf08      	it	eq
 8009c1e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009c22:	46a8      	mov	r8, r5
 8009c24:	bf08      	it	eq
 8009c26:	f100 0c02 	addeq.w	ip, r0, #2
 8009c2a:	e7c7      	b.n	8009bbc <_strtoul_l.isra.0+0x28>
 8009c2c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009c30:	2e19      	cmp	r6, #25
 8009c32:	d801      	bhi.n	8009c38 <_strtoul_l.isra.0+0xa4>
 8009c34:	3c37      	subs	r4, #55	; 0x37
 8009c36:	e7e1      	b.n	8009bfc <_strtoul_l.isra.0+0x68>
 8009c38:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009c3c:	2e19      	cmp	r6, #25
 8009c3e:	d804      	bhi.n	8009c4a <_strtoul_l.isra.0+0xb6>
 8009c40:	3c57      	subs	r4, #87	; 0x57
 8009c42:	e7db      	b.n	8009bfc <_strtoul_l.isra.0+0x68>
 8009c44:	f04f 35ff 	mov.w	r5, #4294967295
 8009c48:	e7e4      	b.n	8009c14 <_strtoul_l.isra.0+0x80>
 8009c4a:	2d00      	cmp	r5, #0
 8009c4c:	da07      	bge.n	8009c5e <_strtoul_l.isra.0+0xca>
 8009c4e:	2322      	movs	r3, #34	; 0x22
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	f8ce 3000 	str.w	r3, [lr]
 8009c58:	b942      	cbnz	r2, 8009c6c <_strtoul_l.isra.0+0xd8>
 8009c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c5e:	f1b8 0f00 	cmp.w	r8, #0
 8009c62:	d000      	beq.n	8009c66 <_strtoul_l.isra.0+0xd2>
 8009c64:	4240      	negs	r0, r0
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	d0f7      	beq.n	8009c5a <_strtoul_l.isra.0+0xc6>
 8009c6a:	b10d      	cbz	r5, 8009c70 <_strtoul_l.isra.0+0xdc>
 8009c6c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009c70:	6011      	str	r1, [r2, #0]
 8009c72:	e7f2      	b.n	8009c5a <_strtoul_l.isra.0+0xc6>
 8009c74:	2430      	movs	r4, #48	; 0x30
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1b1      	bne.n	8009bde <_strtoul_l.isra.0+0x4a>
 8009c7a:	2308      	movs	r3, #8
 8009c7c:	e7af      	b.n	8009bde <_strtoul_l.isra.0+0x4a>
 8009c7e:	2c30      	cmp	r4, #48	; 0x30
 8009c80:	d0a2      	beq.n	8009bc8 <_strtoul_l.isra.0+0x34>
 8009c82:	230a      	movs	r3, #10
 8009c84:	e7ab      	b.n	8009bde <_strtoul_l.isra.0+0x4a>
 8009c86:	bf00      	nop
 8009c88:	0800a241 	.word	0x0800a241

08009c8c <_strtoul_r>:
 8009c8c:	f7ff bf82 	b.w	8009b94 <_strtoul_l.isra.0>

08009c90 <__submore>:
 8009c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c9c:	4299      	cmp	r1, r3
 8009c9e:	d11b      	bne.n	8009cd8 <__submore+0x48>
 8009ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ca4:	f7fb f9f2 	bl	800508c <_malloc_r>
 8009ca8:	b918      	cbnz	r0, 8009cb2 <__submore+0x22>
 8009caa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8009cb8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8009cbe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009cc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009cc6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009cca:	7043      	strb	r3, [r0, #1]
 8009ccc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009cd0:	7003      	strb	r3, [r0, #0]
 8009cd2:	6020      	str	r0, [r4, #0]
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e7ea      	b.n	8009cae <__submore+0x1e>
 8009cd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009cda:	0077      	lsls	r7, r6, #1
 8009cdc:	463a      	mov	r2, r7
 8009cde:	f7ff fa67 	bl	80091b0 <_realloc_r>
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d0e0      	beq.n	8009caa <__submore+0x1a>
 8009ce8:	eb00 0806 	add.w	r8, r0, r6
 8009cec:	4601      	mov	r1, r0
 8009cee:	4632      	mov	r2, r6
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	f7fb f969 	bl	8004fc8 <memcpy>
 8009cf6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009cfa:	f8c4 8000 	str.w	r8, [r4]
 8009cfe:	e7e9      	b.n	8009cd4 <__submore+0x44>

08009d00 <__ascii_wctomb>:
 8009d00:	4603      	mov	r3, r0
 8009d02:	4608      	mov	r0, r1
 8009d04:	b141      	cbz	r1, 8009d18 <__ascii_wctomb+0x18>
 8009d06:	2aff      	cmp	r2, #255	; 0xff
 8009d08:	d904      	bls.n	8009d14 <__ascii_wctomb+0x14>
 8009d0a:	228a      	movs	r2, #138	; 0x8a
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	4770      	bx	lr
 8009d14:	2001      	movs	r0, #1
 8009d16:	700a      	strb	r2, [r1, #0]
 8009d18:	4770      	bx	lr
	...

08009d1c <__assert_func>:
 8009d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d1e:	4614      	mov	r4, r2
 8009d20:	461a      	mov	r2, r3
 8009d22:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <__assert_func+0x2c>)
 8009d24:	4605      	mov	r5, r0
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68d8      	ldr	r0, [r3, #12]
 8009d2a:	b14c      	cbz	r4, 8009d40 <__assert_func+0x24>
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <__assert_func+0x30>)
 8009d2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d32:	9100      	str	r1, [sp, #0]
 8009d34:	462b      	mov	r3, r5
 8009d36:	4906      	ldr	r1, [pc, #24]	; (8009d50 <__assert_func+0x34>)
 8009d38:	f000 f80e 	bl	8009d58 <fiprintf>
 8009d3c:	f000 f9ba 	bl	800a0b4 <abort>
 8009d40:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <__assert_func+0x38>)
 8009d42:	461c      	mov	r4, r3
 8009d44:	e7f3      	b.n	8009d2e <__assert_func+0x12>
 8009d46:	bf00      	nop
 8009d48:	20000048 	.word	0x20000048
 8009d4c:	0800a6d0 	.word	0x0800a6d0
 8009d50:	0800a6dd 	.word	0x0800a6dd
 8009d54:	0800a70b 	.word	0x0800a70b

08009d58 <fiprintf>:
 8009d58:	b40e      	push	{r1, r2, r3}
 8009d5a:	b503      	push	{r0, r1, lr}
 8009d5c:	4601      	mov	r1, r0
 8009d5e:	ab03      	add	r3, sp, #12
 8009d60:	4805      	ldr	r0, [pc, #20]	; (8009d78 <fiprintf+0x20>)
 8009d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d66:	6800      	ldr	r0, [r0, #0]
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	f000 f873 	bl	8009e54 <_vfiprintf_r>
 8009d6e:	b002      	add	sp, #8
 8009d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d74:	b003      	add	sp, #12
 8009d76:	4770      	bx	lr
 8009d78:	20000048 	.word	0x20000048

08009d7c <_fstat_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4d06      	ldr	r5, [pc, #24]	; (8009d9c <_fstat_r+0x20>)
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	602b      	str	r3, [r5, #0]
 8009d8a:	f7f8 fc56 	bl	800263a <_fstat>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d102      	bne.n	8009d98 <_fstat_r+0x1c>
 8009d92:	682b      	ldr	r3, [r5, #0]
 8009d94:	b103      	cbz	r3, 8009d98 <_fstat_r+0x1c>
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	bf00      	nop
 8009d9c:	2000087c 	.word	0x2000087c

08009da0 <_isatty_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	2300      	movs	r3, #0
 8009da4:	4d05      	ldr	r5, [pc, #20]	; (8009dbc <_isatty_r+0x1c>)
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7f8 fc54 	bl	8002658 <_isatty>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_isatty_r+0x1a>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_isatty_r+0x1a>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	2000087c 	.word	0x2000087c

08009dc0 <memmove>:
 8009dc0:	4288      	cmp	r0, r1
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	eb01 0402 	add.w	r4, r1, r2
 8009dc8:	d902      	bls.n	8009dd0 <memmove+0x10>
 8009dca:	4284      	cmp	r4, r0
 8009dcc:	4623      	mov	r3, r4
 8009dce:	d807      	bhi.n	8009de0 <memmove+0x20>
 8009dd0:	1e43      	subs	r3, r0, #1
 8009dd2:	42a1      	cmp	r1, r4
 8009dd4:	d008      	beq.n	8009de8 <memmove+0x28>
 8009dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dde:	e7f8      	b.n	8009dd2 <memmove+0x12>
 8009de0:	4601      	mov	r1, r0
 8009de2:	4402      	add	r2, r0
 8009de4:	428a      	cmp	r2, r1
 8009de6:	d100      	bne.n	8009dea <memmove+0x2a>
 8009de8:	bd10      	pop	{r4, pc}
 8009dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009df2:	e7f7      	b.n	8009de4 <memmove+0x24>

08009df4 <_malloc_usable_size_r>:
 8009df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df8:	1f18      	subs	r0, r3, #4
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	bfbc      	itt	lt
 8009dfe:	580b      	ldrlt	r3, [r1, r0]
 8009e00:	18c0      	addlt	r0, r0, r3
 8009e02:	4770      	bx	lr

08009e04 <__sfputc_r>:
 8009e04:	6893      	ldr	r3, [r2, #8]
 8009e06:	b410      	push	{r4}
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	6093      	str	r3, [r2, #8]
 8009e0e:	da07      	bge.n	8009e20 <__sfputc_r+0x1c>
 8009e10:	6994      	ldr	r4, [r2, #24]
 8009e12:	42a3      	cmp	r3, r4
 8009e14:	db01      	blt.n	8009e1a <__sfputc_r+0x16>
 8009e16:	290a      	cmp	r1, #10
 8009e18:	d102      	bne.n	8009e20 <__sfputc_r+0x1c>
 8009e1a:	bc10      	pop	{r4}
 8009e1c:	f7fc bfda 	b.w	8006dd4 <__swbuf_r>
 8009e20:	6813      	ldr	r3, [r2, #0]
 8009e22:	1c58      	adds	r0, r3, #1
 8009e24:	6010      	str	r0, [r2, #0]
 8009e26:	7019      	strb	r1, [r3, #0]
 8009e28:	4608      	mov	r0, r1
 8009e2a:	bc10      	pop	{r4}
 8009e2c:	4770      	bx	lr

08009e2e <__sfputs_r>:
 8009e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e30:	4606      	mov	r6, r0
 8009e32:	460f      	mov	r7, r1
 8009e34:	4614      	mov	r4, r2
 8009e36:	18d5      	adds	r5, r2, r3
 8009e38:	42ac      	cmp	r4, r5
 8009e3a:	d101      	bne.n	8009e40 <__sfputs_r+0x12>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e007      	b.n	8009e50 <__sfputs_r+0x22>
 8009e40:	463a      	mov	r2, r7
 8009e42:	4630      	mov	r0, r6
 8009e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e48:	f7ff ffdc 	bl	8009e04 <__sfputc_r>
 8009e4c:	1c43      	adds	r3, r0, #1
 8009e4e:	d1f3      	bne.n	8009e38 <__sfputs_r+0xa>
 8009e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e54 <_vfiprintf_r>:
 8009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	460d      	mov	r5, r1
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	4698      	mov	r8, r3
 8009e5e:	4606      	mov	r6, r0
 8009e60:	b09d      	sub	sp, #116	; 0x74
 8009e62:	b118      	cbz	r0, 8009e6c <_vfiprintf_r+0x18>
 8009e64:	6983      	ldr	r3, [r0, #24]
 8009e66:	b90b      	cbnz	r3, 8009e6c <_vfiprintf_r+0x18>
 8009e68:	f7fe f82e 	bl	8007ec8 <__sinit>
 8009e6c:	4b89      	ldr	r3, [pc, #548]	; (800a094 <_vfiprintf_r+0x240>)
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	d11b      	bne.n	8009eaa <_vfiprintf_r+0x56>
 8009e72:	6875      	ldr	r5, [r6, #4]
 8009e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e76:	07d9      	lsls	r1, r3, #31
 8009e78:	d405      	bmi.n	8009e86 <_vfiprintf_r+0x32>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	059a      	lsls	r2, r3, #22
 8009e7e:	d402      	bmi.n	8009e86 <_vfiprintf_r+0x32>
 8009e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e82:	f7fe fc2a 	bl	80086da <__retarget_lock_acquire_recursive>
 8009e86:	89ab      	ldrh	r3, [r5, #12]
 8009e88:	071b      	lsls	r3, r3, #28
 8009e8a:	d501      	bpl.n	8009e90 <_vfiprintf_r+0x3c>
 8009e8c:	692b      	ldr	r3, [r5, #16]
 8009e8e:	b9eb      	cbnz	r3, 8009ecc <_vfiprintf_r+0x78>
 8009e90:	4629      	mov	r1, r5
 8009e92:	4630      	mov	r0, r6
 8009e94:	f7fd f802 	bl	8006e9c <__swsetup_r>
 8009e98:	b1c0      	cbz	r0, 8009ecc <_vfiprintf_r+0x78>
 8009e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e9c:	07dc      	lsls	r4, r3, #31
 8009e9e:	d50e      	bpl.n	8009ebe <_vfiprintf_r+0x6a>
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	b01d      	add	sp, #116	; 0x74
 8009ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eaa:	4b7b      	ldr	r3, [pc, #492]	; (800a098 <_vfiprintf_r+0x244>)
 8009eac:	429d      	cmp	r5, r3
 8009eae:	d101      	bne.n	8009eb4 <_vfiprintf_r+0x60>
 8009eb0:	68b5      	ldr	r5, [r6, #8]
 8009eb2:	e7df      	b.n	8009e74 <_vfiprintf_r+0x20>
 8009eb4:	4b79      	ldr	r3, [pc, #484]	; (800a09c <_vfiprintf_r+0x248>)
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	bf08      	it	eq
 8009eba:	68f5      	ldreq	r5, [r6, #12]
 8009ebc:	e7da      	b.n	8009e74 <_vfiprintf_r+0x20>
 8009ebe:	89ab      	ldrh	r3, [r5, #12]
 8009ec0:	0598      	lsls	r0, r3, #22
 8009ec2:	d4ed      	bmi.n	8009ea0 <_vfiprintf_r+0x4c>
 8009ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ec6:	f7fe fc09 	bl	80086dc <__retarget_lock_release_recursive>
 8009eca:	e7e9      	b.n	8009ea0 <_vfiprintf_r+0x4c>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed6:	2330      	movs	r3, #48	; 0x30
 8009ed8:	f04f 0901 	mov.w	r9, #1
 8009edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ee0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a0a0 <_vfiprintf_r+0x24c>
 8009ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ee8:	4623      	mov	r3, r4
 8009eea:	469a      	mov	sl, r3
 8009eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef0:	b10a      	cbz	r2, 8009ef6 <_vfiprintf_r+0xa2>
 8009ef2:	2a25      	cmp	r2, #37	; 0x25
 8009ef4:	d1f9      	bne.n	8009eea <_vfiprintf_r+0x96>
 8009ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8009efa:	d00b      	beq.n	8009f14 <_vfiprintf_r+0xc0>
 8009efc:	465b      	mov	r3, fp
 8009efe:	4622      	mov	r2, r4
 8009f00:	4629      	mov	r1, r5
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7ff ff93 	bl	8009e2e <__sfputs_r>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f000 80aa 	beq.w	800a062 <_vfiprintf_r+0x20e>
 8009f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f10:	445a      	add	r2, fp
 8009f12:	9209      	str	r2, [sp, #36]	; 0x24
 8009f14:	f89a 3000 	ldrb.w	r3, [sl]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80a2 	beq.w	800a062 <_vfiprintf_r+0x20e>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f04f 32ff 	mov.w	r2, #4294967295
 8009f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f28:	f10a 0a01 	add.w	sl, sl, #1
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f34:	931a      	str	r3, [sp, #104]	; 0x68
 8009f36:	4654      	mov	r4, sl
 8009f38:	2205      	movs	r2, #5
 8009f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3e:	4858      	ldr	r0, [pc, #352]	; (800a0a0 <_vfiprintf_r+0x24c>)
 8009f40:	f7fe fc56 	bl	80087f0 <memchr>
 8009f44:	9a04      	ldr	r2, [sp, #16]
 8009f46:	b9d8      	cbnz	r0, 8009f80 <_vfiprintf_r+0x12c>
 8009f48:	06d1      	lsls	r1, r2, #27
 8009f4a:	bf44      	itt	mi
 8009f4c:	2320      	movmi	r3, #32
 8009f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f52:	0713      	lsls	r3, r2, #28
 8009f54:	bf44      	itt	mi
 8009f56:	232b      	movmi	r3, #43	; 0x2b
 8009f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f60:	2b2a      	cmp	r3, #42	; 0x2a
 8009f62:	d015      	beq.n	8009f90 <_vfiprintf_r+0x13c>
 8009f64:	4654      	mov	r4, sl
 8009f66:	2000      	movs	r0, #0
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	9a07      	ldr	r2, [sp, #28]
 8009f6e:	4621      	mov	r1, r4
 8009f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f74:	3b30      	subs	r3, #48	; 0x30
 8009f76:	2b09      	cmp	r3, #9
 8009f78:	d94e      	bls.n	800a018 <_vfiprintf_r+0x1c4>
 8009f7a:	b1b0      	cbz	r0, 8009faa <_vfiprintf_r+0x156>
 8009f7c:	9207      	str	r2, [sp, #28]
 8009f7e:	e014      	b.n	8009faa <_vfiprintf_r+0x156>
 8009f80:	eba0 0308 	sub.w	r3, r0, r8
 8009f84:	fa09 f303 	lsl.w	r3, r9, r3
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	46a2      	mov	sl, r4
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	e7d2      	b.n	8009f36 <_vfiprintf_r+0xe2>
 8009f90:	9b03      	ldr	r3, [sp, #12]
 8009f92:	1d19      	adds	r1, r3, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	9103      	str	r1, [sp, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bfbb      	ittet	lt
 8009f9c:	425b      	neglt	r3, r3
 8009f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa2:	9307      	strge	r3, [sp, #28]
 8009fa4:	9307      	strlt	r3, [sp, #28]
 8009fa6:	bfb8      	it	lt
 8009fa8:	9204      	strlt	r2, [sp, #16]
 8009faa:	7823      	ldrb	r3, [r4, #0]
 8009fac:	2b2e      	cmp	r3, #46	; 0x2e
 8009fae:	d10c      	bne.n	8009fca <_vfiprintf_r+0x176>
 8009fb0:	7863      	ldrb	r3, [r4, #1]
 8009fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb4:	d135      	bne.n	800a022 <_vfiprintf_r+0x1ce>
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	3402      	adds	r4, #2
 8009fba:	1d1a      	adds	r2, r3, #4
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	9203      	str	r2, [sp, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	bfb8      	it	lt
 8009fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fc8:	9305      	str	r3, [sp, #20]
 8009fca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0b0 <_vfiprintf_r+0x25c>
 8009fce:	2203      	movs	r2, #3
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	7821      	ldrb	r1, [r4, #0]
 8009fd4:	f7fe fc0c 	bl	80087f0 <memchr>
 8009fd8:	b140      	cbz	r0, 8009fec <_vfiprintf_r+0x198>
 8009fda:	2340      	movs	r3, #64	; 0x40
 8009fdc:	eba0 000a 	sub.w	r0, r0, sl
 8009fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	3401      	adds	r4, #1
 8009fe8:	4303      	orrs	r3, r0
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff0:	2206      	movs	r2, #6
 8009ff2:	482c      	ldr	r0, [pc, #176]	; (800a0a4 <_vfiprintf_r+0x250>)
 8009ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff8:	f7fe fbfa 	bl	80087f0 <memchr>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d03f      	beq.n	800a080 <_vfiprintf_r+0x22c>
 800a000:	4b29      	ldr	r3, [pc, #164]	; (800a0a8 <_vfiprintf_r+0x254>)
 800a002:	bb1b      	cbnz	r3, 800a04c <_vfiprintf_r+0x1f8>
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	3307      	adds	r3, #7
 800a008:	f023 0307 	bic.w	r3, r3, #7
 800a00c:	3308      	adds	r3, #8
 800a00e:	9303      	str	r3, [sp, #12]
 800a010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a012:	443b      	add	r3, r7
 800a014:	9309      	str	r3, [sp, #36]	; 0x24
 800a016:	e767      	b.n	8009ee8 <_vfiprintf_r+0x94>
 800a018:	460c      	mov	r4, r1
 800a01a:	2001      	movs	r0, #1
 800a01c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a020:	e7a5      	b.n	8009f6e <_vfiprintf_r+0x11a>
 800a022:	2300      	movs	r3, #0
 800a024:	f04f 0c0a 	mov.w	ip, #10
 800a028:	4619      	mov	r1, r3
 800a02a:	3401      	adds	r4, #1
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	4620      	mov	r0, r4
 800a030:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a034:	3a30      	subs	r2, #48	; 0x30
 800a036:	2a09      	cmp	r2, #9
 800a038:	d903      	bls.n	800a042 <_vfiprintf_r+0x1ee>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0c5      	beq.n	8009fca <_vfiprintf_r+0x176>
 800a03e:	9105      	str	r1, [sp, #20]
 800a040:	e7c3      	b.n	8009fca <_vfiprintf_r+0x176>
 800a042:	4604      	mov	r4, r0
 800a044:	2301      	movs	r3, #1
 800a046:	fb0c 2101 	mla	r1, ip, r1, r2
 800a04a:	e7f0      	b.n	800a02e <_vfiprintf_r+0x1da>
 800a04c:	ab03      	add	r3, sp, #12
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	462a      	mov	r2, r5
 800a052:	4630      	mov	r0, r6
 800a054:	4b15      	ldr	r3, [pc, #84]	; (800a0ac <_vfiprintf_r+0x258>)
 800a056:	a904      	add	r1, sp, #16
 800a058:	f7fb f910 	bl	800527c <_printf_float>
 800a05c:	4607      	mov	r7, r0
 800a05e:	1c78      	adds	r0, r7, #1
 800a060:	d1d6      	bne.n	800a010 <_vfiprintf_r+0x1bc>
 800a062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a064:	07d9      	lsls	r1, r3, #31
 800a066:	d405      	bmi.n	800a074 <_vfiprintf_r+0x220>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	059a      	lsls	r2, r3, #22
 800a06c:	d402      	bmi.n	800a074 <_vfiprintf_r+0x220>
 800a06e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a070:	f7fe fb34 	bl	80086dc <__retarget_lock_release_recursive>
 800a074:	89ab      	ldrh	r3, [r5, #12]
 800a076:	065b      	lsls	r3, r3, #25
 800a078:	f53f af12 	bmi.w	8009ea0 <_vfiprintf_r+0x4c>
 800a07c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a07e:	e711      	b.n	8009ea4 <_vfiprintf_r+0x50>
 800a080:	ab03      	add	r3, sp, #12
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	462a      	mov	r2, r5
 800a086:	4630      	mov	r0, r6
 800a088:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <_vfiprintf_r+0x258>)
 800a08a:	a904      	add	r1, sp, #16
 800a08c:	f7fb fb92 	bl	80057b4 <_printf_i>
 800a090:	e7e4      	b.n	800a05c <_vfiprintf_r+0x208>
 800a092:	bf00      	nop
 800a094:	0800a484 	.word	0x0800a484
 800a098:	0800a4a4 	.word	0x0800a4a4
 800a09c:	0800a464 	.word	0x0800a464
 800a0a0:	0800a6a4 	.word	0x0800a6a4
 800a0a4:	0800a6ae 	.word	0x0800a6ae
 800a0a8:	0800527d 	.word	0x0800527d
 800a0ac:	08009e2f 	.word	0x08009e2f
 800a0b0:	0800a6aa 	.word	0x0800a6aa

0800a0b4 <abort>:
 800a0b4:	2006      	movs	r0, #6
 800a0b6:	b508      	push	{r3, lr}
 800a0b8:	f000 f82c 	bl	800a114 <raise>
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f7f8 fa6e 	bl	800259e <_exit>

0800a0c2 <_raise_r>:
 800a0c2:	291f      	cmp	r1, #31
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	d904      	bls.n	800a0d6 <_raise_r+0x14>
 800a0cc:	2316      	movs	r3, #22
 800a0ce:	6003      	str	r3, [r0, #0]
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	bd38      	pop	{r3, r4, r5, pc}
 800a0d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0d8:	b112      	cbz	r2, 800a0e0 <_raise_r+0x1e>
 800a0da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0de:	b94b      	cbnz	r3, 800a0f4 <_raise_r+0x32>
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f000 f831 	bl	800a148 <_getpid_r>
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	4601      	mov	r1, r0
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f0:	f000 b818 	b.w	800a124 <_kill_r>
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d00a      	beq.n	800a10e <_raise_r+0x4c>
 800a0f8:	1c59      	adds	r1, r3, #1
 800a0fa:	d103      	bne.n	800a104 <_raise_r+0x42>
 800a0fc:	2316      	movs	r3, #22
 800a0fe:	6003      	str	r3, [r0, #0]
 800a100:	2001      	movs	r0, #1
 800a102:	e7e7      	b.n	800a0d4 <_raise_r+0x12>
 800a104:	2400      	movs	r4, #0
 800a106:	4628      	mov	r0, r5
 800a108:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a10c:	4798      	blx	r3
 800a10e:	2000      	movs	r0, #0
 800a110:	e7e0      	b.n	800a0d4 <_raise_r+0x12>
	...

0800a114 <raise>:
 800a114:	4b02      	ldr	r3, [pc, #8]	; (800a120 <raise+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f7ff bfd2 	b.w	800a0c2 <_raise_r>
 800a11e:	bf00      	nop
 800a120:	20000048 	.word	0x20000048

0800a124 <_kill_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	2300      	movs	r3, #0
 800a128:	4d06      	ldr	r5, [pc, #24]	; (800a144 <_kill_r+0x20>)
 800a12a:	4604      	mov	r4, r0
 800a12c:	4608      	mov	r0, r1
 800a12e:	4611      	mov	r1, r2
 800a130:	602b      	str	r3, [r5, #0]
 800a132:	f7f8 fa24 	bl	800257e <_kill>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	d102      	bne.n	800a140 <_kill_r+0x1c>
 800a13a:	682b      	ldr	r3, [r5, #0]
 800a13c:	b103      	cbz	r3, 800a140 <_kill_r+0x1c>
 800a13e:	6023      	str	r3, [r4, #0]
 800a140:	bd38      	pop	{r3, r4, r5, pc}
 800a142:	bf00      	nop
 800a144:	2000087c 	.word	0x2000087c

0800a148 <_getpid_r>:
 800a148:	f7f8 ba12 	b.w	8002570 <_getpid>

0800a14c <_init>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	bf00      	nop
 800a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a152:	bc08      	pop	{r3}
 800a154:	469e      	mov	lr, r3
 800a156:	4770      	bx	lr

0800a158 <_fini>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	bf00      	nop
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr
