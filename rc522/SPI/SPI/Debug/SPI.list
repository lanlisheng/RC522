
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800471c  0800471c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800471c  0800471c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800471c  0800471c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08004794  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004794  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd18  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002391  00000000  00000000  0002cdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002f148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae63  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c357  00000000  00000000  0004b343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941dd  00000000  00000000  0005769a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff0  00000000  00000000  000eb8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	0800458c 	.word	0x0800458c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	0800458c 	.word	0x0800458c

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a25      	ldr	r2, [pc, #148]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0320 	and.w	r3, r3, #32
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000268:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800026e:	f043 0308 	orr.w	r3, r3, #8
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0308 	and.w	r3, r3, #8
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2110      	movs	r1, #16
 8000284:	4814      	ldr	r0, [pc, #80]	; (80002d8 <MX_GPIO_Init+0xb4>)
 8000286:	f001 f9ff 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	4813      	ldr	r0, [pc, #76]	; (80002dc <MX_GPIO_Init+0xb8>)
 8000290:	f001 f9fa 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000294:	2310      	movs	r3, #16
 8000296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000298:	2301      	movs	r3, #1
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a0:	2303      	movs	r3, #3
 80002a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80002a4:	f107 0310 	add.w	r3, r7, #16
 80002a8:	4619      	mov	r1, r3
 80002aa:	480b      	ldr	r0, [pc, #44]	; (80002d8 <MX_GPIO_Init+0xb4>)
 80002ac:	f001 f858 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 80002b0:	2301      	movs	r3, #1
 80002b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002bc:	2303      	movs	r3, #3
 80002be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 80002c0:	f107 0310 	add.w	r3, r7, #16
 80002c4:	4619      	mov	r1, r3
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_GPIO_Init+0xb8>)
 80002c8:	f001 f84a 	bl	8001360 <HAL_GPIO_Init>

}
 80002cc:	bf00      	nop
 80002ce:	3720      	adds	r7, #32
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e6:	f000 fd65 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ea:	f000 f871 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ee:	f7ff ff99 	bl	8000224 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002f2:	f000 fb0d 	bl	8000910 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002f6:	f000 fcb9 	bl	8000c6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("The USART Is Ok!!!\r\n");
 80002fa:	482b      	ldr	r0, [pc, #172]	; (80003a8 <main+0xc8>)
 80002fc:	f003 f9f6 	bl	80036ec <puts>
  // HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  // SPI1_ReadWriteByte(0xaa); //ÂêØÂä®‰º†Ëæì
  // HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
  //ÂàùÂßãÔø???????
  RC522_PcdReset();
 8000300:	f000 f912 	bl	8000528 <RC522_PcdReset>
  //ÂÖ≥Èó≠Â§©Á∫ø
  RC522_PcdAntennaOff();
 8000304:	f000 fafc 	bl	8000900 <RC522_PcdAntennaOff>
  //Ôø???????ÂêØÂ§©Ôø???????
  RC522_PcdAntennaOn();
 8000308:	f000 fad9 	bl	80008be <RC522_PcdAntennaOn>
  //ÈÄâÊã©Â∑•‰ΩúÊñπÂºè
  // M500PcdConfigISOType('A');
  printf(
 800030c:	4827      	ldr	r0, [pc, #156]	; (80003ac <main+0xcc>)
 800030e:	f003 f9ed 	bl	80036ec <puts>

    /* USER CODE BEGIN 3 */
    // ReaderCard();
    // printf("\r\n");
    // HAL_Delay(5000);
    uint8_t Temp[4] = {0};
 8000312:	2300      	movs	r3, #0
 8000314:	607b      	str	r3, [r7, #4]
    if (RC522_PcdRequest(0x52, Temp) == MI_OK) {
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4619      	mov	r1, r3
 800031a:	2052      	movs	r0, #82	; 0x52
 800031c:	f000 f8ba 	bl	8000494 <RC522_PcdRequest>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d138      	bne.n	8000398 <main+0xb8>
      if (Temp[0] == 0x04 && Temp[1] == 0x00)
 8000326:	793b      	ldrb	r3, [r7, #4]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d106      	bne.n	800033a <main+0x5a>
 800032c:	797b      	ldrb	r3, [r7, #5]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d103      	bne.n	800033a <main+0x5a>
        printf("MFOne-S50");
 8000332:	481f      	ldr	r0, [pc, #124]	; (80003b0 <main+0xd0>)
 8000334:	f003 f954 	bl	80035e0 <iprintf>
 8000338:	e02a      	b.n	8000390 <main+0xb0>
      else if (Temp[0] == 0x02 && Temp[1] == 0x00)
 800033a:	793b      	ldrb	r3, [r7, #4]
 800033c:	2b02      	cmp	r3, #2
 800033e:	d106      	bne.n	800034e <main+0x6e>
 8000340:	797b      	ldrb	r3, [r7, #5]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d103      	bne.n	800034e <main+0x6e>
        printf("MFOne-S70");
 8000346:	481b      	ldr	r0, [pc, #108]	; (80003b4 <main+0xd4>)
 8000348:	f003 f94a 	bl	80035e0 <iprintf>
 800034c:	e020      	b.n	8000390 <main+0xb0>
      else if (Temp[0] == 0x44 && Temp[1] == 0x00)
 800034e:	793b      	ldrb	r3, [r7, #4]
 8000350:	2b44      	cmp	r3, #68	; 0x44
 8000352:	d106      	bne.n	8000362 <main+0x82>
 8000354:	797b      	ldrb	r3, [r7, #5]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d103      	bne.n	8000362 <main+0x82>
        printf("MF-UltraLight");
 800035a:	4817      	ldr	r0, [pc, #92]	; (80003b8 <main+0xd8>)
 800035c:	f003 f940 	bl	80035e0 <iprintf>
 8000360:	e016      	b.n	8000390 <main+0xb0>
      else if (Temp[0] == 0x08 && Temp[1] == 0x00)
 8000362:	793b      	ldrb	r3, [r7, #4]
 8000364:	2b08      	cmp	r3, #8
 8000366:	d106      	bne.n	8000376 <main+0x96>
 8000368:	797b      	ldrb	r3, [r7, #5]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d103      	bne.n	8000376 <main+0x96>
        printf("MF-Pro");
 800036e:	4813      	ldr	r0, [pc, #76]	; (80003bc <main+0xdc>)
 8000370:	f003 f936 	bl	80035e0 <iprintf>
 8000374:	e00c      	b.n	8000390 <main+0xb0>
      else if (Temp[0] == 0x44 && Temp[1] == 0x03)
 8000376:	793b      	ldrb	r3, [r7, #4]
 8000378:	2b44      	cmp	r3, #68	; 0x44
 800037a:	d106      	bne.n	800038a <main+0xaa>
 800037c:	797b      	ldrb	r3, [r7, #5]
 800037e:	2b03      	cmp	r3, #3
 8000380:	d103      	bne.n	800038a <main+0xaa>
        printf("MF Desire");
 8000382:	480f      	ldr	r0, [pc, #60]	; (80003c0 <main+0xe0>)
 8000384:	f003 f92c 	bl	80035e0 <iprintf>
 8000388:	e002      	b.n	8000390 <main+0xb0>
      else
        printf("Unknown");
 800038a:	480e      	ldr	r0, [pc, #56]	; (80003c4 <main+0xe4>)
 800038c:	f003 f928 	bl	80035e0 <iprintf>
      printf("SUCCESS!");
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <main+0xe8>)
 8000392:	f003 f925 	bl	80035e0 <iprintf>
 8000396:	e002      	b.n	800039e <main+0xbe>
    } else {
      printf("Failed!");
 8000398:	480c      	ldr	r0, [pc, #48]	; (80003cc <main+0xec>)
 800039a:	f003 f921 	bl	80035e0 <iprintf>
    }

    HAL_Delay(100);
 800039e:	2064      	movs	r0, #100	; 0x64
 80003a0:	f000 fd6a 	bl	8000e78 <HAL_Delay>
  while (1) {
 80003a4:	e7b5      	b.n	8000312 <main+0x32>
 80003a6:	bf00      	nop
 80003a8:	080045a4 	.word	0x080045a4
 80003ac:	080045b8 	.word	0x080045b8
 80003b0:	080045e4 	.word	0x080045e4
 80003b4:	080045f0 	.word	0x080045f0
 80003b8:	080045fc 	.word	0x080045fc
 80003bc:	0800460c 	.word	0x0800460c
 80003c0:	08004614 	.word	0x08004614
 80003c4:	08004620 	.word	0x08004620
 80003c8:	08004628 	.word	0x08004628
 80003cc:	08004634 	.word	0x08004634

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b090      	sub	sp, #64	; 0x40
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	2228      	movs	r2, #40	; 0x28
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 f8f6 	bl	80035d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000400:	2301      	movs	r3, #1
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2302      	movs	r3, #2
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800040e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000414:	f107 0318 	add.w	r3, r7, #24
 8000418:	4618      	mov	r0, r3
 800041a:	f001 f94d 	bl	80016b8 <HAL_RCC_OscConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000424:	f000 f819 	bl	800045a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000428:	230f      	movs	r3, #15
 800042a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042c:	2302      	movs	r3, #2
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000438:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f001 fbb8 	bl	8001bb8 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800044e:	f000 f804 	bl	800045a <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3740      	adds	r7, #64	; 0x40
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045e:	b672      	cpsid	i
}
 8000460:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000462:	e7fe      	b.n	8000462 <Error_Handler+0x8>

08000464 <SPI1_WriteByte>:
ÂáΩÊï∞ÂèÇÊï∞Ôºödata:Ë¶ÅÂÜôÂÖ•ÁöÑÊï∞ÊçÆ
Ëøî Âõû ÂÄºÔºöËØªÂà∞ÁöÑÊï∞ÊçÆ
*/
HAL_StatusTypeDef
SPI1_WriteByte(uint8_t TxData) //ÂèëÈÄÅ‰∏Ä‰∏™Â≠óËäÇÔºåÂπ∂‰ªéÂØÑÂ≠òÂô®ËøîÂõû‰∏Ä‰∏™Â≠óËäÇ
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  uint8_t aTxBuffer[1], HH;
  aTxBuffer[0] = TxData;
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	733b      	strb	r3, [r7, #12]
  HH = HAL_SPI_Transmit(&hspi1, aTxBuffer, 1, 0xFFFF);
 8000472:	f107 010c 	add.w	r1, r7, #12
 8000476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047a:	2201      	movs	r2, #1
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <SPI1_WriteByte+0x2c>)
 800047e:	f001 fdb9 	bl	8001ff4 <HAL_SPI_Transmit>
 8000482:	4603      	mov	r3, r0
 8000484:	73fb      	strb	r3, [r7, #15]

  return HH;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	2000009c 	.word	0x2000009c

08000494 <RC522_PcdRequest>:
                0x0200 = Mifare_One(S70)
                0x0800 = Mifare_Pro(X)
                0x4403 = Mifare_DESFire
Ëøî Âõû ÂÄº: ÊàêÂäüËøîÂõûMI_OK
*/
uint8_t RC522_PcdRequest(uint8_t req_code, uint8_t *pTagType) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af02      	add	r7, sp, #8
 800049a:	4603      	mov	r3, r0
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	71fb      	strb	r3, [r7, #7]
  uint8_t status = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t unLen = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	623b      	str	r3, [r7, #32]
  uint8_t ucComMF522Buf[MAXRLEN] = {0}; // MAXRLEN  18
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	819a      	strh	r2, [r3, #12]

  RC522_ClearBitMask(Status2Reg, 0x08); //Ê∏ÖRC522ÂØÑÂ≠òÂô®‰Ωç,/Êé•Êî∂Êï∞ÊçÆÂëΩ‰ª§
 80004bc:	2108      	movs	r1, #8
 80004be:	2008      	movs	r0, #8
 80004c0:	f000 f905 	bl	80006ce <RC522_ClearBitMask>
  RC522_WriteRawRC(BitFramingReg, 0x07); //ÂÜôRC632ÂØÑÂ≠òÂô®
 80004c4:	2107      	movs	r1, #7
 80004c6:	200d      	movs	r0, #13
 80004c8:	f000 f8ae 	bl	8000628 <RC522_WriteRawRC>
  RC522_SetBitMask(TxControlReg, 0x03);  //ÁΩÆRC522ÂØÑÂ≠òÂô®‰Ωç
 80004cc:	2103      	movs	r1, #3
 80004ce:	2014      	movs	r0, #20
 80004d0:	f000 f8e0 	bl	8000694 <RC522_SetBitMask>

  ucComMF522Buf[0] = req_code; //ÂØªÂç°ÊñπÂºè
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	733b      	strb	r3, [r7, #12]

  status = RC522_PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 1, ucComMF522Buf,
 80004d8:	f107 020c 	add.w	r2, r7, #12
 80004dc:	f107 010c 	add.w	r1, r7, #12
 80004e0:	f107 0320 	add.w	r3, r7, #32
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	4613      	mov	r3, r2
 80004e8:	2201      	movs	r2, #1
 80004ea:	200c      	movs	r0, #12
 80004ec:	f000 f910 	bl	8000710 <RC522_PcdComMF522>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             &unLen); //ÈÄöËøáRC522ÂíåISO14443Âç°ÈÄöËÆØ

  if ((status == MI_OK) && (unLen == 0x10)) {
 80004f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10a      	bne.n	8000514 <RC522_PcdRequest+0x80>
 80004fe:	6a3b      	ldr	r3, [r7, #32]
 8000500:	2b10      	cmp	r3, #16
 8000502:	d107      	bne.n	8000514 <RC522_PcdRequest+0x80>
    *pTagType = ucComMF522Buf[0];
 8000504:	7b3a      	ldrb	r2, [r7, #12]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	701a      	strb	r2, [r3, #0]
    *(pTagType + 1) = ucComMF522Buf[1];
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	7b7a      	ldrb	r2, [r7, #13]
 8000510:	701a      	strb	r2, [r3, #0]
 8000512:	e002      	b.n	800051a <RC522_PcdRequest+0x86>
  } else {
    status = MI_ERR;
 8000514:	23fe      	movs	r3, #254	; 0xfe
 8000516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return status;
 800051a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800051e:	4618      	mov	r0, r3
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <RC522_PcdReset>:

/*
Âäü    ËÉΩÔºöÂ§ç‰ΩçRC522
Ëøî    ÂõûÔºöÊàêÂäüËøîÂõûMI_OK
*/
uint8_t RC522_PcdReset(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* MF522_RST=1; */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2101      	movs	r1, #1
 8000530:	4821      	ldr	r0, [pc, #132]	; (80005b8 <RC522_PcdReset+0x90>)
 8000532:	f001 f8a9 	bl	8001688 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f000 fc9e 	bl	8000e78 <HAL_Delay>
  /* MF522_RST=0; */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2101      	movs	r1, #1
 8000540:	481d      	ldr	r0, [pc, #116]	; (80005b8 <RC522_PcdReset+0x90>)
 8000542:	f001 f8a1 	bl	8001688 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000546:	2001      	movs	r0, #1
 8000548:	f000 fc96 	bl	8000e78 <HAL_Delay>
  /* MF522_RST=1; */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2101      	movs	r1, #1
 8000550:	4819      	ldr	r0, [pc, #100]	; (80005b8 <RC522_PcdReset+0x90>)
 8000552:	f001 f899 	bl	8001688 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fc8e 	bl	8000e78 <HAL_Delay>
  RC522_WriteRawRC(CommandReg, PCD_RESETPHASE); // Â§ç‰Ωç
 800055c:	210f      	movs	r1, #15
 800055e:	2001      	movs	r0, #1
 8000560:	f000 f862 	bl	8000628 <RC522_WriteRawRC>
  HAL_Delay(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 fc87 	bl	8000e78 <HAL_Delay>
  while (RC522_ReadRawRC(CommandReg) & 0x10)
 800056a:	bf00      	nop
 800056c:	2001      	movs	r0, #1
 800056e:	f000 f825 	bl	80005bc <RC522_ReadRawRC>
 8000572:	4603      	mov	r3, r0
 8000574:	f003 0310 	and.w	r3, r3, #16
 8000578:	2b00      	cmp	r3, #0
 800057a:	d1f7      	bne.n	800056c <RC522_PcdReset+0x44>
    ;
  // RC522_WriteRawRC(CommandReg, PCD_RESETPHASE); //ÂÜôRC632ÂØÑÂ≠òÂô®ÔºåÂ§ç‰Ωç
  // RC522_WriteRawRC(CommandReg, PCD_RESETPHASE); //ÂÜôRC632ÂØÑÂ≠òÂô®ÔºåÂ§ç‰Ωç
  HAL_Delay(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f000 fc7b 	bl	8000e78 <HAL_Delay>

  RC522_WriteRawRC(ModeReg, 0x3D);   //ÂíåMifareÂç°ÈÄöËÆØÔºåCRCÂàùÂßãÂÄº0x6363
 8000582:	213d      	movs	r1, #61	; 0x3d
 8000584:	2011      	movs	r0, #17
 8000586:	f000 f84f 	bl	8000628 <RC522_WriteRawRC>
  RC522_WriteRawRC(TReloadRegL, 30); //ÂÜôRC632ÂØÑÂ≠òÂô®
 800058a:	211e      	movs	r1, #30
 800058c:	202d      	movs	r0, #45	; 0x2d
 800058e:	f000 f84b 	bl	8000628 <RC522_WriteRawRC>
  RC522_WriteRawRC(TReloadRegH, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	202c      	movs	r0, #44	; 0x2c
 8000596:	f000 f847 	bl	8000628 <RC522_WriteRawRC>
  RC522_WriteRawRC(TModeReg, 0x8D);
 800059a:	218d      	movs	r1, #141	; 0x8d
 800059c:	202a      	movs	r0, #42	; 0x2a
 800059e:	f000 f843 	bl	8000628 <RC522_WriteRawRC>
  RC522_WriteRawRC(TPrescalerReg, 0x3E);
 80005a2:	213e      	movs	r1, #62	; 0x3e
 80005a4:	202b      	movs	r0, #43	; 0x2b
 80005a6:	f000 f83f 	bl	8000628 <RC522_WriteRawRC>

  RC522_WriteRawRC(TxASKReg, 0x40); //ÂøÖÈ°ªË¶Å
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	2015      	movs	r0, #21
 80005ae:	f000 f83b 	bl	8000628 <RC522_WriteRawRC>
  return MI_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010c00 	.word	0x40010c00

080005bc <RC522_ReadRawRC>:
/*
Âäü    ËÉΩÔºöËØªRC632ÂØÑÂ≠òÂô®
ÂèÇÊï∞ËØ¥ÊòéÔºöAddress[IN]:ÂØÑÂ≠òÂô®Âú∞ÂùÄ
Ëøî    ÂõûÔºöËØªÂá∫ÁöÑÂÄº
*/
uint8_t RC522_ReadRawRC(uint8_t Address) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ucAddr;
  static uint8_t ucResult = 0;
  // RC522_CS = 0; //ÁâáÈÄâÈÄâ‰∏≠RC522
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2110      	movs	r1, #16
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <RC522_ReadRawRC+0x60>)
 80005cc:	f001 f85c 	bl	8001688 <HAL_GPIO_WritePin>
  ucAddr = ((Address << 1) & 0x7E) | 0x80;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	73fb      	strb	r3, [r7, #15]
  if (HAL_OK == SPI1_WriteByte(ucAddr)) { //ÂèëÈÄÅÂëΩ‰ª§
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff3c 	bl	8000464 <SPI1_WriteByte>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d107      	bne.n	8000602 <RC522_ReadRawRC+0x46>
    HAL_SPI_Receive(&hspi1, &ucResult, 1, 0xFFFF);
 80005f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f6:	2201      	movs	r2, #1
 80005f8:	4909      	ldr	r1, [pc, #36]	; (8000620 <RC522_ReadRawRC+0x64>)
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <RC522_ReadRawRC+0x68>)
 80005fc:	f001 fe36 	bl	800226c <HAL_SPI_Receive>
 8000600:	e001      	b.n	8000606 <RC522_ReadRawRC+0x4a>
  } else {
    Error_Handler();
 8000602:	f7ff ff2a 	bl	800045a <Error_Handler>
  }
  //  SPI1_ReadWriteByte(0); //ËØªÂèñRC522ËøîÂõûÁöÑÊï∞ÊçÆ
  // RC522_CS = 1;                             //ÈáäÊîæÁâáÈÄâÁ∫ø(PF0)
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2110      	movs	r1, #16
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <RC522_ReadRawRC+0x60>)
 800060c:	f001 f83c 	bl	8001688 <HAL_GPIO_WritePin>
  return ucResult; //ËøîÂõûËØªÂà∞ÁöÑÊï∞ÊçÆ
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <RC522_ReadRawRC+0x64>)
 8000612:	781b      	ldrb	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40010800 	.word	0x40010800
 8000620:	2000008c 	.word	0x2000008c
 8000624:	2000009c 	.word	0x2000009c

08000628 <RC522_WriteRawRC>:
/*
Âäü    ËÉΩÔºöÂÜôRC632ÂØÑÂ≠òÂô®
ÂèÇÊï∞ËØ¥ÊòéÔºöAddress[IN]:ÂØÑÂ≠òÂô®Âú∞ÂùÄ
          value[IN] :ÂÜôÂÖ•ÁöÑÂÄº
*/
void RC522_WriteRawRC(uint8_t Address, uint8_t value) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
  uint8_t ucAddr;
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin,
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <RC522_WriteRawRC+0x68>)
 800063e:	f001 f823 	bl	8001688 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET); // MF522_NSS = 0;
  ucAddr = ((Address << 1) & 0x7E);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800064c:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK != SPI1_WriteByte(ucAddr)) { // SPI1ÂèëÈÄÅ‰∏Ä‰∏™Â≠óËäÇ.ÂØÑÂ≠òÂô®ÂÜôÂÖ•Âú∞ÂùÄ
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff07 	bl	8000464 <SPI1_WriteByte>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <RC522_WriteRawRC+0x38>
    Error_Handler();
 800065c:	f7ff fefd 	bl	800045a <Error_Handler>
  }
  if (HAL_OK != SPI1_WriteByte(value)) { // SPI1ÂèëÈÄÅ‰∏Ä‰∏™Â≠óËäÇ
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fefe 	bl	8000464 <SPI1_WriteByte>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <RC522_WriteRawRC+0x4a>
    Error_Handler();
 800066e:	f7ff fef4 	bl	800045a <Error_Handler>
  }

  HAL_GPIO_WritePin(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <RC522_WriteRawRC+0x68>)
 8000678:	f001 f806 	bl	8001688 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2110      	movs	r1, #16
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <RC522_WriteRawRC+0x68>)
 8000682:	f001 f801 	bl	8001688 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40010800 	.word	0x40010800

08000694 <RC522_SetBitMask>:
/*
Âäü    ËÉΩÔºöÁΩÆRC522ÂØÑÂ≠òÂô®‰Ωç
ÂèÇÊï∞ËØ¥ÊòéÔºöreg[IN]:ÂØÑÂ≠òÂô®Âú∞ÂùÄ
          mask[IN]:ÁΩÆ‰ΩçÂÄº
*/
void RC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
  char tmp = 0x0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
  tmp = RC522_ReadRawRC(reg);        //ËØªRC632ÂØÑÂ≠òÂô®
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff86 	bl	80005bc <RC522_ReadRawRC>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
  RC522_WriteRawRC(reg, tmp | mask); //ÂÜôRC632ÂØÑÂ≠òÂô®
 80006b4:	7bfa      	ldrb	r2, [r7, #15]
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb1 	bl	8000628 <RC522_WriteRawRC>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <RC522_ClearBitMask>:
/*
Âäü    ËÉΩÔºöÊ∏ÖRC522ÂØÑÂ≠òÂô®‰Ωç
ÂèÇÊï∞ËØ¥ÊòéÔºöreg[IN]:ÂØÑÂ≠òÂô®Âú∞ÂùÄ
         mask[IN]:Ê∏Ö‰ΩçÂÄº
*/
void RC522_ClearBitMask(uint8_t reg, uint8_t mask) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	460a      	mov	r2, r1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	4613      	mov	r3, r2
 80006dc:	71bb      	strb	r3, [r7, #6]
  uint8_t tmp = 0x0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]
  tmp = RC522_ReadRawRC(reg) & (~mask);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff69 	bl	80005bc <RC522_ReadRawRC>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006f2:	43db      	mvns	r3, r3
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	4013      	ands	r3, r2
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
  RC522_WriteRawRC(reg, tmp); // clear bit mask
 80006fc:	7bfa      	ldrb	r2, [r7, #15]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff90 	bl	8000628 <RC522_WriteRawRC>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <RC522_PcdComMF522>:
          InLenByte[IN]:ÂèëÈÄÅÊï∞ÊçÆÁöÑÂ≠óËäÇÈïøÂ∫¶
          pOut [OUT]:Êé•Êî∂Âà∞ÁöÑÂç°ÁâáËøîÂõûÊï∞ÊçÆ
          *pOutLenBit[OUT]:ËøîÂõûÊï∞ÊçÆÁöÑ‰ΩçÈïøÂ∫¶
*/
uint8_t RC522_PcdComMF522(uint8_t Command, uint8_t *pIn, uint8_t InLenByte,
                          uint8_t *pOut, uint32_t *pOutLenBit) {
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4603      	mov	r3, r0
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	4613      	mov	r3, r2
 8000720:	73bb      	strb	r3, [r7, #14]
  uint8_t status = MI_ERR;
 8000722:	23fe      	movs	r3, #254	; 0xfe
 8000724:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	77bb      	strb	r3, [r7, #30]
  uint8_t waitFor = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t n = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	773b      	strb	r3, [r7, #28]
  uint32_t i = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]

  switch (Command) {
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b0c      	cmp	r3, #12
 800073e:	d006      	beq.n	800074e <RC522_PcdComMF522+0x3e>
 8000740:	2b0e      	cmp	r3, #14
 8000742:	d109      	bne.n	8000758 <RC522_PcdComMF522+0x48>
  case PCD_AUTHENT: //È™åËØÅÂØÜÈí•
    irqEn = 0x12;
 8000744:	2312      	movs	r3, #18
 8000746:	77bb      	strb	r3, [r7, #30]
    waitFor = 0x10;
 8000748:	2310      	movs	r3, #16
 800074a:	777b      	strb	r3, [r7, #29]
    break;
 800074c:	e005      	b.n	800075a <RC522_PcdComMF522+0x4a>
  case PCD_TRANSCEIVE: //ÂèëÈÄÅÂπ∂Êé•Êî∂Êï∞ÊçÆ
    irqEn = 0x77;
 800074e:	2377      	movs	r3, #119	; 0x77
 8000750:	77bb      	strb	r3, [r7, #30]
    waitFor = 0x30;
 8000752:	2330      	movs	r3, #48	; 0x30
 8000754:	777b      	strb	r3, [r7, #29]
    break;
 8000756:	e000      	b.n	800075a <RC522_PcdComMF522+0x4a>
  default:
    break;
 8000758:	bf00      	nop
  }
  RC522_WriteRawRC(ComIEnReg, irqEn | 0x80);
 800075a:	7fbb      	ldrb	r3, [r7, #30]
 800075c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	2002      	movs	r0, #2
 8000766:	f7ff ff5f 	bl	8000628 <RC522_WriteRawRC>
  RC522_ClearBitMask(ComIrqReg, 0x80); //Ê∏ÖÊâÄÊúâ‰∏≠Êñ≠‰Ωç
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	2004      	movs	r0, #4
 800076e:	f7ff ffae 	bl	80006ce <RC522_ClearBitMask>
  RC522_WriteRawRC(CommandReg, PCD_IDLE);
 8000772:	2100      	movs	r1, #0
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff ff57 	bl	8000628 <RC522_WriteRawRC>
  RC522_SetBitMask(FIFOLevelReg, 0x80); //Ê∏ÖFIFOÁºìÂ≠ò
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	200a      	movs	r0, #10
 800077e:	f7ff ff89 	bl	8000694 <RC522_SetBitMask>

  for (i = 0; i < InLenByte; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	e00a      	b.n	800079e <RC522_PcdComMF522+0x8e>
    RC522_WriteRawRC(FIFODataReg, pIn[i]);
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	2009      	movs	r0, #9
 8000794:	f7ff ff48 	bl	8000628 <RC522_WriteRawRC>
  for (i = 0; i < InLenByte; i++) {
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	3301      	adds	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	69ba      	ldr	r2, [r7, #24]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d3f0      	bcc.n	8000788 <RC522_PcdComMF522+0x78>
  }

  RC522_WriteRawRC(CommandReg, Command);
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4619      	mov	r1, r3
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff3c 	bl	8000628 <RC522_WriteRawRC>
  if (Command == PCD_TRANSCEIVE) {
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2b0c      	cmp	r3, #12
 80007b4:	d103      	bne.n	80007be <RC522_PcdComMF522+0xae>
    RC522_SetBitMask(BitFramingReg, 0x80); //ÂºÄÂßã‰º†ÈÄÅ
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	200d      	movs	r0, #13
 80007ba:	f7ff ff6b 	bl	8000694 <RC522_SetBitMask>
  }

  //ÊúâÈóÆÈ¢òÔºå‰∏ãÈù¢ÁöÑÂæ™ÁéØ
  // i = 600;//Ê†πÊçÆÊó∂ÈíüÈ¢ëÁéáË∞ÉÊï¥ÔºåÊìç‰ΩúM1Âç°ÊúÄÂ§ßÁ≠âÂæÖÊó∂Èó¥25ms
  i = 1000;
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	61bb      	str	r3, [r7, #24]
  do {
    n = RC522_ReadRawRC(ComIrqReg);
 80007c4:	2004      	movs	r0, #4
 80007c6:	f7ff fef9 	bl	80005bc <RC522_ReadRawRC>
 80007ca:	4603      	mov	r3, r0
 80007cc:	773b      	strb	r3, [r7, #28]
    i--;
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  } while ((i != 0) && !(n & 0x01) && !(n & waitFor));
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00a      	beq.n	80007f0 <RC522_PcdComMF522+0xe0>
 80007da:	7f3b      	ldrb	r3, [r7, #28]
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d105      	bne.n	80007f0 <RC522_PcdComMF522+0xe0>
 80007e4:	7f3a      	ldrb	r2, [r7, #28]
 80007e6:	7f7b      	ldrb	r3, [r7, #29]
 80007e8:	4013      	ands	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0e9      	beq.n	80007c4 <RC522_PcdComMF522+0xb4>

  RC522_ClearBitMask(BitFramingReg, 0x80);
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	200d      	movs	r0, #13
 80007f4:	f7ff ff6b 	bl	80006ce <RC522_ClearBitMask>
  if (i != 0) {
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d052      	beq.n	80008a4 <RC522_PcdComMF522+0x194>
    if (!(RC522_ReadRawRC(ErrorReg) & 0x1B)) {
 80007fe:	2006      	movs	r0, #6
 8000800:	f7ff fedc 	bl	80005bc <RC522_ReadRawRC>
 8000804:	4603      	mov	r3, r0
 8000806:	f003 031b 	and.w	r3, r3, #27
 800080a:	2b00      	cmp	r3, #0
 800080c:	d148      	bne.n	80008a0 <RC522_PcdComMF522+0x190>
      status = MI_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 8000812:	7f3a      	ldrb	r2, [r7, #28]
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	4013      	ands	r3, r2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <RC522_PcdComMF522+0x116>
        status = MI_NOTAGERR;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	77fb      	strb	r3, [r7, #31]
      }
      if (Command == PCD_TRANSCEIVE) {
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b0c      	cmp	r3, #12
 800082a:	d13b      	bne.n	80008a4 <RC522_PcdComMF522+0x194>
        n = RC522_ReadRawRC(FIFOLevelReg);
 800082c:	200a      	movs	r0, #10
 800082e:	f7ff fec5 	bl	80005bc <RC522_ReadRawRC>
 8000832:	4603      	mov	r3, r0
 8000834:	773b      	strb	r3, [r7, #28]
        lastBits = RC522_ReadRawRC(ControlReg) & 0x07;
 8000836:	200c      	movs	r0, #12
 8000838:	f7ff fec0 	bl	80005bc <RC522_ReadRawRC>
 800083c:	4603      	mov	r3, r0
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	75fb      	strb	r3, [r7, #23]
        if (lastBits) {
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d008      	beq.n	800085c <RC522_PcdComMF522+0x14c>
          *pOutLenBit = (n - 1) * 8 + lastBits;
 800084a:	7f3b      	ldrb	r3, [r7, #28]
 800084c:	3b01      	subs	r3, #1
 800084e:	00da      	lsls	r2, r3, #3
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	4413      	add	r3, r2
 8000854:	461a      	mov	r2, r3
 8000856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e004      	b.n	8000866 <RC522_PcdComMF522+0x156>
        } else {
          *pOutLenBit = n * 8;
 800085c:	7f3b      	ldrb	r3, [r7, #28]
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	461a      	mov	r2, r3
 8000862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000864:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8000866:	7f3b      	ldrb	r3, [r7, #28]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <RC522_PcdComMF522+0x160>
          n = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	773b      	strb	r3, [r7, #28]
        if (n > MAXRLEN)
 8000870:	7f3b      	ldrb	r3, [r7, #28]
 8000872:	2b12      	cmp	r3, #18
 8000874:	d901      	bls.n	800087a <RC522_PcdComMF522+0x16a>
          n = MAXRLEN;
 8000876:	2312      	movs	r3, #18
 8000878:	773b      	strb	r3, [r7, #28]
        for (i = 0; i < n; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	e00a      	b.n	8000896 <RC522_PcdComMF522+0x186>
          pOut[i] = RC522_ReadRawRC(FIFODataReg);
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	18d4      	adds	r4, r2, r3
 8000886:	2009      	movs	r0, #9
 8000888:	f7ff fe98 	bl	80005bc <RC522_ReadRawRC>
 800088c:	4603      	mov	r3, r0
 800088e:	7023      	strb	r3, [r4, #0]
        for (i = 0; i < n; i++) {
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	3301      	adds	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	7f3b      	ldrb	r3, [r7, #28]
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	429a      	cmp	r2, r3
 800089c:	d3f0      	bcc.n	8000880 <RC522_PcdComMF522+0x170>
 800089e:	e001      	b.n	80008a4 <RC522_PcdComMF522+0x194>
        }
      }
    } else {
      status = MI_ERR;
 80008a0:	23fe      	movs	r3, #254	; 0xfe
 80008a2:	77fb      	strb	r3, [r7, #31]
    }
  }
  RC522_SetBitMask(ControlReg, 0x80); // stop timer now
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	200c      	movs	r0, #12
 80008a8:	f7ff fef4 	bl	8000694 <RC522_SetBitMask>
  RC522_WriteRawRC(CommandReg, PCD_IDLE);
 80008ac:	2100      	movs	r1, #0
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff feba 	bl	8000628 <RC522_WriteRawRC>
  return status;
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	; 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd90      	pop	{r4, r7, pc}

080008be <RC522_PcdAntennaOn>:

/*
ÂáΩÊï∞ÂäüËÉΩÔºöÂºÄÂêØÂ§©Á∫ø
ÂèÇ    Êï∞ÔºöÊØèÊ¨°ÂêØÂä®ÊàñÂÖ≥Èó≠Â§©Èô©ÂèëÂ∞Ñ‰πãÈó¥Â∫îËá≥Â∞ëÊúâ1msÁöÑÈó¥Èöî
*/
void RC522_PcdAntennaOn(void) {
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
  uint8_t i;
  RC522_WriteRawRC(TxASKReg, 0x40);
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	2015      	movs	r0, #21
 80008c8:	f7ff feae 	bl	8000628 <RC522_WriteRawRC>
  HAL_Delay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f000 fad3 	bl	8000e78 <HAL_Delay>
  i = RC522_ReadRawRC(TxControlReg);
 80008d2:	2014      	movs	r0, #20
 80008d4:	f7ff fe72 	bl	80005bc <RC522_ReadRawRC>
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
  if (!(i & 0x03)) {
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d103      	bne.n	80008ee <RC522_PcdAntennaOn+0x30>
    RC522_SetBitMask(TxControlReg, 0x03);
 80008e6:	2103      	movs	r1, #3
 80008e8:	2014      	movs	r0, #20
 80008ea:	f7ff fed3 	bl	8000694 <RC522_SetBitMask>
  }
  i = RC522_ReadRawRC(TxASKReg);
 80008ee:	2015      	movs	r0, #21
 80008f0:	f7ff fe64 	bl	80005bc <RC522_ReadRawRC>
 80008f4:	4603      	mov	r3, r0
 80008f6:	71fb      	strb	r3, [r7, #7]
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <RC522_PcdAntennaOff>:

/*
ÂáΩÊï∞ÂäüËÉΩÔºöÂÖ≥Èó≠Â§©Á∫ø
ÂèÇ    Êï∞ÔºöÊØèÊ¨°ÂêØÂä®ÊàñÂÖ≥Èó≠Â§©Èô©ÂèëÂ∞Ñ‰πãÈó¥Â∫îËá≥Â∞ëÊúâ1msÁöÑÈó¥Èöî
*/
void RC522_PcdAntennaOff(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  RC522_ClearBitMask(TxControlReg, 0x03); //Ê∏ÖRC522ÂØÑÂ≠òÂô®‰Ωç
 8000904:	2103      	movs	r1, #3
 8000906:	2014      	movs	r0, #20
 8000908:	f7ff fee1 	bl	80006ce <RC522_ClearBitMask>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI1_Init+0x64>)
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <MX_SPI1_Init+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI1_Init+0x64>)
 800091c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI1_Init+0x64>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI1_Init+0x64>)
 8000944:	2228      	movs	r2, #40	; 0x28
 8000946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI1_Init+0x64>)
 800095c:	220a      	movs	r2, #10
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_SPI1_Init+0x64>)
 8000962:	f001 fac3 	bl	8001eec <HAL_SPI_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800096c:	f7ff fd75 	bl	800045a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000009c 	.word	0x2000009c
 8000978:	40013000 	.word	0x40013000

0800097c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <HAL_SPI_MspInit+0x98>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d137      	bne.n	8000a0c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_SPI_MspInit+0x9c>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <HAL_SPI_MspInit+0x9c>)
 80009a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_SPI_MspInit+0x9c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_SPI_MspInit+0x9c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_SPI_MspInit+0x9c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_SPI_MspInit+0x9c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|GPIO_PIN_7;
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <HAL_SPI_MspInit+0xa0>)
 80009e0:	f000 fcbe 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_SPI_MspInit+0xa0>)
 80009f8:	f000 fcb2 	bl	8001360 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2023      	movs	r0, #35	; 0x23
 8000a02:	f000 fb34 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a06:	2023      	movs	r0, #35	; 0x23
 8000a08:	f000 fb4d 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40013000 	.word	0x40013000
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010800 	.word	0x40010800

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_MspInit+0x5c>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_MspInit+0x5c>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_MspInit+0x5c>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x5c>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x5c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x5c>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_MspInit+0x60>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_MspInit+0x60>)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f9b9 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <SPI1_IRQHandler+0x10>)
 8000ada:	f001 fe7b 	bl	80027d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000009c 	.word	0x2000009c

08000ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART1_IRQHandler+0x10>)
 8000aee:	f002 f94d 	bl	8002d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000f4 	.word	0x200000f4

08000afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
	}

return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f879 	bl	8000c48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
	}
	return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b94:	605a      	str	r2, [r3, #4]
	return 0;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <_isatty>:

int _isatty(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f002 fcbc 	bl	800357c <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000c000 	.word	0x2000c000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000090 	.word	0x20000090
 8000c38:	20000150 	.word	0x20000150

08000c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of
   * transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c50:	1d39      	adds	r1, r7, #4
 8000c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c56:	2201      	movs	r2, #1
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <__io_putchar+0x20>)
 8000c5a:	f002 f804 	bl	8002c66 <HAL_UART_Transmit>
  return ch;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000f4 	.word	0x200000f4

08000c6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART1_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f001 ff92 	bl	8002bcc <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f7ff fbd4 	bl	800045a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000f4 	.word	0x200000f4
 8000cbc:	40013800 	.word	0x40013800

08000cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <HAL_UART_MspInit+0x9c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d139      	bne.n	8000d54 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_UART_MspInit+0xa0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <HAL_UART_MspInit+0xa0>)
 8000ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_UART_MspInit+0xa0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_UART_MspInit+0xa0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <HAL_UART_MspInit+0xa0>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_UART_MspInit+0xa0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4619      	mov	r1, r3
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <HAL_UART_MspInit+0xa4>)
 8000d26:	f000 fb1b 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <HAL_UART_MspInit+0xa4>)
 8000d40:	f000 fb0e 	bl	8001360 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2025      	movs	r0, #37	; 0x25
 8000d4a:	f000 f990 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d4e:	2025      	movs	r0, #37	; 0x25
 8000d50:	f000 f9a9 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40013800 	.word	0x40013800
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800

08000d68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d8e:	f7ff ff55 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f002 fbf9 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d96:	f7ff faa3 	bl	80002e0 <main>
  bx lr
 8000d9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da4:	08004724 	.word	0x08004724
  ldr r2, =_sbss
 8000da8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dac:	2000014c 	.word	0x2000014c

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x28>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x28>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f947 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fe26 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f95f 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f927 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_IncTick+0x20>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <HAL_IncTick+0x20>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000138 	.word	0x20000138

08000e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <HAL_GetTick+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000138 	.word	0x20000138

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff fff0 	bl	8000e64 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffe0 	bl	8000e64 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <__NVIC_EnableIRQ+0x34>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff90 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff2d 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff42 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff90 	bl	8000fb0 <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff35 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d008      	beq.n	8001102 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2204      	movs	r2, #4
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e020      	b.n	8001144 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 020e 	bic.w	r2, r2, #14
 8001110:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0201 	bic.w	r2, r2, #1
 8001120:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
	...

08001150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001162:	2b02      	cmp	r3, #2
 8001164:	d005      	beq.n	8001172 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2204      	movs	r2, #4
 800116a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e0d6      	b.n	8001320 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 020e 	bic.w	r2, r2, #14
 8001180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b64      	ldr	r3, [pc, #400]	; (800132c <HAL_DMA_Abort_IT+0x1dc>)
 800119a:	429a      	cmp	r2, r3
 800119c:	d958      	bls.n	8001250 <HAL_DMA_Abort_IT+0x100>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a63      	ldr	r2, [pc, #396]	; (8001330 <HAL_DMA_Abort_IT+0x1e0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04f      	beq.n	8001248 <HAL_DMA_Abort_IT+0xf8>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a61      	ldr	r2, [pc, #388]	; (8001334 <HAL_DMA_Abort_IT+0x1e4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d048      	beq.n	8001244 <HAL_DMA_Abort_IT+0xf4>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a60      	ldr	r2, [pc, #384]	; (8001338 <HAL_DMA_Abort_IT+0x1e8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d040      	beq.n	800123e <HAL_DMA_Abort_IT+0xee>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a5e      	ldr	r2, [pc, #376]	; (800133c <HAL_DMA_Abort_IT+0x1ec>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d038      	beq.n	8001238 <HAL_DMA_Abort_IT+0xe8>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a5d      	ldr	r2, [pc, #372]	; (8001340 <HAL_DMA_Abort_IT+0x1f0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d030      	beq.n	8001232 <HAL_DMA_Abort_IT+0xe2>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a5b      	ldr	r2, [pc, #364]	; (8001344 <HAL_DMA_Abort_IT+0x1f4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d028      	beq.n	800122c <HAL_DMA_Abort_IT+0xdc>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a53      	ldr	r2, [pc, #332]	; (800132c <HAL_DMA_Abort_IT+0x1dc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d020      	beq.n	8001226 <HAL_DMA_Abort_IT+0xd6>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_DMA_Abort_IT+0x1f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_DMA_Abort_IT+0xd2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a56      	ldr	r2, [pc, #344]	; (800134c <HAL_DMA_Abort_IT+0x1fc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d012      	beq.n	800121e <HAL_DMA_Abort_IT+0xce>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a54      	ldr	r2, [pc, #336]	; (8001350 <HAL_DMA_Abort_IT+0x200>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00a      	beq.n	8001218 <HAL_DMA_Abort_IT+0xc8>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a53      	ldr	r2, [pc, #332]	; (8001354 <HAL_DMA_Abort_IT+0x204>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d102      	bne.n	8001212 <HAL_DMA_Abort_IT+0xc2>
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	e01b      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001216:	e018      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121c:	e015      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 800121e:	2310      	movs	r3, #16
 8001220:	e013      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001222:	2301      	movs	r3, #1
 8001224:	e011      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122a:	e00e      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 800122c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001230:	e00b      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001236:	e008      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	e005      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	e002      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001244:	2310      	movs	r3, #16
 8001246:	e000      	b.n	800124a <HAL_DMA_Abort_IT+0xfa>
 8001248:	2301      	movs	r3, #1
 800124a:	4a43      	ldr	r2, [pc, #268]	; (8001358 <HAL_DMA_Abort_IT+0x208>)
 800124c:	6053      	str	r3, [r2, #4]
 800124e:	e057      	b.n	8001300 <HAL_DMA_Abort_IT+0x1b0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a36      	ldr	r2, [pc, #216]	; (8001330 <HAL_DMA_Abort_IT+0x1e0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d04f      	beq.n	80012fa <HAL_DMA_Abort_IT+0x1aa>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a35      	ldr	r2, [pc, #212]	; (8001334 <HAL_DMA_Abort_IT+0x1e4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d048      	beq.n	80012f6 <HAL_DMA_Abort_IT+0x1a6>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a33      	ldr	r2, [pc, #204]	; (8001338 <HAL_DMA_Abort_IT+0x1e8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d040      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x1a0>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_DMA_Abort_IT+0x1ec>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d038      	beq.n	80012ea <HAL_DMA_Abort_IT+0x19a>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a30      	ldr	r2, [pc, #192]	; (8001340 <HAL_DMA_Abort_IT+0x1f0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d030      	beq.n	80012e4 <HAL_DMA_Abort_IT+0x194>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <HAL_DMA_Abort_IT+0x1f4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d028      	beq.n	80012de <HAL_DMA_Abort_IT+0x18e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_DMA_Abort_IT+0x1dc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d020      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x188>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <HAL_DMA_Abort_IT+0x1f8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d019      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x184>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a29      	ldr	r2, [pc, #164]	; (800134c <HAL_DMA_Abort_IT+0x1fc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d012      	beq.n	80012d0 <HAL_DMA_Abort_IT+0x180>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a28      	ldr	r2, [pc, #160]	; (8001350 <HAL_DMA_Abort_IT+0x200>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d00a      	beq.n	80012ca <HAL_DMA_Abort_IT+0x17a>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_DMA_Abort_IT+0x204>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d102      	bne.n	80012c4 <HAL_DMA_Abort_IT+0x174>
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	e01b      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c8:	e018      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	e015      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012d0:	2310      	movs	r3, #16
 80012d2:	e013      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e011      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	e00e      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012e2:	e00b      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	e008      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	e005      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	e002      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012f6:	2310      	movs	r3, #16
 80012f8:	e000      	b.n	80012fc <HAL_DMA_Abort_IT+0x1ac>
 80012fa:	2301      	movs	r3, #1
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_DMA_Abort_IT+0x20c>)
 80012fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	4798      	blx	r3
    } 
  }
  return status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40020080 	.word	0x40020080
 8001330:	40020008 	.word	0x40020008
 8001334:	4002001c 	.word	0x4002001c
 8001338:	40020030 	.word	0x40020030
 800133c:	40020044 	.word	0x40020044
 8001340:	40020058 	.word	0x40020058
 8001344:	4002006c 	.word	0x4002006c
 8001348:	40020408 	.word	0x40020408
 800134c:	4002041c 	.word	0x4002041c
 8001350:	40020430 	.word	0x40020430
 8001354:	40020444 	.word	0x40020444
 8001358:	40020400 	.word	0x40020400
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e179      	b.n	8001668 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001374:	2201      	movs	r2, #1
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8168 	bne.w	8001662 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4aa0      	ldr	r2, [pc, #640]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d05e      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 800139c:	4a9e      	ldr	r2, [pc, #632]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d875      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013a2:	4a9e      	ldr	r2, [pc, #632]	; (800161c <HAL_GPIO_Init+0x2bc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d058      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013a8:	4a9c      	ldr	r2, [pc, #624]	; (800161c <HAL_GPIO_Init+0x2bc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d86f      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ae:	4a9c      	ldr	r2, [pc, #624]	; (8001620 <HAL_GPIO_Init+0x2c0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d052      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013b4:	4a9a      	ldr	r2, [pc, #616]	; (8001620 <HAL_GPIO_Init+0x2c0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d869      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ba:	4a9a      	ldr	r2, [pc, #616]	; (8001624 <HAL_GPIO_Init+0x2c4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d04c      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013c0:	4a98      	ldr	r2, [pc, #608]	; (8001624 <HAL_GPIO_Init+0x2c4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d863      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013c6:	4a98      	ldr	r2, [pc, #608]	; (8001628 <HAL_GPIO_Init+0x2c8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d046      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013cc:	4a96      	ldr	r2, [pc, #600]	; (8001628 <HAL_GPIO_Init+0x2c8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d85d      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d82a      	bhi.n	800142c <HAL_GPIO_Init+0xcc>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d859      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <HAL_GPIO_Init+0x80>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	08001435 	.word	0x08001435
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001489 	.word	0x08001489
 80013f0:	0800148f 	.word	0x0800148f
 80013f4:	0800148f 	.word	0x0800148f
 80013f8:	0800148f 	.word	0x0800148f
 80013fc:	0800148f 	.word	0x0800148f
 8001400:	0800148f 	.word	0x0800148f
 8001404:	0800148f 	.word	0x0800148f
 8001408:	0800148f 	.word	0x0800148f
 800140c:	0800148f 	.word	0x0800148f
 8001410:	0800148f 	.word	0x0800148f
 8001414:	0800148f 	.word	0x0800148f
 8001418:	0800148f 	.word	0x0800148f
 800141c:	0800148f 	.word	0x0800148f
 8001420:	0800148f 	.word	0x0800148f
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001451 	.word	0x08001451
 800142c:	4a7f      	ldr	r2, [pc, #508]	; (800162c <HAL_GPIO_Init+0x2cc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001432:	e02c      	b.n	800148e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e029      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e024      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	3308      	adds	r3, #8
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e01f      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	330c      	adds	r3, #12
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e01a      	b.n	8001490 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001462:	2304      	movs	r3, #4
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e013      	b.n	8001490 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	611a      	str	r2, [r3, #16]
          break;
 800147a:	e009      	b.n	8001490 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	615a      	str	r2, [r3, #20]
          break;
 8001486:	e003      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x130>
          break;
 800148e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d801      	bhi.n	800149a <HAL_GPIO_Init+0x13a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e001      	b.n	800149e <HAL_GPIO_Init+0x13e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d802      	bhi.n	80014ac <HAL_GPIO_Init+0x14c>
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	e002      	b.n	80014b2 <HAL_GPIO_Init+0x152>
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3b08      	subs	r3, #8
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	210f      	movs	r1, #15
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	6a39      	ldr	r1, [r7, #32]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80c1 	beq.w	8001662 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f8:	4a4e      	ldr	r2, [pc, #312]	; (8001634 <HAL_GPIO_Init+0x2d4>)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a46      	ldr	r2, [pc, #280]	; (8001638 <HAL_GPIO_Init+0x2d8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d01f      	beq.n	8001564 <HAL_GPIO_Init+0x204>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a45      	ldr	r2, [pc, #276]	; (800163c <HAL_GPIO_Init+0x2dc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d019      	beq.n	8001560 <HAL_GPIO_Init+0x200>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a44      	ldr	r2, [pc, #272]	; (8001640 <HAL_GPIO_Init+0x2e0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d013      	beq.n	800155c <HAL_GPIO_Init+0x1fc>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a43      	ldr	r2, [pc, #268]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00d      	beq.n	8001558 <HAL_GPIO_Init+0x1f8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a42      	ldr	r2, [pc, #264]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x1f4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a41      	ldr	r2, [pc, #260]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_GPIO_Init+0x1f0>
 800154c:	2305      	movs	r3, #5
 800154e:	e00a      	b.n	8001566 <HAL_GPIO_Init+0x206>
 8001550:	2306      	movs	r3, #6
 8001552:	e008      	b.n	8001566 <HAL_GPIO_Init+0x206>
 8001554:	2304      	movs	r3, #4
 8001556:	e006      	b.n	8001566 <HAL_GPIO_Init+0x206>
 8001558:	2303      	movs	r3, #3
 800155a:	e004      	b.n	8001566 <HAL_GPIO_Init+0x206>
 800155c:	2302      	movs	r3, #2
 800155e:	e002      	b.n	8001566 <HAL_GPIO_Init+0x206>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <HAL_GPIO_Init+0x206>
 8001564:	2300      	movs	r3, #0
 8001566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001568:	f002 0203 	and.w	r2, r2, #3
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	4093      	lsls	r3, r2
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001576:	492f      	ldr	r1, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x2d4>)
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	492e      	ldr	r1, [pc, #184]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	492a      	ldr	r1, [pc, #168]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4924      	ldr	r1, [pc, #144]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4920      	ldr	r1, [pc, #128]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	491a      	ldr	r1, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4916      	ldr	r1, [pc, #88]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d025      	beq.n	8001654 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	4910      	ldr	r1, [pc, #64]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
 8001614:	e025      	b.n	8001662 <HAL_GPIO_Init+0x302>
 8001616:	bf00      	nop
 8001618:	10320000 	.word	0x10320000
 800161c:	10310000 	.word	0x10310000
 8001620:	10220000 	.word	0x10220000
 8001624:	10210000 	.word	0x10210000
 8001628:	10120000 	.word	0x10120000
 800162c:	10110000 	.word	0x10110000
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00
 8001640:	40011000 	.word	0x40011000
 8001644:	40011400 	.word	0x40011400
 8001648:	40011800 	.word	0x40011800
 800164c:	40011c00 	.word	0x40011c00
 8001650:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_GPIO_Init+0x324>)
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	43db      	mvns	r3, r3
 800165c:	4909      	ldr	r1, [pc, #36]	; (8001684 <HAL_GPIO_Init+0x324>)
 800165e:	4013      	ands	r3, r2
 8001660:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3301      	adds	r3, #1
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f47f ae7e 	bne.w	8001374 <HAL_GPIO_Init+0x14>
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	372c      	adds	r7, #44	; 0x2c
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	041a      	lsls	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	611a      	str	r2, [r3, #16]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e26c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8087 	beq.w	80017e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d00c      	beq.n	80016fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e4:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d112      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
 80016f0:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d10b      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	4b89      	ldr	r3, [pc, #548]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d06c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x12c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d168      	bne.n	80017e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e246      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x76>
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x98>
 8001736:	4b7b      	ldr	r3, [pc, #492]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7a      	ldr	r2, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a77      	ldr	r2, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0xbc>
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a71      	ldr	r2, [pc, #452]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001774:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a6a      	ldr	r2, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb66 	bl	8000e64 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fb62 	bl	8000e64 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1fa      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xe4>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb52 	bl	8000e64 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb4e 	bl	8000e64 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1e6      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x10c>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b08      	cmp	r3, #8
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1ba      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4939      	ldr	r1, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb07 	bl	8000e64 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fb03 	bl	8000e64 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e19b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fae6 	bl	8000e64 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fae2 	bl	8000e64 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e17a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d03a      	beq.n	800193c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d019      	beq.n	8001902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCC_OscConfig+0x274>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fac6 	bl	8000e64 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fac2 	bl	8000e64 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e15a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 fad8 	bl	8001eb0 <RCC_Delay>
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x274>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff faac 	bl	8000e64 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190e:	e00f      	b.n	8001930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff faa8 	bl	8000e64 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d908      	bls.n	8001930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e140      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	42420000 	.word	0x42420000
 800192c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b9e      	ldr	r3, [pc, #632]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e9      	bne.n	8001910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a6 	beq.w	8001a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b97      	ldr	r3, [pc, #604]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b94      	ldr	r3, [pc, #592]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a93      	ldr	r2, [pc, #588]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b91      	ldr	r3, [pc, #580]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b8e      	ldr	r3, [pc, #568]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a8a      	ldr	r2, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff fa69 	bl	8000e64 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff fa65 	bl	8000e64 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0fd      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x312>
 80019bc:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x334>
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a75      	ldr	r2, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a72      	ldr	r2, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x356>
 80019f4:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a6c      	ldr	r2, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a66      	ldr	r2, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b64      	ldr	r3, [pc, #400]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a63      	ldr	r2, [pc, #396]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fa19 	bl	8000e64 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fa15 	bl	8000e64 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ab      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x37e>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa03 	bl	8000e64 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff f9ff 	bl	8000e64 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e095      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8081 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d061      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d146      	bne.n	8001b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f9d3 	bl	8000e64 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f9cf 	bl	8000e64 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e067      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	492d      	ldr	r1, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a19      	ldr	r1, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	4927      	ldr	r1, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f9a3 	bl	8000e64 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f99f 	bl	8000e64 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e037      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46a>
 8001b40:	e02f      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f98c 	bl	8000e64 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f988 	bl	8000e64 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e020      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x498>
 8001b6e:	e018      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e013      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	42420060 	.word	0x42420060

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7ff f8dc 	bl	8000e64 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff f8d8 	bl	8000e64 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f83a 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	0800466c 	.word	0x0800466c
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b490      	push	{r4, r7}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d94:	1d3c      	adds	r4, r7, #4
 8001d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d9c:	f240 2301 	movw	r3, #513	; 0x201
 8001da0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d002      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dca:	e02d      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dce:	623b      	str	r3, [r7, #32]
      break;
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	0c9b      	lsrs	r3, r3, #18
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dde:	4413      	add	r3, r2
 8001de0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001de4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0c5b      	lsrs	r3, r3, #17
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dfe:	4413      	add	r3, r2
 8001e00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0a:	fb02 f203 	mul.w	r2, r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	e004      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	623b      	str	r3, [r7, #32]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2a:	623b      	str	r3, [r7, #32]
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc90      	pop	{r4, r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	0800465c 	.word	0x0800465c
 8001e40:	40021000 	.word	0x40021000
 8001e44:	007a1200 	.word	0x007a1200
 8001e48:	003d0900 	.word	0x003d0900

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000000 	.word	0x20000000

08001e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e64:	f7ff fff2 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4903      	ldr	r1, [pc, #12]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	0800467c 	.word	0x0800467c

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	0800467c 	.word	0x0800467c

08001eb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <RCC_Delay+0x34>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <RCC_Delay+0x38>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0a5b      	lsrs	r3, r3, #9
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ecc:	bf00      	nop
  }
  while (Delay --);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	60fa      	str	r2, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f9      	bne.n	8001ecc <RCC_Delay+0x1c>
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	10624dd3 	.word	0x10624dd3

08001eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e076      	b.n	8001fec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f0e:	d009      	beq.n	8001f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
 8001f16:	e005      	b.n	8001f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe fd1c 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	ea42 0103 	orr.w	r1, r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	0c1a      	lsrs	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f002 0204 	and.w	r2, r2, #4
 8001fca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_SPI_Transmit+0x22>
 8002012:	2302      	movs	r3, #2
 8002014:	e126      	b.n	8002264 <HAL_SPI_Transmit+0x270>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800201e:	f7fe ff21 	bl	8000e64 <HAL_GetTick>
 8002022:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d002      	beq.n	800203a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002034:	2302      	movs	r3, #2
 8002036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002038:	e10b      	b.n	8002252 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_SPI_Transmit+0x52>
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800204a:	e102      	b.n	8002252 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2203      	movs	r2, #3
 8002050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	88fa      	ldrh	r2, [r7, #6]
 8002064:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	88fa      	ldrh	r2, [r7, #6]
 800206a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002092:	d10f      	bne.n	80020b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d007      	beq.n	80020d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020da:	d14b      	bne.n	8002174 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_SPI_Transmit+0xf6>
 80020e4:	8afb      	ldrh	r3, [r7, #22]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d13e      	bne.n	8002168 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	1c9a      	adds	r2, r3, #2
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800210e:	e02b      	b.n	8002168 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d112      	bne.n	8002144 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	1c9a      	adds	r2, r3, #2
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	86da      	strh	r2, [r3, #54]	; 0x36
 8002142:	e011      	b.n	8002168 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002144:	f7fe fe8e 	bl	8000e64 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d803      	bhi.n	800215c <HAL_SPI_Transmit+0x168>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d102      	bne.n	8002162 <HAL_SPI_Transmit+0x16e>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002166:	e074      	b.n	8002252 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ce      	bne.n	8002110 <HAL_SPI_Transmit+0x11c>
 8002172:	e04c      	b.n	800220e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_SPI_Transmit+0x18e>
 800217c:	8afb      	ldrh	r3, [r7, #22]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d140      	bne.n	8002204 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	330c      	adds	r3, #12
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021a8:	e02c      	b.n	8002204 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d113      	bne.n	80021e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80021de:	e011      	b.n	8002204 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e0:	f7fe fe40 	bl	8000e64 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d803      	bhi.n	80021f8 <HAL_SPI_Transmit+0x204>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d102      	bne.n	80021fe <HAL_SPI_Transmit+0x20a>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002202:	e026      	b.n	8002252 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1cd      	bne.n	80021aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fcbc 	bl	8002b90 <SPI_EndRxTxTransaction>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	77fb      	strb	r3, [r7, #31]
 800224e:	e000      	b.n	8002252 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002250:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002262:	7ffb      	ldrb	r3, [r7, #31]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002288:	d112      	bne.n	80022b0 <HAL_SPI_Receive+0x44>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2204      	movs	r2, #4
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8f1 	bl	800248e <HAL_SPI_TransmitReceive>
 80022ac:	4603      	mov	r3, r0
 80022ae:	e0ea      	b.n	8002486 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_SPI_Receive+0x52>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0e3      	b.n	8002486 <HAL_SPI_Receive+0x21a>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c6:	f7fe fdcd 	bl	8000e64 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d002      	beq.n	80022de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
 80022da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022dc:	e0ca      	b.n	8002474 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_SPI_Receive+0x7e>
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022ee:	e0c1      	b.n	8002474 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2204      	movs	r2, #4
 80022f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	88fa      	ldrh	r2, [r7, #6]
 8002308:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	88fa      	ldrh	r2, [r7, #6]
 800230e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002336:	d10f      	bne.n	8002358 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002346:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002356:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d007      	beq.n	8002376 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d162      	bne.n	8002444 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800237e:	e02e      	b.n	80023de <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d115      	bne.n	80023ba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f103 020c 	add.w	r2, r3, #12
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023b8:	e011      	b.n	80023de <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ba:	f7fe fd53 	bl	8000e64 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d803      	bhi.n	80023d2 <HAL_SPI_Receive+0x166>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d102      	bne.n	80023d8 <HAL_SPI_Receive+0x16c>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023dc:	e04a      	b.n	8002474 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1cb      	bne.n	8002380 <HAL_SPI_Receive+0x114>
 80023e8:	e031      	b.n	800244e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d113      	bne.n	8002420 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	b292      	uxth	r2, r2
 8002404:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	1c9a      	adds	r2, r3, #2
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800241e:	e011      	b.n	8002444 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002420:	f7fe fd20 	bl	8000e64 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d803      	bhi.n	8002438 <HAL_SPI_Receive+0x1cc>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d102      	bne.n	800243e <HAL_SPI_Receive+0x1d2>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002442:	e017      	b.n	8002474 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1cd      	bne.n	80023ea <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fb4a 	bl	8002aec <SPI_EndRxTransaction>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	75fb      	strb	r3, [r7, #23]
 8002470:	e000      	b.n	8002474 <HAL_SPI_Receive+0x208>
  }

error :
 8002472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002484:	7dfb      	ldrb	r3, [r7, #23]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b08c      	sub	sp, #48	; 0x30
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800249c:	2301      	movs	r3, #1
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x26>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e18a      	b.n	80027ca <HAL_SPI_TransmitReceive+0x33c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024bc:	f7fe fcd2 	bl	8000e64 <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d00f      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x70>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e4:	d107      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x68>
 80024ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d003      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024fc:	e15b      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x82>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x82>
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002516:	e14e      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b04      	cmp	r3, #4
 8002522:	d003      	beq.n	800252c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2205      	movs	r2, #5
 8002528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d007      	beq.n	8002580 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002588:	d178      	bne.n	800267c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x10a>
 8002592:	8b7b      	ldrh	r3, [r7, #26]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d166      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025bc:	e053      	b.n	8002666 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d11b      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x176>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_SPI_TransmitReceive+0x176>
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d113      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	1c9a      	adds	r2, r3, #2
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d119      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x1b8>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d014      	beq.n	8002646 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	b292      	uxth	r2, r2
 8002628:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	1c9a      	adds	r2, r3, #2
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002642:	2301      	movs	r3, #1
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002646:	f7fe fc0d 	bl	8000e64 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002652:	429a      	cmp	r2, r3
 8002654:	d807      	bhi.n	8002666 <HAL_SPI_TransmitReceive+0x1d8>
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d003      	beq.n	8002666 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002664:	e0a7      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1a6      	bne.n	80025be <HAL_SPI_TransmitReceive+0x130>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1a1      	bne.n	80025be <HAL_SPI_TransmitReceive+0x130>
 800267a:	e07c      	b.n	8002776 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_TransmitReceive+0x1fc>
 8002684:	8b7b      	ldrh	r3, [r7, #26]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d16b      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b0:	e057      	b.n	8002762 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d11c      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x26c>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d017      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x26c>
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d114      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	330c      	adds	r3, #12
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d119      	bne.n	800273c <HAL_SPI_TransmitReceive+0x2ae>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d014      	beq.n	800273c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002738:	2301      	movs	r3, #1
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800273c:	f7fe fb92 	bl	8000e64 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002748:	429a      	cmp	r2, r3
 800274a:	d803      	bhi.n	8002754 <HAL_SPI_TransmitReceive+0x2c6>
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002752:	d102      	bne.n	800275a <HAL_SPI_TransmitReceive+0x2cc>
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002760:	e029      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1a2      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x224>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d19d      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fa08 	bl	8002b90 <SPI_EndRxTxTransaction>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002792:	e010      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	e000      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3730      	adds	r7, #48	; 0x30
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10f      	bne.n	8002818 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    return;
 8002816:	e0be      	b.n	8002996 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_SPI_IRQHandler+0x66>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	09db      	lsrs	r3, r3, #7
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
    return;
 8002838:	e0ad      	b.n	8002996 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_SPI_IRQHandler+0x80>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80a1 	beq.w	8002996 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 809a 	beq.w	8002996 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d023      	beq.n	80028b6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b03      	cmp	r3, #3
 8002878:	d011      	beq.n	800289e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	e00b      	b.n	80028b6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]
        return;
 80028b4:	e06f      	b.n	8002996 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d014      	beq.n	80028ec <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d04f      	beq.n	8002994 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002902:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_SPI_IRQHandler+0x14c>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d034      	beq.n	800298a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0203 	bic.w	r2, r2, #3
 800292e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d011      	beq.n	800295c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_SPI_IRQHandler+0x1c8>)
 800293e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fc03 	bl	8001150 <HAL_DMA_Abort_IT>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_SPI_IRQHandler+0x1c8>)
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fbed 	bl	8001150 <HAL_DMA_Abort_IT>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002988:	e003      	b.n	8002992 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f808 	bl	80029a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002990:	e000      	b.n	8002994 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002992:	bf00      	nop
    return;
 8002994:	bf00      	nop
  }
}
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	080029b3 	.word	0x080029b3

080029a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff ffe7 	bl	80029a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029ec:	f7fe fa3a 	bl	8000e64 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029fc:	f7fe fa32 	bl	8000e64 <HAL_GetTick>
 8002a00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	015b      	lsls	r3, r3, #5
 8002a08:	0d1b      	lsrs	r3, r3, #20
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a12:	e054      	b.n	8002abe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d050      	beq.n	8002abe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a1c:	f7fe fa22 	bl	8000e64 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d902      	bls.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d13d      	bne.n	8002aae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4a:	d111      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a54:	d004      	beq.n	8002a60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5e:	d107      	bne.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a78:	d10f      	bne.n	8002a9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e017      	b.n	8002ade <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d19b      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000

08002aec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b00:	d111      	bne.n	8002b26 <SPI_EndRxTransaction+0x3a>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0a:	d004      	beq.n	8002b16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b14:	d107      	bne.n	8002b26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d117      	bne.n	8002b60 <SPI_EndRxTransaction+0x74>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d112      	bne.n	8002b60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2101      	movs	r1, #1
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff ff49 	bl	80029dc <SPI_WaitFlagStateUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01a      	beq.n	8002b86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e013      	b.n	8002b88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff ff36 	bl	80029dc <SPI_WaitFlagStateUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e000      	b.n	8002b88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff18 	bl	80029dc <SPI_WaitFlagStateUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e000      	b.n	8002bc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e03f      	b.n	8002c5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe f864 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fc25 	bl	8003460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b08a      	sub	sp, #40	; 0x28
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d17c      	bne.n	8002d80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_UART_Transmit+0x2c>
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e075      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Transmit+0x3e>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e06e      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2221      	movs	r2, #33	; 0x21
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cba:	f7fe f8d3 	bl	8000e64 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Transmit+0x82>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cf8:	e02a      	b.n	8002d50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa11 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e036      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e007      	b.n	8002d42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1cf      	bne.n	8002cfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f9e1 	bl	800312c <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_UART_IRQHandler+0x52>
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa99 	bl	800330e <UART_Receive_IT>
      return;
 8002ddc:	e17b      	b.n	80030d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80b1 	beq.w	8002f48 <HAL_UART_IRQHandler+0x1bc>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_UART_IRQHandler+0x70>
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a6 	beq.w	8002f48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_UART_IRQHandler+0x90>
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_UART_IRQHandler+0xb0>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0202 	orr.w	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_UART_IRQHandler+0xd0>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0204 	orr.w	r2, r3, #4
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00f      	beq.n	8002e86 <HAL_UART_IRQHandler+0xfa>
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <HAL_UART_IRQHandler+0xee>
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0208 	orr.w	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 811e 	beq.w	80030cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_UART_IRQHandler+0x11e>
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa32 	bl	800330e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x146>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d031      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f974 	bl	80031c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d023      	beq.n	8002f2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d013      	beq.n	8002f26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a76      	ldr	r2, [pc, #472]	; (80030dc <HAL_UART_IRQHandler+0x350>)
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe f920 	bl	8001150 <HAL_DMA_Abort_IT>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f20:	4610      	mov	r0, r2
 8002f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	e00e      	b.n	8002f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8ec 	bl	8003104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2c:	e00a      	b.n	8002f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8e8 	bl	8003104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	e006      	b.n	8002f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8e4 	bl	8003104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f42:	e0c3      	b.n	80030cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	bf00      	nop
    return;
 8002f46:	e0c1      	b.n	80030cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 80a1 	bne.w	8003094 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 809b 	beq.w	8003094 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8095 	beq.w	8003094 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d04e      	beq.n	800302c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f98:	8a3b      	ldrh	r3, [r7, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8098 	beq.w	80030d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fa4:	8a3a      	ldrh	r2, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f080 8092 	bcs.w	80030d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8a3a      	ldrh	r2, [r7, #16]
 8002fb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d02b      	beq.n	8003014 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0210 	bic.w	r2, r2, #16
 8003008:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f863 	bl	80010da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800301c:	b29b      	uxth	r3, r3
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f876 	bl	8003116 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800302a:	e051      	b.n	80030d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003034:	b29b      	uxth	r3, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d047      	beq.n	80030d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003044:	8a7b      	ldrh	r3, [r7, #18]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d044      	beq.n	80030d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003058:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0210 	bic.w	r2, r2, #16
 8003086:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003088:	8a7b      	ldrh	r3, [r7, #18]
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f842 	bl	8003116 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003092:	e01f      	b.n	80030d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_UART_IRQHandler+0x324>
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8c9 	bl	8003240 <UART_Transmit_IT>
    return;
 80030ae:	e012      	b.n	80030d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <HAL_UART_IRQHandler+0x34a>
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f90a 	bl	80032de <UART_EndTransmit_IT>
    return;
 80030ca:	e004      	b.n	80030d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030d4:	bf00      	nop
  }
}
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	08003219 	.word	0x08003219

080030e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	e02c      	b.n	8003198 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d028      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0x30>
 800314c:	f7fd fe8a 	bl	8000e64 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	429a      	cmp	r2, r3
 800315a:	d21d      	bcs.n	8003198 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800316a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e00f      	b.n	80031b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d0c3      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d107      	bne.n	8003200 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0210 	bic.w	r2, r2, #16
 80031fe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ff66 	bl	8003104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b21      	cmp	r3, #33	; 0x21
 8003252:	d13e      	bne.n	80032d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d114      	bne.n	8003288 <UART_Transmit_IT+0x48>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d110      	bne.n	8003288 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800327a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	621a      	str	r2, [r3, #32]
 8003286:	e008      	b.n	800329a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	1c59      	adds	r1, r3, #1
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6211      	str	r1, [r2, #32]
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4619      	mov	r1, r3
 80032a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff feee 	bl	80030e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b22      	cmp	r3, #34	; 0x22
 8003320:	f040 8099 	bne.w	8003456 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d117      	bne.n	800335e <UART_Receive_IT+0x50>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d113      	bne.n	800335e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334c:	b29a      	uxth	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
 800335c:	e026      	b.n	80033ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003370:	d007      	beq.n	8003382 <UART_Receive_IT+0x74>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <UART_Receive_IT+0x82>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e008      	b.n	80033a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800339c:	b2da      	uxtb	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4619      	mov	r1, r3
 80033ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d148      	bne.n	8003452 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0220 	bic.w	r2, r2, #32
 80033ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d123      	bne.n	8003448 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0210 	bic.w	r2, r2, #16
 8003414:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d10a      	bne.n	800343a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff fe68 	bl	8003116 <HAL_UARTEx_RxEventCallback>
 8003446:	e002      	b.n	800344e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fe52 	bl	80030f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e002      	b.n	8003458 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800349a:	f023 030c 	bic.w	r3, r3, #12
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2c      	ldr	r2, [pc, #176]	; (8003574 <UART_SetConfig+0x114>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d103      	bne.n	80034d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7fe fcde 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	e002      	b.n	80034d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7fe fcc6 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009a      	lsls	r2, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <UART_SetConfig+0x118>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	0119      	lsls	r1, r3, #4
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009a      	lsls	r2, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	fbb2 f2f3 	udiv	r2, r2, r3
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <UART_SetConfig+0x118>)
 800350e:	fba3 0302 	umull	r0, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2064      	movs	r0, #100	; 0x64
 8003516:	fb00 f303 	mul.w	r3, r0, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	3332      	adds	r3, #50	; 0x32
 8003520:	4a15      	ldr	r2, [pc, #84]	; (8003578 <UART_SetConfig+0x118>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352c:	4419      	add	r1, r3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009a      	lsls	r2, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <UART_SetConfig+0x118>)
 8003546:	fba3 0302 	umull	r0, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2064      	movs	r0, #100	; 0x64
 800354e:	fb00 f303 	mul.w	r3, r0, r3
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	3332      	adds	r3, #50	; 0x32
 8003558:	4a07      	ldr	r2, [pc, #28]	; (8003578 <UART_SetConfig+0x118>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	440a      	add	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40013800 	.word	0x40013800
 8003578:	51eb851f 	.word	0x51eb851f

0800357c <__errno>:
 800357c:	4b01      	ldr	r3, [pc, #4]	; (8003584 <__errno+0x8>)
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	2000000c 	.word	0x2000000c

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	2600      	movs	r6, #0
 800358c:	4d0c      	ldr	r5, [pc, #48]	; (80035c0 <__libc_init_array+0x38>)
 800358e:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	42a6      	cmp	r6, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	f000 fff8 	bl	800458c <_init>
 800359c:	2600      	movs	r6, #0
 800359e:	4d0a      	ldr	r5, [pc, #40]	; (80035c8 <__libc_init_array+0x40>)
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <__libc_init_array+0x44>)
 80035a2:	1b64      	subs	r4, r4, r5
 80035a4:	10a4      	asrs	r4, r4, #2
 80035a6:	42a6      	cmp	r6, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b0:	4798      	blx	r3
 80035b2:	3601      	adds	r6, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ba:	4798      	blx	r3
 80035bc:	3601      	adds	r6, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	0800471c 	.word	0x0800471c
 80035c4:	0800471c 	.word	0x0800471c
 80035c8:	0800471c 	.word	0x0800471c
 80035cc:	08004720 	.word	0x08004720

080035d0 <memset>:
 80035d0:	4603      	mov	r3, r0
 80035d2:	4402      	add	r2, r0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d100      	bne.n	80035da <memset+0xa>
 80035d8:	4770      	bx	lr
 80035da:	f803 1b01 	strb.w	r1, [r3], #1
 80035de:	e7f9      	b.n	80035d4 <memset+0x4>

080035e0 <iprintf>:
 80035e0:	b40f      	push	{r0, r1, r2, r3}
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <iprintf+0x2c>)
 80035e4:	b513      	push	{r0, r1, r4, lr}
 80035e6:	681c      	ldr	r4, [r3, #0]
 80035e8:	b124      	cbz	r4, 80035f4 <iprintf+0x14>
 80035ea:	69a3      	ldr	r3, [r4, #24]
 80035ec:	b913      	cbnz	r3, 80035f4 <iprintf+0x14>
 80035ee:	4620      	mov	r0, r4
 80035f0:	f000 fa5e 	bl	8003ab0 <__sinit>
 80035f4:	ab05      	add	r3, sp, #20
 80035f6:	4620      	mov	r0, r4
 80035f8:	9a04      	ldr	r2, [sp, #16]
 80035fa:	68a1      	ldr	r1, [r4, #8]
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	f000 fc29 	bl	8003e54 <_vfiprintf_r>
 8003602:	b002      	add	sp, #8
 8003604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003608:	b004      	add	sp, #16
 800360a:	4770      	bx	lr
 800360c:	2000000c 	.word	0x2000000c

08003610 <_puts_r>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	460e      	mov	r6, r1
 8003614:	4605      	mov	r5, r0
 8003616:	b118      	cbz	r0, 8003620 <_puts_r+0x10>
 8003618:	6983      	ldr	r3, [r0, #24]
 800361a:	b90b      	cbnz	r3, 8003620 <_puts_r+0x10>
 800361c:	f000 fa48 	bl	8003ab0 <__sinit>
 8003620:	69ab      	ldr	r3, [r5, #24]
 8003622:	68ac      	ldr	r4, [r5, #8]
 8003624:	b913      	cbnz	r3, 800362c <_puts_r+0x1c>
 8003626:	4628      	mov	r0, r5
 8003628:	f000 fa42 	bl	8003ab0 <__sinit>
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <_puts_r+0xd0>)
 800362e:	429c      	cmp	r4, r3
 8003630:	d120      	bne.n	8003674 <_puts_r+0x64>
 8003632:	686c      	ldr	r4, [r5, #4]
 8003634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003636:	07db      	lsls	r3, r3, #31
 8003638:	d405      	bmi.n	8003646 <_puts_r+0x36>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	0598      	lsls	r0, r3, #22
 800363e:	d402      	bmi.n	8003646 <_puts_r+0x36>
 8003640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003642:	f000 fad3 	bl	8003bec <__retarget_lock_acquire_recursive>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	0719      	lsls	r1, r3, #28
 800364a:	d51d      	bpl.n	8003688 <_puts_r+0x78>
 800364c:	6923      	ldr	r3, [r4, #16]
 800364e:	b1db      	cbz	r3, 8003688 <_puts_r+0x78>
 8003650:	3e01      	subs	r6, #1
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003658:	3b01      	subs	r3, #1
 800365a:	60a3      	str	r3, [r4, #8]
 800365c:	bb39      	cbnz	r1, 80036ae <_puts_r+0x9e>
 800365e:	2b00      	cmp	r3, #0
 8003660:	da38      	bge.n	80036d4 <_puts_r+0xc4>
 8003662:	4622      	mov	r2, r4
 8003664:	210a      	movs	r1, #10
 8003666:	4628      	mov	r0, r5
 8003668:	f000 f848 	bl	80036fc <__swbuf_r>
 800366c:	3001      	adds	r0, #1
 800366e:	d011      	beq.n	8003694 <_puts_r+0x84>
 8003670:	250a      	movs	r5, #10
 8003672:	e011      	b.n	8003698 <_puts_r+0x88>
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <_puts_r+0xd4>)
 8003676:	429c      	cmp	r4, r3
 8003678:	d101      	bne.n	800367e <_puts_r+0x6e>
 800367a:	68ac      	ldr	r4, [r5, #8]
 800367c:	e7da      	b.n	8003634 <_puts_r+0x24>
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <_puts_r+0xd8>)
 8003680:	429c      	cmp	r4, r3
 8003682:	bf08      	it	eq
 8003684:	68ec      	ldreq	r4, [r5, #12]
 8003686:	e7d5      	b.n	8003634 <_puts_r+0x24>
 8003688:	4621      	mov	r1, r4
 800368a:	4628      	mov	r0, r5
 800368c:	f000 f888 	bl	80037a0 <__swsetup_r>
 8003690:	2800      	cmp	r0, #0
 8003692:	d0dd      	beq.n	8003650 <_puts_r+0x40>
 8003694:	f04f 35ff 	mov.w	r5, #4294967295
 8003698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800369a:	07da      	lsls	r2, r3, #31
 800369c:	d405      	bmi.n	80036aa <_puts_r+0x9a>
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	059b      	lsls	r3, r3, #22
 80036a2:	d402      	bmi.n	80036aa <_puts_r+0x9a>
 80036a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a6:	f000 faa2 	bl	8003bee <__retarget_lock_release_recursive>
 80036aa:	4628      	mov	r0, r5
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da04      	bge.n	80036bc <_puts_r+0xac>
 80036b2:	69a2      	ldr	r2, [r4, #24]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dc06      	bgt.n	80036c6 <_puts_r+0xb6>
 80036b8:	290a      	cmp	r1, #10
 80036ba:	d004      	beq.n	80036c6 <_puts_r+0xb6>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	6022      	str	r2, [r4, #0]
 80036c2:	7019      	strb	r1, [r3, #0]
 80036c4:	e7c5      	b.n	8003652 <_puts_r+0x42>
 80036c6:	4622      	mov	r2, r4
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 f817 	bl	80036fc <__swbuf_r>
 80036ce:	3001      	adds	r0, #1
 80036d0:	d1bf      	bne.n	8003652 <_puts_r+0x42>
 80036d2:	e7df      	b.n	8003694 <_puts_r+0x84>
 80036d4:	250a      	movs	r5, #10
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	6022      	str	r2, [r4, #0]
 80036dc:	701d      	strb	r5, [r3, #0]
 80036de:	e7db      	b.n	8003698 <_puts_r+0x88>
 80036e0:	080046a8 	.word	0x080046a8
 80036e4:	080046c8 	.word	0x080046c8
 80036e8:	08004688 	.word	0x08004688

080036ec <puts>:
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <puts+0xc>)
 80036ee:	4601      	mov	r1, r0
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	f7ff bf8d 	b.w	8003610 <_puts_r>
 80036f6:	bf00      	nop
 80036f8:	2000000c 	.word	0x2000000c

080036fc <__swbuf_r>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	460e      	mov	r6, r1
 8003700:	4614      	mov	r4, r2
 8003702:	4605      	mov	r5, r0
 8003704:	b118      	cbz	r0, 800370e <__swbuf_r+0x12>
 8003706:	6983      	ldr	r3, [r0, #24]
 8003708:	b90b      	cbnz	r3, 800370e <__swbuf_r+0x12>
 800370a:	f000 f9d1 	bl	8003ab0 <__sinit>
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <__swbuf_r+0x98>)
 8003710:	429c      	cmp	r4, r3
 8003712:	d12b      	bne.n	800376c <__swbuf_r+0x70>
 8003714:	686c      	ldr	r4, [r5, #4]
 8003716:	69a3      	ldr	r3, [r4, #24]
 8003718:	60a3      	str	r3, [r4, #8]
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	071a      	lsls	r2, r3, #28
 800371e:	d52f      	bpl.n	8003780 <__swbuf_r+0x84>
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	b36b      	cbz	r3, 8003780 <__swbuf_r+0x84>
 8003724:	6923      	ldr	r3, [r4, #16]
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	b2f6      	uxtb	r6, r6
 800372a:	1ac0      	subs	r0, r0, r3
 800372c:	6963      	ldr	r3, [r4, #20]
 800372e:	4637      	mov	r7, r6
 8003730:	4283      	cmp	r3, r0
 8003732:	dc04      	bgt.n	800373e <__swbuf_r+0x42>
 8003734:	4621      	mov	r1, r4
 8003736:	4628      	mov	r0, r5
 8003738:	f000 f926 	bl	8003988 <_fflush_r>
 800373c:	bb30      	cbnz	r0, 800378c <__swbuf_r+0x90>
 800373e:	68a3      	ldr	r3, [r4, #8]
 8003740:	3001      	adds	r0, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	60a3      	str	r3, [r4, #8]
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	6022      	str	r2, [r4, #0]
 800374c:	701e      	strb	r6, [r3, #0]
 800374e:	6963      	ldr	r3, [r4, #20]
 8003750:	4283      	cmp	r3, r0
 8003752:	d004      	beq.n	800375e <__swbuf_r+0x62>
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	07db      	lsls	r3, r3, #31
 8003758:	d506      	bpl.n	8003768 <__swbuf_r+0x6c>
 800375a:	2e0a      	cmp	r6, #10
 800375c:	d104      	bne.n	8003768 <__swbuf_r+0x6c>
 800375e:	4621      	mov	r1, r4
 8003760:	4628      	mov	r0, r5
 8003762:	f000 f911 	bl	8003988 <_fflush_r>
 8003766:	b988      	cbnz	r0, 800378c <__swbuf_r+0x90>
 8003768:	4638      	mov	r0, r7
 800376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <__swbuf_r+0x9c>)
 800376e:	429c      	cmp	r4, r3
 8003770:	d101      	bne.n	8003776 <__swbuf_r+0x7a>
 8003772:	68ac      	ldr	r4, [r5, #8]
 8003774:	e7cf      	b.n	8003716 <__swbuf_r+0x1a>
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <__swbuf_r+0xa0>)
 8003778:	429c      	cmp	r4, r3
 800377a:	bf08      	it	eq
 800377c:	68ec      	ldreq	r4, [r5, #12]
 800377e:	e7ca      	b.n	8003716 <__swbuf_r+0x1a>
 8003780:	4621      	mov	r1, r4
 8003782:	4628      	mov	r0, r5
 8003784:	f000 f80c 	bl	80037a0 <__swsetup_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	d0cb      	beq.n	8003724 <__swbuf_r+0x28>
 800378c:	f04f 37ff 	mov.w	r7, #4294967295
 8003790:	e7ea      	b.n	8003768 <__swbuf_r+0x6c>
 8003792:	bf00      	nop
 8003794:	080046a8 	.word	0x080046a8
 8003798:	080046c8 	.word	0x080046c8
 800379c:	08004688 	.word	0x08004688

080037a0 <__swsetup_r>:
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <__swsetup_r+0xcc>)
 80037a2:	b570      	push	{r4, r5, r6, lr}
 80037a4:	681d      	ldr	r5, [r3, #0]
 80037a6:	4606      	mov	r6, r0
 80037a8:	460c      	mov	r4, r1
 80037aa:	b125      	cbz	r5, 80037b6 <__swsetup_r+0x16>
 80037ac:	69ab      	ldr	r3, [r5, #24]
 80037ae:	b913      	cbnz	r3, 80037b6 <__swsetup_r+0x16>
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 f97d 	bl	8003ab0 <__sinit>
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <__swsetup_r+0xd0>)
 80037b8:	429c      	cmp	r4, r3
 80037ba:	d10f      	bne.n	80037dc <__swsetup_r+0x3c>
 80037bc:	686c      	ldr	r4, [r5, #4]
 80037be:	89a3      	ldrh	r3, [r4, #12]
 80037c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037c4:	0719      	lsls	r1, r3, #28
 80037c6:	d42c      	bmi.n	8003822 <__swsetup_r+0x82>
 80037c8:	06dd      	lsls	r5, r3, #27
 80037ca:	d411      	bmi.n	80037f0 <__swsetup_r+0x50>
 80037cc:	2309      	movs	r3, #9
 80037ce:	6033      	str	r3, [r6, #0]
 80037d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	81a3      	strh	r3, [r4, #12]
 80037da:	e03e      	b.n	800385a <__swsetup_r+0xba>
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <__swsetup_r+0xd4>)
 80037de:	429c      	cmp	r4, r3
 80037e0:	d101      	bne.n	80037e6 <__swsetup_r+0x46>
 80037e2:	68ac      	ldr	r4, [r5, #8]
 80037e4:	e7eb      	b.n	80037be <__swsetup_r+0x1e>
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <__swsetup_r+0xd8>)
 80037e8:	429c      	cmp	r4, r3
 80037ea:	bf08      	it	eq
 80037ec:	68ec      	ldreq	r4, [r5, #12]
 80037ee:	e7e6      	b.n	80037be <__swsetup_r+0x1e>
 80037f0:	0758      	lsls	r0, r3, #29
 80037f2:	d512      	bpl.n	800381a <__swsetup_r+0x7a>
 80037f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037f6:	b141      	cbz	r1, 800380a <__swsetup_r+0x6a>
 80037f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037fc:	4299      	cmp	r1, r3
 80037fe:	d002      	beq.n	8003806 <__swsetup_r+0x66>
 8003800:	4630      	mov	r0, r6
 8003802:	f000 fa59 	bl	8003cb8 <_free_r>
 8003806:	2300      	movs	r3, #0
 8003808:	6363      	str	r3, [r4, #52]	; 0x34
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	2300      	movs	r3, #0
 8003814:	6063      	str	r3, [r4, #4]
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	6923      	ldr	r3, [r4, #16]
 8003824:	b94b      	cbnz	r3, 800383a <__swsetup_r+0x9a>
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d003      	beq.n	800383a <__swsetup_r+0x9a>
 8003832:	4621      	mov	r1, r4
 8003834:	4630      	mov	r0, r6
 8003836:	f000 f9ff 	bl	8003c38 <__smakebuf_r>
 800383a:	89a0      	ldrh	r0, [r4, #12]
 800383c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003840:	f010 0301 	ands.w	r3, r0, #1
 8003844:	d00a      	beq.n	800385c <__swsetup_r+0xbc>
 8003846:	2300      	movs	r3, #0
 8003848:	60a3      	str	r3, [r4, #8]
 800384a:	6963      	ldr	r3, [r4, #20]
 800384c:	425b      	negs	r3, r3
 800384e:	61a3      	str	r3, [r4, #24]
 8003850:	6923      	ldr	r3, [r4, #16]
 8003852:	b943      	cbnz	r3, 8003866 <__swsetup_r+0xc6>
 8003854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003858:	d1ba      	bne.n	80037d0 <__swsetup_r+0x30>
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	0781      	lsls	r1, r0, #30
 800385e:	bf58      	it	pl
 8003860:	6963      	ldrpl	r3, [r4, #20]
 8003862:	60a3      	str	r3, [r4, #8]
 8003864:	e7f4      	b.n	8003850 <__swsetup_r+0xb0>
 8003866:	2000      	movs	r0, #0
 8003868:	e7f7      	b.n	800385a <__swsetup_r+0xba>
 800386a:	bf00      	nop
 800386c:	2000000c 	.word	0x2000000c
 8003870:	080046a8 	.word	0x080046a8
 8003874:	080046c8 	.word	0x080046c8
 8003878:	08004688 	.word	0x08004688

0800387c <__sflush_r>:
 800387c:	898a      	ldrh	r2, [r1, #12]
 800387e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003882:	4605      	mov	r5, r0
 8003884:	0710      	lsls	r0, r2, #28
 8003886:	460c      	mov	r4, r1
 8003888:	d458      	bmi.n	800393c <__sflush_r+0xc0>
 800388a:	684b      	ldr	r3, [r1, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	dc05      	bgt.n	800389c <__sflush_r+0x20>
 8003890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	dc02      	bgt.n	800389c <__sflush_r+0x20>
 8003896:	2000      	movs	r0, #0
 8003898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800389c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800389e:	2e00      	cmp	r6, #0
 80038a0:	d0f9      	beq.n	8003896 <__sflush_r+0x1a>
 80038a2:	2300      	movs	r3, #0
 80038a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038a8:	682f      	ldr	r7, [r5, #0]
 80038aa:	602b      	str	r3, [r5, #0]
 80038ac:	d032      	beq.n	8003914 <__sflush_r+0x98>
 80038ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	075a      	lsls	r2, r3, #29
 80038b4:	d505      	bpl.n	80038c2 <__sflush_r+0x46>
 80038b6:	6863      	ldr	r3, [r4, #4]
 80038b8:	1ac0      	subs	r0, r0, r3
 80038ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038bc:	b10b      	cbz	r3, 80038c2 <__sflush_r+0x46>
 80038be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038c0:	1ac0      	subs	r0, r0, r3
 80038c2:	2300      	movs	r3, #0
 80038c4:	4602      	mov	r2, r0
 80038c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038c8:	4628      	mov	r0, r5
 80038ca:	6a21      	ldr	r1, [r4, #32]
 80038cc:	47b0      	blx	r6
 80038ce:	1c43      	adds	r3, r0, #1
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	d106      	bne.n	80038e2 <__sflush_r+0x66>
 80038d4:	6829      	ldr	r1, [r5, #0]
 80038d6:	291d      	cmp	r1, #29
 80038d8:	d82c      	bhi.n	8003934 <__sflush_r+0xb8>
 80038da:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <__sflush_r+0x108>)
 80038dc:	40ca      	lsrs	r2, r1
 80038de:	07d6      	lsls	r6, r2, #31
 80038e0:	d528      	bpl.n	8003934 <__sflush_r+0xb8>
 80038e2:	2200      	movs	r2, #0
 80038e4:	6062      	str	r2, [r4, #4]
 80038e6:	6922      	ldr	r2, [r4, #16]
 80038e8:	04d9      	lsls	r1, r3, #19
 80038ea:	6022      	str	r2, [r4, #0]
 80038ec:	d504      	bpl.n	80038f8 <__sflush_r+0x7c>
 80038ee:	1c42      	adds	r2, r0, #1
 80038f0:	d101      	bne.n	80038f6 <__sflush_r+0x7a>
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	b903      	cbnz	r3, 80038f8 <__sflush_r+0x7c>
 80038f6:	6560      	str	r0, [r4, #84]	; 0x54
 80038f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038fa:	602f      	str	r7, [r5, #0]
 80038fc:	2900      	cmp	r1, #0
 80038fe:	d0ca      	beq.n	8003896 <__sflush_r+0x1a>
 8003900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003904:	4299      	cmp	r1, r3
 8003906:	d002      	beq.n	800390e <__sflush_r+0x92>
 8003908:	4628      	mov	r0, r5
 800390a:	f000 f9d5 	bl	8003cb8 <_free_r>
 800390e:	2000      	movs	r0, #0
 8003910:	6360      	str	r0, [r4, #52]	; 0x34
 8003912:	e7c1      	b.n	8003898 <__sflush_r+0x1c>
 8003914:	6a21      	ldr	r1, [r4, #32]
 8003916:	2301      	movs	r3, #1
 8003918:	4628      	mov	r0, r5
 800391a:	47b0      	blx	r6
 800391c:	1c41      	adds	r1, r0, #1
 800391e:	d1c7      	bne.n	80038b0 <__sflush_r+0x34>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0c4      	beq.n	80038b0 <__sflush_r+0x34>
 8003926:	2b1d      	cmp	r3, #29
 8003928:	d001      	beq.n	800392e <__sflush_r+0xb2>
 800392a:	2b16      	cmp	r3, #22
 800392c:	d101      	bne.n	8003932 <__sflush_r+0xb6>
 800392e:	602f      	str	r7, [r5, #0]
 8003930:	e7b1      	b.n	8003896 <__sflush_r+0x1a>
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	e7ad      	b.n	8003898 <__sflush_r+0x1c>
 800393c:	690f      	ldr	r7, [r1, #16]
 800393e:	2f00      	cmp	r7, #0
 8003940:	d0a9      	beq.n	8003896 <__sflush_r+0x1a>
 8003942:	0793      	lsls	r3, r2, #30
 8003944:	bf18      	it	ne
 8003946:	2300      	movne	r3, #0
 8003948:	680e      	ldr	r6, [r1, #0]
 800394a:	bf08      	it	eq
 800394c:	694b      	ldreq	r3, [r1, #20]
 800394e:	eba6 0807 	sub.w	r8, r6, r7
 8003952:	600f      	str	r7, [r1, #0]
 8003954:	608b      	str	r3, [r1, #8]
 8003956:	f1b8 0f00 	cmp.w	r8, #0
 800395a:	dd9c      	ble.n	8003896 <__sflush_r+0x1a>
 800395c:	4643      	mov	r3, r8
 800395e:	463a      	mov	r2, r7
 8003960:	4628      	mov	r0, r5
 8003962:	6a21      	ldr	r1, [r4, #32]
 8003964:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003966:	47b0      	blx	r6
 8003968:	2800      	cmp	r0, #0
 800396a:	dc06      	bgt.n	800397a <__sflush_r+0xfe>
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	e78e      	b.n	8003898 <__sflush_r+0x1c>
 800397a:	4407      	add	r7, r0
 800397c:	eba8 0800 	sub.w	r8, r8, r0
 8003980:	e7e9      	b.n	8003956 <__sflush_r+0xda>
 8003982:	bf00      	nop
 8003984:	20400001 	.word	0x20400001

08003988 <_fflush_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	690b      	ldr	r3, [r1, #16]
 800398c:	4605      	mov	r5, r0
 800398e:	460c      	mov	r4, r1
 8003990:	b913      	cbnz	r3, 8003998 <_fflush_r+0x10>
 8003992:	2500      	movs	r5, #0
 8003994:	4628      	mov	r0, r5
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	b118      	cbz	r0, 80039a2 <_fflush_r+0x1a>
 800399a:	6983      	ldr	r3, [r0, #24]
 800399c:	b90b      	cbnz	r3, 80039a2 <_fflush_r+0x1a>
 800399e:	f000 f887 	bl	8003ab0 <__sinit>
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <_fflush_r+0x6c>)
 80039a4:	429c      	cmp	r4, r3
 80039a6:	d11b      	bne.n	80039e0 <_fflush_r+0x58>
 80039a8:	686c      	ldr	r4, [r5, #4]
 80039aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0ef      	beq.n	8003992 <_fflush_r+0xa>
 80039b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039b4:	07d0      	lsls	r0, r2, #31
 80039b6:	d404      	bmi.n	80039c2 <_fflush_r+0x3a>
 80039b8:	0599      	lsls	r1, r3, #22
 80039ba:	d402      	bmi.n	80039c2 <_fflush_r+0x3a>
 80039bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039be:	f000 f915 	bl	8003bec <__retarget_lock_acquire_recursive>
 80039c2:	4628      	mov	r0, r5
 80039c4:	4621      	mov	r1, r4
 80039c6:	f7ff ff59 	bl	800387c <__sflush_r>
 80039ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039cc:	4605      	mov	r5, r0
 80039ce:	07da      	lsls	r2, r3, #31
 80039d0:	d4e0      	bmi.n	8003994 <_fflush_r+0xc>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	059b      	lsls	r3, r3, #22
 80039d6:	d4dd      	bmi.n	8003994 <_fflush_r+0xc>
 80039d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039da:	f000 f908 	bl	8003bee <__retarget_lock_release_recursive>
 80039de:	e7d9      	b.n	8003994 <_fflush_r+0xc>
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <_fflush_r+0x70>)
 80039e2:	429c      	cmp	r4, r3
 80039e4:	d101      	bne.n	80039ea <_fflush_r+0x62>
 80039e6:	68ac      	ldr	r4, [r5, #8]
 80039e8:	e7df      	b.n	80039aa <_fflush_r+0x22>
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <_fflush_r+0x74>)
 80039ec:	429c      	cmp	r4, r3
 80039ee:	bf08      	it	eq
 80039f0:	68ec      	ldreq	r4, [r5, #12]
 80039f2:	e7da      	b.n	80039aa <_fflush_r+0x22>
 80039f4:	080046a8 	.word	0x080046a8
 80039f8:	080046c8 	.word	0x080046c8
 80039fc:	08004688 	.word	0x08004688

08003a00 <std>:
 8003a00:	2300      	movs	r3, #0
 8003a02:	b510      	push	{r4, lr}
 8003a04:	4604      	mov	r4, r0
 8003a06:	e9c0 3300 	strd	r3, r3, [r0]
 8003a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a0e:	6083      	str	r3, [r0, #8]
 8003a10:	8181      	strh	r1, [r0, #12]
 8003a12:	6643      	str	r3, [r0, #100]	; 0x64
 8003a14:	81c2      	strh	r2, [r0, #14]
 8003a16:	6183      	str	r3, [r0, #24]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	305c      	adds	r0, #92	; 0x5c
 8003a1e:	f7ff fdd7 	bl	80035d0 <memset>
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <std+0x38>)
 8003a24:	6224      	str	r4, [r4, #32]
 8003a26:	6263      	str	r3, [r4, #36]	; 0x24
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <std+0x3c>)
 8003a2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <std+0x40>)
 8003a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <std+0x44>)
 8003a32:	6323      	str	r3, [r4, #48]	; 0x30
 8003a34:	bd10      	pop	{r4, pc}
 8003a36:	bf00      	nop
 8003a38:	08004401 	.word	0x08004401
 8003a3c:	08004423 	.word	0x08004423
 8003a40:	0800445b 	.word	0x0800445b
 8003a44:	0800447f 	.word	0x0800447f

08003a48 <_cleanup_r>:
 8003a48:	4901      	ldr	r1, [pc, #4]	; (8003a50 <_cleanup_r+0x8>)
 8003a4a:	f000 b8af 	b.w	8003bac <_fwalk_reent>
 8003a4e:	bf00      	nop
 8003a50:	08003989 	.word	0x08003989

08003a54 <__sfmoreglue>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	2568      	movs	r5, #104	; 0x68
 8003a58:	1e4a      	subs	r2, r1, #1
 8003a5a:	4355      	muls	r5, r2
 8003a5c:	460e      	mov	r6, r1
 8003a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a62:	f000 f975 	bl	8003d50 <_malloc_r>
 8003a66:	4604      	mov	r4, r0
 8003a68:	b140      	cbz	r0, 8003a7c <__sfmoreglue+0x28>
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8003a70:	300c      	adds	r0, #12
 8003a72:	60a0      	str	r0, [r4, #8]
 8003a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a78:	f7ff fdaa 	bl	80035d0 <memset>
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}

08003a80 <__sfp_lock_acquire>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__sfp_lock_acquire+0x8>)
 8003a82:	f000 b8b3 	b.w	8003bec <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	20000144 	.word	0x20000144

08003a8c <__sfp_lock_release>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__sfp_lock_release+0x8>)
 8003a8e:	f000 b8ae 	b.w	8003bee <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	20000144 	.word	0x20000144

08003a98 <__sinit_lock_acquire>:
 8003a98:	4801      	ldr	r0, [pc, #4]	; (8003aa0 <__sinit_lock_acquire+0x8>)
 8003a9a:	f000 b8a7 	b.w	8003bec <__retarget_lock_acquire_recursive>
 8003a9e:	bf00      	nop
 8003aa0:	2000013f 	.word	0x2000013f

08003aa4 <__sinit_lock_release>:
 8003aa4:	4801      	ldr	r0, [pc, #4]	; (8003aac <__sinit_lock_release+0x8>)
 8003aa6:	f000 b8a2 	b.w	8003bee <__retarget_lock_release_recursive>
 8003aaa:	bf00      	nop
 8003aac:	2000013f 	.word	0x2000013f

08003ab0 <__sinit>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	f7ff fff0 	bl	8003a98 <__sinit_lock_acquire>
 8003ab8:	69a3      	ldr	r3, [r4, #24]
 8003aba:	b11b      	cbz	r3, 8003ac4 <__sinit+0x14>
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac0:	f7ff bff0 	b.w	8003aa4 <__sinit_lock_release>
 8003ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <__sinit+0x68>)
 8003acc:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <__sinit+0x6c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ad2:	42a3      	cmp	r3, r4
 8003ad4:	bf08      	it	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	4620      	mov	r0, r4
 8003ada:	bf08      	it	eq
 8003adc:	61a3      	streq	r3, [r4, #24]
 8003ade:	f000 f81f 	bl	8003b20 <__sfp>
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 f81b 	bl	8003b20 <__sfp>
 8003aea:	60a0      	str	r0, [r4, #8]
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 f817 	bl	8003b20 <__sfp>
 8003af2:	2200      	movs	r2, #0
 8003af4:	2104      	movs	r1, #4
 8003af6:	60e0      	str	r0, [r4, #12]
 8003af8:	6860      	ldr	r0, [r4, #4]
 8003afa:	f7ff ff81 	bl	8003a00 <std>
 8003afe:	2201      	movs	r2, #1
 8003b00:	2109      	movs	r1, #9
 8003b02:	68a0      	ldr	r0, [r4, #8]
 8003b04:	f7ff ff7c 	bl	8003a00 <std>
 8003b08:	2202      	movs	r2, #2
 8003b0a:	2112      	movs	r1, #18
 8003b0c:	68e0      	ldr	r0, [r4, #12]
 8003b0e:	f7ff ff77 	bl	8003a00 <std>
 8003b12:	2301      	movs	r3, #1
 8003b14:	61a3      	str	r3, [r4, #24]
 8003b16:	e7d1      	b.n	8003abc <__sinit+0xc>
 8003b18:	08004684 	.word	0x08004684
 8003b1c:	08003a49 	.word	0x08003a49

08003b20 <__sfp>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	4607      	mov	r7, r0
 8003b24:	f7ff ffac 	bl	8003a80 <__sfp_lock_acquire>
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <__sfp+0x84>)
 8003b2a:	681e      	ldr	r6, [r3, #0]
 8003b2c:	69b3      	ldr	r3, [r6, #24]
 8003b2e:	b913      	cbnz	r3, 8003b36 <__sfp+0x16>
 8003b30:	4630      	mov	r0, r6
 8003b32:	f7ff ffbd 	bl	8003ab0 <__sinit>
 8003b36:	3648      	adds	r6, #72	; 0x48
 8003b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	d503      	bpl.n	8003b48 <__sfp+0x28>
 8003b40:	6833      	ldr	r3, [r6, #0]
 8003b42:	b30b      	cbz	r3, 8003b88 <__sfp+0x68>
 8003b44:	6836      	ldr	r6, [r6, #0]
 8003b46:	e7f7      	b.n	8003b38 <__sfp+0x18>
 8003b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b4c:	b9d5      	cbnz	r5, 8003b84 <__sfp+0x64>
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <__sfp+0x88>)
 8003b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b54:	60e3      	str	r3, [r4, #12]
 8003b56:	6665      	str	r5, [r4, #100]	; 0x64
 8003b58:	f000 f847 	bl	8003bea <__retarget_lock_init_recursive>
 8003b5c:	f7ff ff96 	bl	8003a8c <__sfp_lock_release>
 8003b60:	2208      	movs	r2, #8
 8003b62:	4629      	mov	r1, r5
 8003b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b6c:	6025      	str	r5, [r4, #0]
 8003b6e:	61a5      	str	r5, [r4, #24]
 8003b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b74:	f7ff fd2c 	bl	80035d0 <memset>
 8003b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b80:	4620      	mov	r0, r4
 8003b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b84:	3468      	adds	r4, #104	; 0x68
 8003b86:	e7d9      	b.n	8003b3c <__sfp+0x1c>
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f7ff ff62 	bl	8003a54 <__sfmoreglue>
 8003b90:	4604      	mov	r4, r0
 8003b92:	6030      	str	r0, [r6, #0]
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d1d5      	bne.n	8003b44 <__sfp+0x24>
 8003b98:	f7ff ff78 	bl	8003a8c <__sfp_lock_release>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	e7ee      	b.n	8003b80 <__sfp+0x60>
 8003ba2:	bf00      	nop
 8003ba4:	08004684 	.word	0x08004684
 8003ba8:	ffff0001 	.word	0xffff0001

08003bac <_fwalk_reent>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	2700      	movs	r7, #0
 8003bb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8003bc2:	d505      	bpl.n	8003bd0 <_fwalk_reent+0x24>
 8003bc4:	6824      	ldr	r4, [r4, #0]
 8003bc6:	2c00      	cmp	r4, #0
 8003bc8:	d1f7      	bne.n	8003bba <_fwalk_reent+0xe>
 8003bca:	4638      	mov	r0, r7
 8003bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd0:	89ab      	ldrh	r3, [r5, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d907      	bls.n	8003be6 <_fwalk_reent+0x3a>
 8003bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	d003      	beq.n	8003be6 <_fwalk_reent+0x3a>
 8003bde:	4629      	mov	r1, r5
 8003be0:	4630      	mov	r0, r6
 8003be2:	47c0      	blx	r8
 8003be4:	4307      	orrs	r7, r0
 8003be6:	3568      	adds	r5, #104	; 0x68
 8003be8:	e7e9      	b.n	8003bbe <_fwalk_reent+0x12>

08003bea <__retarget_lock_init_recursive>:
 8003bea:	4770      	bx	lr

08003bec <__retarget_lock_acquire_recursive>:
 8003bec:	4770      	bx	lr

08003bee <__retarget_lock_release_recursive>:
 8003bee:	4770      	bx	lr

08003bf0 <__swhatbuf_r>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	460e      	mov	r6, r1
 8003bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	2900      	cmp	r1, #0
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	b096      	sub	sp, #88	; 0x58
 8003c00:	da07      	bge.n	8003c12 <__swhatbuf_r+0x22>
 8003c02:	2300      	movs	r3, #0
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	89b3      	ldrh	r3, [r6, #12]
 8003c08:	061a      	lsls	r2, r3, #24
 8003c0a:	d410      	bmi.n	8003c2e <__swhatbuf_r+0x3e>
 8003c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c10:	e00e      	b.n	8003c30 <__swhatbuf_r+0x40>
 8003c12:	466a      	mov	r2, sp
 8003c14:	f000 fc5a 	bl	80044cc <_fstat_r>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	dbf2      	blt.n	8003c02 <__swhatbuf_r+0x12>
 8003c1c:	9a01      	ldr	r2, [sp, #4]
 8003c1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c26:	425a      	negs	r2, r3
 8003c28:	415a      	adcs	r2, r3
 8003c2a:	602a      	str	r2, [r5, #0]
 8003c2c:	e7ee      	b.n	8003c0c <__swhatbuf_r+0x1c>
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	2000      	movs	r0, #0
 8003c32:	6023      	str	r3, [r4, #0]
 8003c34:	b016      	add	sp, #88	; 0x58
 8003c36:	bd70      	pop	{r4, r5, r6, pc}

08003c38 <__smakebuf_r>:
 8003c38:	898b      	ldrh	r3, [r1, #12]
 8003c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c3c:	079d      	lsls	r5, r3, #30
 8003c3e:	4606      	mov	r6, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	d507      	bpl.n	8003c54 <__smakebuf_r+0x1c>
 8003c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	6123      	str	r3, [r4, #16]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	6163      	str	r3, [r4, #20]
 8003c50:	b002      	add	sp, #8
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	466a      	mov	r2, sp
 8003c56:	ab01      	add	r3, sp, #4
 8003c58:	f7ff ffca 	bl	8003bf0 <__swhatbuf_r>
 8003c5c:	9900      	ldr	r1, [sp, #0]
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 f875 	bl	8003d50 <_malloc_r>
 8003c66:	b948      	cbnz	r0, 8003c7c <__smakebuf_r+0x44>
 8003c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6c:	059a      	lsls	r2, r3, #22
 8003c6e:	d4ef      	bmi.n	8003c50 <__smakebuf_r+0x18>
 8003c70:	f023 0303 	bic.w	r3, r3, #3
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	e7e3      	b.n	8003c44 <__smakebuf_r+0xc>
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <__smakebuf_r+0x7c>)
 8003c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	6020      	str	r0, [r4, #0]
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	9b00      	ldr	r3, [sp, #0]
 8003c8c:	6120      	str	r0, [r4, #16]
 8003c8e:	6163      	str	r3, [r4, #20]
 8003c90:	9b01      	ldr	r3, [sp, #4]
 8003c92:	b15b      	cbz	r3, 8003cac <__smakebuf_r+0x74>
 8003c94:	4630      	mov	r0, r6
 8003c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c9a:	f000 fc29 	bl	80044f0 <_isatty_r>
 8003c9e:	b128      	cbz	r0, 8003cac <__smakebuf_r+0x74>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	89a0      	ldrh	r0, [r4, #12]
 8003cae:	4305      	orrs	r5, r0
 8003cb0:	81a5      	strh	r5, [r4, #12]
 8003cb2:	e7cd      	b.n	8003c50 <__smakebuf_r+0x18>
 8003cb4:	08003a49 	.word	0x08003a49

08003cb8 <_free_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4605      	mov	r5, r0
 8003cbc:	2900      	cmp	r1, #0
 8003cbe:	d043      	beq.n	8003d48 <_free_r+0x90>
 8003cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc4:	1f0c      	subs	r4, r1, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bfb8      	it	lt
 8003cca:	18e4      	addlt	r4, r4, r3
 8003ccc:	f000 fc40 	bl	8004550 <__malloc_lock>
 8003cd0:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <_free_r+0x94>)
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	b933      	cbnz	r3, 8003ce6 <_free_r+0x2e>
 8003cd8:	6063      	str	r3, [r4, #4]
 8003cda:	6014      	str	r4, [r2, #0]
 8003cdc:	4628      	mov	r0, r5
 8003cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ce2:	f000 bc3b 	b.w	800455c <__malloc_unlock>
 8003ce6:	42a3      	cmp	r3, r4
 8003ce8:	d90a      	bls.n	8003d00 <_free_r+0x48>
 8003cea:	6821      	ldr	r1, [r4, #0]
 8003cec:	1862      	adds	r2, r4, r1
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	bf01      	itttt	eq
 8003cf2:	681a      	ldreq	r2, [r3, #0]
 8003cf4:	685b      	ldreq	r3, [r3, #4]
 8003cf6:	1852      	addeq	r2, r2, r1
 8003cf8:	6022      	streq	r2, [r4, #0]
 8003cfa:	6063      	str	r3, [r4, #4]
 8003cfc:	6004      	str	r4, [r0, #0]
 8003cfe:	e7ed      	b.n	8003cdc <_free_r+0x24>
 8003d00:	461a      	mov	r2, r3
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	b10b      	cbz	r3, 8003d0a <_free_r+0x52>
 8003d06:	42a3      	cmp	r3, r4
 8003d08:	d9fa      	bls.n	8003d00 <_free_r+0x48>
 8003d0a:	6811      	ldr	r1, [r2, #0]
 8003d0c:	1850      	adds	r0, r2, r1
 8003d0e:	42a0      	cmp	r0, r4
 8003d10:	d10b      	bne.n	8003d2a <_free_r+0x72>
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	4401      	add	r1, r0
 8003d16:	1850      	adds	r0, r2, r1
 8003d18:	4283      	cmp	r3, r0
 8003d1a:	6011      	str	r1, [r2, #0]
 8003d1c:	d1de      	bne.n	8003cdc <_free_r+0x24>
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4401      	add	r1, r0
 8003d24:	6011      	str	r1, [r2, #0]
 8003d26:	6053      	str	r3, [r2, #4]
 8003d28:	e7d8      	b.n	8003cdc <_free_r+0x24>
 8003d2a:	d902      	bls.n	8003d32 <_free_r+0x7a>
 8003d2c:	230c      	movs	r3, #12
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	e7d4      	b.n	8003cdc <_free_r+0x24>
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	1821      	adds	r1, r4, r0
 8003d36:	428b      	cmp	r3, r1
 8003d38:	bf01      	itttt	eq
 8003d3a:	6819      	ldreq	r1, [r3, #0]
 8003d3c:	685b      	ldreq	r3, [r3, #4]
 8003d3e:	1809      	addeq	r1, r1, r0
 8003d40:	6021      	streq	r1, [r4, #0]
 8003d42:	6063      	str	r3, [r4, #4]
 8003d44:	6054      	str	r4, [r2, #4]
 8003d46:	e7c9      	b.n	8003cdc <_free_r+0x24>
 8003d48:	bd38      	pop	{r3, r4, r5, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000094 	.word	0x20000094

08003d50 <_malloc_r>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	1ccd      	adds	r5, r1, #3
 8003d54:	f025 0503 	bic.w	r5, r5, #3
 8003d58:	3508      	adds	r5, #8
 8003d5a:	2d0c      	cmp	r5, #12
 8003d5c:	bf38      	it	cc
 8003d5e:	250c      	movcc	r5, #12
 8003d60:	2d00      	cmp	r5, #0
 8003d62:	4606      	mov	r6, r0
 8003d64:	db01      	blt.n	8003d6a <_malloc_r+0x1a>
 8003d66:	42a9      	cmp	r1, r5
 8003d68:	d903      	bls.n	8003d72 <_malloc_r+0x22>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	6033      	str	r3, [r6, #0]
 8003d6e:	2000      	movs	r0, #0
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d72:	f000 fbed 	bl	8004550 <__malloc_lock>
 8003d76:	4921      	ldr	r1, [pc, #132]	; (8003dfc <_malloc_r+0xac>)
 8003d78:	680a      	ldr	r2, [r1, #0]
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	b99c      	cbnz	r4, 8003da6 <_malloc_r+0x56>
 8003d7e:	4f20      	ldr	r7, [pc, #128]	; (8003e00 <_malloc_r+0xb0>)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b923      	cbnz	r3, 8003d8e <_malloc_r+0x3e>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4630      	mov	r0, r6
 8003d88:	f000 fb2a 	bl	80043e0 <_sbrk_r>
 8003d8c:	6038      	str	r0, [r7, #0]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4630      	mov	r0, r6
 8003d92:	f000 fb25 	bl	80043e0 <_sbrk_r>
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	d123      	bne.n	8003de2 <_malloc_r+0x92>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	6033      	str	r3, [r6, #0]
 8003da0:	f000 fbdc 	bl	800455c <__malloc_unlock>
 8003da4:	e7e3      	b.n	8003d6e <_malloc_r+0x1e>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	1b5b      	subs	r3, r3, r5
 8003daa:	d417      	bmi.n	8003ddc <_malloc_r+0x8c>
 8003dac:	2b0b      	cmp	r3, #11
 8003dae:	d903      	bls.n	8003db8 <_malloc_r+0x68>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	441c      	add	r4, r3
 8003db4:	6025      	str	r5, [r4, #0]
 8003db6:	e004      	b.n	8003dc2 <_malloc_r+0x72>
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	42a2      	cmp	r2, r4
 8003dbc:	bf0c      	ite	eq
 8003dbe:	600b      	streq	r3, [r1, #0]
 8003dc0:	6053      	strne	r3, [r2, #4]
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f000 fbca 	bl	800455c <__malloc_unlock>
 8003dc8:	f104 000b 	add.w	r0, r4, #11
 8003dcc:	1d23      	adds	r3, r4, #4
 8003dce:	f020 0007 	bic.w	r0, r0, #7
 8003dd2:	1ac2      	subs	r2, r0, r3
 8003dd4:	d0cc      	beq.n	8003d70 <_malloc_r+0x20>
 8003dd6:	1a1b      	subs	r3, r3, r0
 8003dd8:	50a3      	str	r3, [r4, r2]
 8003dda:	e7c9      	b.n	8003d70 <_malloc_r+0x20>
 8003ddc:	4622      	mov	r2, r4
 8003dde:	6864      	ldr	r4, [r4, #4]
 8003de0:	e7cc      	b.n	8003d7c <_malloc_r+0x2c>
 8003de2:	1cc4      	adds	r4, r0, #3
 8003de4:	f024 0403 	bic.w	r4, r4, #3
 8003de8:	42a0      	cmp	r0, r4
 8003dea:	d0e3      	beq.n	8003db4 <_malloc_r+0x64>
 8003dec:	1a21      	subs	r1, r4, r0
 8003dee:	4630      	mov	r0, r6
 8003df0:	f000 faf6 	bl	80043e0 <_sbrk_r>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d1dd      	bne.n	8003db4 <_malloc_r+0x64>
 8003df8:	e7cf      	b.n	8003d9a <_malloc_r+0x4a>
 8003dfa:	bf00      	nop
 8003dfc:	20000094 	.word	0x20000094
 8003e00:	20000098 	.word	0x20000098

08003e04 <__sfputc_r>:
 8003e04:	6893      	ldr	r3, [r2, #8]
 8003e06:	b410      	push	{r4}
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	6093      	str	r3, [r2, #8]
 8003e0e:	da07      	bge.n	8003e20 <__sfputc_r+0x1c>
 8003e10:	6994      	ldr	r4, [r2, #24]
 8003e12:	42a3      	cmp	r3, r4
 8003e14:	db01      	blt.n	8003e1a <__sfputc_r+0x16>
 8003e16:	290a      	cmp	r1, #10
 8003e18:	d102      	bne.n	8003e20 <__sfputc_r+0x1c>
 8003e1a:	bc10      	pop	{r4}
 8003e1c:	f7ff bc6e 	b.w	80036fc <__swbuf_r>
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	1c58      	adds	r0, r3, #1
 8003e24:	6010      	str	r0, [r2, #0]
 8003e26:	7019      	strb	r1, [r3, #0]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	bc10      	pop	{r4}
 8003e2c:	4770      	bx	lr

08003e2e <__sfputs_r>:
 8003e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e30:	4606      	mov	r6, r0
 8003e32:	460f      	mov	r7, r1
 8003e34:	4614      	mov	r4, r2
 8003e36:	18d5      	adds	r5, r2, r3
 8003e38:	42ac      	cmp	r4, r5
 8003e3a:	d101      	bne.n	8003e40 <__sfputs_r+0x12>
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	e007      	b.n	8003e50 <__sfputs_r+0x22>
 8003e40:	463a      	mov	r2, r7
 8003e42:	4630      	mov	r0, r6
 8003e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e48:	f7ff ffdc 	bl	8003e04 <__sfputc_r>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d1f3      	bne.n	8003e38 <__sfputs_r+0xa>
 8003e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e54 <_vfiprintf_r>:
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	460d      	mov	r5, r1
 8003e5a:	4614      	mov	r4, r2
 8003e5c:	4698      	mov	r8, r3
 8003e5e:	4606      	mov	r6, r0
 8003e60:	b09d      	sub	sp, #116	; 0x74
 8003e62:	b118      	cbz	r0, 8003e6c <_vfiprintf_r+0x18>
 8003e64:	6983      	ldr	r3, [r0, #24]
 8003e66:	b90b      	cbnz	r3, 8003e6c <_vfiprintf_r+0x18>
 8003e68:	f7ff fe22 	bl	8003ab0 <__sinit>
 8003e6c:	4b89      	ldr	r3, [pc, #548]	; (8004094 <_vfiprintf_r+0x240>)
 8003e6e:	429d      	cmp	r5, r3
 8003e70:	d11b      	bne.n	8003eaa <_vfiprintf_r+0x56>
 8003e72:	6875      	ldr	r5, [r6, #4]
 8003e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e76:	07d9      	lsls	r1, r3, #31
 8003e78:	d405      	bmi.n	8003e86 <_vfiprintf_r+0x32>
 8003e7a:	89ab      	ldrh	r3, [r5, #12]
 8003e7c:	059a      	lsls	r2, r3, #22
 8003e7e:	d402      	bmi.n	8003e86 <_vfiprintf_r+0x32>
 8003e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e82:	f7ff feb3 	bl	8003bec <__retarget_lock_acquire_recursive>
 8003e86:	89ab      	ldrh	r3, [r5, #12]
 8003e88:	071b      	lsls	r3, r3, #28
 8003e8a:	d501      	bpl.n	8003e90 <_vfiprintf_r+0x3c>
 8003e8c:	692b      	ldr	r3, [r5, #16]
 8003e8e:	b9eb      	cbnz	r3, 8003ecc <_vfiprintf_r+0x78>
 8003e90:	4629      	mov	r1, r5
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7ff fc84 	bl	80037a0 <__swsetup_r>
 8003e98:	b1c0      	cbz	r0, 8003ecc <_vfiprintf_r+0x78>
 8003e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e9c:	07dc      	lsls	r4, r3, #31
 8003e9e:	d50e      	bpl.n	8003ebe <_vfiprintf_r+0x6a>
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	b01d      	add	sp, #116	; 0x74
 8003ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eaa:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <_vfiprintf_r+0x244>)
 8003eac:	429d      	cmp	r5, r3
 8003eae:	d101      	bne.n	8003eb4 <_vfiprintf_r+0x60>
 8003eb0:	68b5      	ldr	r5, [r6, #8]
 8003eb2:	e7df      	b.n	8003e74 <_vfiprintf_r+0x20>
 8003eb4:	4b79      	ldr	r3, [pc, #484]	; (800409c <_vfiprintf_r+0x248>)
 8003eb6:	429d      	cmp	r5, r3
 8003eb8:	bf08      	it	eq
 8003eba:	68f5      	ldreq	r5, [r6, #12]
 8003ebc:	e7da      	b.n	8003e74 <_vfiprintf_r+0x20>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	0598      	lsls	r0, r3, #22
 8003ec2:	d4ed      	bmi.n	8003ea0 <_vfiprintf_r+0x4c>
 8003ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ec6:	f7ff fe92 	bl	8003bee <__retarget_lock_release_recursive>
 8003eca:	e7e9      	b.n	8003ea0 <_vfiprintf_r+0x4c>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ed6:	2330      	movs	r3, #48	; 0x30
 8003ed8:	f04f 0901 	mov.w	r9, #1
 8003edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ee0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80040a0 <_vfiprintf_r+0x24c>
 8003ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ee8:	4623      	mov	r3, r4
 8003eea:	469a      	mov	sl, r3
 8003eec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ef0:	b10a      	cbz	r2, 8003ef6 <_vfiprintf_r+0xa2>
 8003ef2:	2a25      	cmp	r2, #37	; 0x25
 8003ef4:	d1f9      	bne.n	8003eea <_vfiprintf_r+0x96>
 8003ef6:	ebba 0b04 	subs.w	fp, sl, r4
 8003efa:	d00b      	beq.n	8003f14 <_vfiprintf_r+0xc0>
 8003efc:	465b      	mov	r3, fp
 8003efe:	4622      	mov	r2, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7ff ff93 	bl	8003e2e <__sfputs_r>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f000 80aa 	beq.w	8004062 <_vfiprintf_r+0x20e>
 8003f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f10:	445a      	add	r2, fp
 8003f12:	9209      	str	r2, [sp, #36]	; 0x24
 8003f14:	f89a 3000 	ldrb.w	r3, [sl]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a2 	beq.w	8004062 <_vfiprintf_r+0x20e>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f28:	f10a 0a01 	add.w	sl, sl, #1
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	9307      	str	r3, [sp, #28]
 8003f30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f34:	931a      	str	r3, [sp, #104]	; 0x68
 8003f36:	4654      	mov	r4, sl
 8003f38:	2205      	movs	r2, #5
 8003f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3e:	4858      	ldr	r0, [pc, #352]	; (80040a0 <_vfiprintf_r+0x24c>)
 8003f40:	f000 faf8 	bl	8004534 <memchr>
 8003f44:	9a04      	ldr	r2, [sp, #16]
 8003f46:	b9d8      	cbnz	r0, 8003f80 <_vfiprintf_r+0x12c>
 8003f48:	06d1      	lsls	r1, r2, #27
 8003f4a:	bf44      	itt	mi
 8003f4c:	2320      	movmi	r3, #32
 8003f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f52:	0713      	lsls	r3, r2, #28
 8003f54:	bf44      	itt	mi
 8003f56:	232b      	movmi	r3, #43	; 0x2b
 8003f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f60:	2b2a      	cmp	r3, #42	; 0x2a
 8003f62:	d015      	beq.n	8003f90 <_vfiprintf_r+0x13c>
 8003f64:	4654      	mov	r4, sl
 8003f66:	2000      	movs	r0, #0
 8003f68:	f04f 0c0a 	mov.w	ip, #10
 8003f6c:	9a07      	ldr	r2, [sp, #28]
 8003f6e:	4621      	mov	r1, r4
 8003f70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f74:	3b30      	subs	r3, #48	; 0x30
 8003f76:	2b09      	cmp	r3, #9
 8003f78:	d94e      	bls.n	8004018 <_vfiprintf_r+0x1c4>
 8003f7a:	b1b0      	cbz	r0, 8003faa <_vfiprintf_r+0x156>
 8003f7c:	9207      	str	r2, [sp, #28]
 8003f7e:	e014      	b.n	8003faa <_vfiprintf_r+0x156>
 8003f80:	eba0 0308 	sub.w	r3, r0, r8
 8003f84:	fa09 f303 	lsl.w	r3, r9, r3
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	46a2      	mov	sl, r4
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	e7d2      	b.n	8003f36 <_vfiprintf_r+0xe2>
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	1d19      	adds	r1, r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	9103      	str	r1, [sp, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bfbb      	ittet	lt
 8003f9c:	425b      	neglt	r3, r3
 8003f9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003fa2:	9307      	strge	r3, [sp, #28]
 8003fa4:	9307      	strlt	r3, [sp, #28]
 8003fa6:	bfb8      	it	lt
 8003fa8:	9204      	strlt	r2, [sp, #16]
 8003faa:	7823      	ldrb	r3, [r4, #0]
 8003fac:	2b2e      	cmp	r3, #46	; 0x2e
 8003fae:	d10c      	bne.n	8003fca <_vfiprintf_r+0x176>
 8003fb0:	7863      	ldrb	r3, [r4, #1]
 8003fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb4:	d135      	bne.n	8004022 <_vfiprintf_r+0x1ce>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	3402      	adds	r4, #2
 8003fba:	1d1a      	adds	r2, r3, #4
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	9203      	str	r2, [sp, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bfb8      	it	lt
 8003fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fc8:	9305      	str	r3, [sp, #20]
 8003fca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040b0 <_vfiprintf_r+0x25c>
 8003fce:	2203      	movs	r2, #3
 8003fd0:	4650      	mov	r0, sl
 8003fd2:	7821      	ldrb	r1, [r4, #0]
 8003fd4:	f000 faae 	bl	8004534 <memchr>
 8003fd8:	b140      	cbz	r0, 8003fec <_vfiprintf_r+0x198>
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	eba0 000a 	sub.w	r0, r0, sl
 8003fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8003fe4:	9b04      	ldr	r3, [sp, #16]
 8003fe6:	3401      	adds	r4, #1
 8003fe8:	4303      	orrs	r3, r0
 8003fea:	9304      	str	r3, [sp, #16]
 8003fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff0:	2206      	movs	r2, #6
 8003ff2:	482c      	ldr	r0, [pc, #176]	; (80040a4 <_vfiprintf_r+0x250>)
 8003ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ff8:	f000 fa9c 	bl	8004534 <memchr>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d03f      	beq.n	8004080 <_vfiprintf_r+0x22c>
 8004000:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <_vfiprintf_r+0x254>)
 8004002:	bb1b      	cbnz	r3, 800404c <_vfiprintf_r+0x1f8>
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	3307      	adds	r3, #7
 8004008:	f023 0307 	bic.w	r3, r3, #7
 800400c:	3308      	adds	r3, #8
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004012:	443b      	add	r3, r7
 8004014:	9309      	str	r3, [sp, #36]	; 0x24
 8004016:	e767      	b.n	8003ee8 <_vfiprintf_r+0x94>
 8004018:	460c      	mov	r4, r1
 800401a:	2001      	movs	r0, #1
 800401c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004020:	e7a5      	b.n	8003f6e <_vfiprintf_r+0x11a>
 8004022:	2300      	movs	r3, #0
 8004024:	f04f 0c0a 	mov.w	ip, #10
 8004028:	4619      	mov	r1, r3
 800402a:	3401      	adds	r4, #1
 800402c:	9305      	str	r3, [sp, #20]
 800402e:	4620      	mov	r0, r4
 8004030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004034:	3a30      	subs	r2, #48	; 0x30
 8004036:	2a09      	cmp	r2, #9
 8004038:	d903      	bls.n	8004042 <_vfiprintf_r+0x1ee>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0c5      	beq.n	8003fca <_vfiprintf_r+0x176>
 800403e:	9105      	str	r1, [sp, #20]
 8004040:	e7c3      	b.n	8003fca <_vfiprintf_r+0x176>
 8004042:	4604      	mov	r4, r0
 8004044:	2301      	movs	r3, #1
 8004046:	fb0c 2101 	mla	r1, ip, r1, r2
 800404a:	e7f0      	b.n	800402e <_vfiprintf_r+0x1da>
 800404c:	ab03      	add	r3, sp, #12
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	462a      	mov	r2, r5
 8004052:	4630      	mov	r0, r6
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <_vfiprintf_r+0x258>)
 8004056:	a904      	add	r1, sp, #16
 8004058:	f3af 8000 	nop.w
 800405c:	4607      	mov	r7, r0
 800405e:	1c78      	adds	r0, r7, #1
 8004060:	d1d6      	bne.n	8004010 <_vfiprintf_r+0x1bc>
 8004062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004064:	07d9      	lsls	r1, r3, #31
 8004066:	d405      	bmi.n	8004074 <_vfiprintf_r+0x220>
 8004068:	89ab      	ldrh	r3, [r5, #12]
 800406a:	059a      	lsls	r2, r3, #22
 800406c:	d402      	bmi.n	8004074 <_vfiprintf_r+0x220>
 800406e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004070:	f7ff fdbd 	bl	8003bee <__retarget_lock_release_recursive>
 8004074:	89ab      	ldrh	r3, [r5, #12]
 8004076:	065b      	lsls	r3, r3, #25
 8004078:	f53f af12 	bmi.w	8003ea0 <_vfiprintf_r+0x4c>
 800407c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800407e:	e711      	b.n	8003ea4 <_vfiprintf_r+0x50>
 8004080:	ab03      	add	r3, sp, #12
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	462a      	mov	r2, r5
 8004086:	4630      	mov	r0, r6
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <_vfiprintf_r+0x258>)
 800408a:	a904      	add	r1, sp, #16
 800408c:	f000 f882 	bl	8004194 <_printf_i>
 8004090:	e7e4      	b.n	800405c <_vfiprintf_r+0x208>
 8004092:	bf00      	nop
 8004094:	080046a8 	.word	0x080046a8
 8004098:	080046c8 	.word	0x080046c8
 800409c:	08004688 	.word	0x08004688
 80040a0:	080046e8 	.word	0x080046e8
 80040a4:	080046f2 	.word	0x080046f2
 80040a8:	00000000 	.word	0x00000000
 80040ac:	08003e2f 	.word	0x08003e2f
 80040b0:	080046ee 	.word	0x080046ee

080040b4 <_printf_common>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	4616      	mov	r6, r2
 80040ba:	4699      	mov	r9, r3
 80040bc:	688a      	ldr	r2, [r1, #8]
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	4607      	mov	r7, r0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bfb8      	it	lt
 80040c6:	4613      	movlt	r3, r2
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ce:	460c      	mov	r4, r1
 80040d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040d4:	b10a      	cbz	r2, 80040da <_printf_common+0x26>
 80040d6:	3301      	adds	r3, #1
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	0699      	lsls	r1, r3, #26
 80040de:	bf42      	ittt	mi
 80040e0:	6833      	ldrmi	r3, [r6, #0]
 80040e2:	3302      	addmi	r3, #2
 80040e4:	6033      	strmi	r3, [r6, #0]
 80040e6:	6825      	ldr	r5, [r4, #0]
 80040e8:	f015 0506 	ands.w	r5, r5, #6
 80040ec:	d106      	bne.n	80040fc <_printf_common+0x48>
 80040ee:	f104 0a19 	add.w	sl, r4, #25
 80040f2:	68e3      	ldr	r3, [r4, #12]
 80040f4:	6832      	ldr	r2, [r6, #0]
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	dc28      	bgt.n	800414e <_printf_common+0x9a>
 80040fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004100:	1e13      	subs	r3, r2, #0
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	bf18      	it	ne
 8004106:	2301      	movne	r3, #1
 8004108:	0692      	lsls	r2, r2, #26
 800410a:	d42d      	bmi.n	8004168 <_printf_common+0xb4>
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004114:	47c0      	blx	r8
 8004116:	3001      	adds	r0, #1
 8004118:	d020      	beq.n	800415c <_printf_common+0xa8>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	68e5      	ldr	r5, [r4, #12]
 800411e:	f003 0306 	and.w	r3, r3, #6
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf18      	it	ne
 8004126:	2500      	movne	r5, #0
 8004128:	6832      	ldr	r2, [r6, #0]
 800412a:	f04f 0600 	mov.w	r6, #0
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	bf08      	it	eq
 8004132:	1aad      	subeq	r5, r5, r2
 8004134:	6922      	ldr	r2, [r4, #16]
 8004136:	bf08      	it	eq
 8004138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800413c:	4293      	cmp	r3, r2
 800413e:	bfc4      	itt	gt
 8004140:	1a9b      	subgt	r3, r3, r2
 8004142:	18ed      	addgt	r5, r5, r3
 8004144:	341a      	adds	r4, #26
 8004146:	42b5      	cmp	r5, r6
 8004148:	d11a      	bne.n	8004180 <_printf_common+0xcc>
 800414a:	2000      	movs	r0, #0
 800414c:	e008      	b.n	8004160 <_printf_common+0xac>
 800414e:	2301      	movs	r3, #1
 8004150:	4652      	mov	r2, sl
 8004152:	4649      	mov	r1, r9
 8004154:	4638      	mov	r0, r7
 8004156:	47c0      	blx	r8
 8004158:	3001      	adds	r0, #1
 800415a:	d103      	bne.n	8004164 <_printf_common+0xb0>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	3501      	adds	r5, #1
 8004166:	e7c4      	b.n	80040f2 <_printf_common+0x3e>
 8004168:	2030      	movs	r0, #48	; 0x30
 800416a:	18e1      	adds	r1, r4, r3
 800416c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004176:	4422      	add	r2, r4
 8004178:	3302      	adds	r3, #2
 800417a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800417e:	e7c5      	b.n	800410c <_printf_common+0x58>
 8004180:	2301      	movs	r3, #1
 8004182:	4622      	mov	r2, r4
 8004184:	4649      	mov	r1, r9
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d0e6      	beq.n	800415c <_printf_common+0xa8>
 800418e:	3601      	adds	r6, #1
 8004190:	e7d9      	b.n	8004146 <_printf_common+0x92>
	...

08004194 <_printf_i>:
 8004194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	460c      	mov	r4, r1
 800419a:	7e27      	ldrb	r7, [r4, #24]
 800419c:	4691      	mov	r9, r2
 800419e:	2f78      	cmp	r7, #120	; 0x78
 80041a0:	4680      	mov	r8, r0
 80041a2:	469a      	mov	sl, r3
 80041a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041aa:	d807      	bhi.n	80041bc <_printf_i+0x28>
 80041ac:	2f62      	cmp	r7, #98	; 0x62
 80041ae:	d80a      	bhi.n	80041c6 <_printf_i+0x32>
 80041b0:	2f00      	cmp	r7, #0
 80041b2:	f000 80d9 	beq.w	8004368 <_printf_i+0x1d4>
 80041b6:	2f58      	cmp	r7, #88	; 0x58
 80041b8:	f000 80a4 	beq.w	8004304 <_printf_i+0x170>
 80041bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c4:	e03a      	b.n	800423c <_printf_i+0xa8>
 80041c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ca:	2b15      	cmp	r3, #21
 80041cc:	d8f6      	bhi.n	80041bc <_printf_i+0x28>
 80041ce:	a001      	add	r0, pc, #4	; (adr r0, 80041d4 <_printf_i+0x40>)
 80041d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	08004241 	.word	0x08004241
 80041dc:	080041bd 	.word	0x080041bd
 80041e0:	080041bd 	.word	0x080041bd
 80041e4:	080041bd 	.word	0x080041bd
 80041e8:	080041bd 	.word	0x080041bd
 80041ec:	08004241 	.word	0x08004241
 80041f0:	080041bd 	.word	0x080041bd
 80041f4:	080041bd 	.word	0x080041bd
 80041f8:	080041bd 	.word	0x080041bd
 80041fc:	080041bd 	.word	0x080041bd
 8004200:	0800434f 	.word	0x0800434f
 8004204:	08004271 	.word	0x08004271
 8004208:	08004331 	.word	0x08004331
 800420c:	080041bd 	.word	0x080041bd
 8004210:	080041bd 	.word	0x080041bd
 8004214:	08004371 	.word	0x08004371
 8004218:	080041bd 	.word	0x080041bd
 800421c:	08004271 	.word	0x08004271
 8004220:	080041bd 	.word	0x080041bd
 8004224:	080041bd 	.word	0x080041bd
 8004228:	08004339 	.word	0x08004339
 800422c:	680b      	ldr	r3, [r1, #0]
 800422e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	600a      	str	r2, [r1, #0]
 8004238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423c:	2301      	movs	r3, #1
 800423e:	e0a4      	b.n	800438a <_printf_i+0x1f6>
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	6808      	ldr	r0, [r1, #0]
 8004244:	062e      	lsls	r6, r5, #24
 8004246:	f100 0304 	add.w	r3, r0, #4
 800424a:	d50a      	bpl.n	8004262 <_printf_i+0xce>
 800424c:	6805      	ldr	r5, [r0, #0]
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	2d00      	cmp	r5, #0
 8004252:	da03      	bge.n	800425c <_printf_i+0xc8>
 8004254:	232d      	movs	r3, #45	; 0x2d
 8004256:	426d      	negs	r5, r5
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	230a      	movs	r3, #10
 800425e:	485e      	ldr	r0, [pc, #376]	; (80043d8 <_printf_i+0x244>)
 8004260:	e019      	b.n	8004296 <_printf_i+0x102>
 8004262:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004266:	6805      	ldr	r5, [r0, #0]
 8004268:	600b      	str	r3, [r1, #0]
 800426a:	bf18      	it	ne
 800426c:	b22d      	sxthne	r5, r5
 800426e:	e7ef      	b.n	8004250 <_printf_i+0xbc>
 8004270:	680b      	ldr	r3, [r1, #0]
 8004272:	6825      	ldr	r5, [r4, #0]
 8004274:	1d18      	adds	r0, r3, #4
 8004276:	6008      	str	r0, [r1, #0]
 8004278:	0628      	lsls	r0, r5, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xec>
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0xf2>
 8004280:	0669      	lsls	r1, r5, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xe8>
 8004284:	881d      	ldrh	r5, [r3, #0]
 8004286:	2f6f      	cmp	r7, #111	; 0x6f
 8004288:	bf0c      	ite	eq
 800428a:	2308      	moveq	r3, #8
 800428c:	230a      	movne	r3, #10
 800428e:	4852      	ldr	r0, [pc, #328]	; (80043d8 <_printf_i+0x244>)
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004296:	6866      	ldr	r6, [r4, #4]
 8004298:	2e00      	cmp	r6, #0
 800429a:	bfa8      	it	ge
 800429c:	6821      	ldrge	r1, [r4, #0]
 800429e:	60a6      	str	r6, [r4, #8]
 80042a0:	bfa4      	itt	ge
 80042a2:	f021 0104 	bicge.w	r1, r1, #4
 80042a6:	6021      	strge	r1, [r4, #0]
 80042a8:	b90d      	cbnz	r5, 80042ae <_printf_i+0x11a>
 80042aa:	2e00      	cmp	r6, #0
 80042ac:	d04d      	beq.n	800434a <_printf_i+0x1b6>
 80042ae:	4616      	mov	r6, r2
 80042b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80042b4:	fb03 5711 	mls	r7, r3, r1, r5
 80042b8:	5dc7      	ldrb	r7, [r0, r7]
 80042ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042be:	462f      	mov	r7, r5
 80042c0:	42bb      	cmp	r3, r7
 80042c2:	460d      	mov	r5, r1
 80042c4:	d9f4      	bls.n	80042b0 <_printf_i+0x11c>
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d10b      	bne.n	80042e2 <_printf_i+0x14e>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	07df      	lsls	r7, r3, #31
 80042ce:	d508      	bpl.n	80042e2 <_printf_i+0x14e>
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	6861      	ldr	r1, [r4, #4]
 80042d4:	4299      	cmp	r1, r3
 80042d6:	bfde      	ittt	le
 80042d8:	2330      	movle	r3, #48	; 0x30
 80042da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042e2:	1b92      	subs	r2, r2, r6
 80042e4:	6122      	str	r2, [r4, #16]
 80042e6:	464b      	mov	r3, r9
 80042e8:	4621      	mov	r1, r4
 80042ea:	4640      	mov	r0, r8
 80042ec:	f8cd a000 	str.w	sl, [sp]
 80042f0:	aa03      	add	r2, sp, #12
 80042f2:	f7ff fedf 	bl	80040b4 <_printf_common>
 80042f6:	3001      	adds	r0, #1
 80042f8:	d14c      	bne.n	8004394 <_printf_i+0x200>
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295
 80042fe:	b004      	add	sp, #16
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	4834      	ldr	r0, [pc, #208]	; (80043d8 <_printf_i+0x244>)
 8004306:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800430a:	680e      	ldr	r6, [r1, #0]
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004312:	061f      	lsls	r7, r3, #24
 8004314:	600e      	str	r6, [r1, #0]
 8004316:	d514      	bpl.n	8004342 <_printf_i+0x1ae>
 8004318:	07d9      	lsls	r1, r3, #31
 800431a:	bf44      	itt	mi
 800431c:	f043 0320 	orrmi.w	r3, r3, #32
 8004320:	6023      	strmi	r3, [r4, #0]
 8004322:	b91d      	cbnz	r5, 800432c <_printf_i+0x198>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f023 0320 	bic.w	r3, r3, #32
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	2310      	movs	r3, #16
 800432e:	e7af      	b.n	8004290 <_printf_i+0xfc>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	f043 0320 	orr.w	r3, r3, #32
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	2378      	movs	r3, #120	; 0x78
 800433a:	4828      	ldr	r0, [pc, #160]	; (80043dc <_printf_i+0x248>)
 800433c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004340:	e7e3      	b.n	800430a <_printf_i+0x176>
 8004342:	065e      	lsls	r6, r3, #25
 8004344:	bf48      	it	mi
 8004346:	b2ad      	uxthmi	r5, r5
 8004348:	e7e6      	b.n	8004318 <_printf_i+0x184>
 800434a:	4616      	mov	r6, r2
 800434c:	e7bb      	b.n	80042c6 <_printf_i+0x132>
 800434e:	680b      	ldr	r3, [r1, #0]
 8004350:	6826      	ldr	r6, [r4, #0]
 8004352:	1d1d      	adds	r5, r3, #4
 8004354:	6960      	ldr	r0, [r4, #20]
 8004356:	600d      	str	r5, [r1, #0]
 8004358:	0635      	lsls	r5, r6, #24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	d501      	bpl.n	8004362 <_printf_i+0x1ce>
 800435e:	6018      	str	r0, [r3, #0]
 8004360:	e002      	b.n	8004368 <_printf_i+0x1d4>
 8004362:	0671      	lsls	r1, r6, #25
 8004364:	d5fb      	bpl.n	800435e <_printf_i+0x1ca>
 8004366:	8018      	strh	r0, [r3, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	4616      	mov	r6, r2
 800436c:	6123      	str	r3, [r4, #16]
 800436e:	e7ba      	b.n	80042e6 <_printf_i+0x152>
 8004370:	680b      	ldr	r3, [r1, #0]
 8004372:	1d1a      	adds	r2, r3, #4
 8004374:	600a      	str	r2, [r1, #0]
 8004376:	681e      	ldr	r6, [r3, #0]
 8004378:	2100      	movs	r1, #0
 800437a:	4630      	mov	r0, r6
 800437c:	6862      	ldr	r2, [r4, #4]
 800437e:	f000 f8d9 	bl	8004534 <memchr>
 8004382:	b108      	cbz	r0, 8004388 <_printf_i+0x1f4>
 8004384:	1b80      	subs	r0, r0, r6
 8004386:	6060      	str	r0, [r4, #4]
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	6123      	str	r3, [r4, #16]
 800438c:	2300      	movs	r3, #0
 800438e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004392:	e7a8      	b.n	80042e6 <_printf_i+0x152>
 8004394:	4632      	mov	r2, r6
 8004396:	4649      	mov	r1, r9
 8004398:	4640      	mov	r0, r8
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	47d0      	blx	sl
 800439e:	3001      	adds	r0, #1
 80043a0:	d0ab      	beq.n	80042fa <_printf_i+0x166>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	079b      	lsls	r3, r3, #30
 80043a6:	d413      	bmi.n	80043d0 <_printf_i+0x23c>
 80043a8:	68e0      	ldr	r0, [r4, #12]
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	4298      	cmp	r0, r3
 80043ae:	bfb8      	it	lt
 80043b0:	4618      	movlt	r0, r3
 80043b2:	e7a4      	b.n	80042fe <_printf_i+0x16a>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4632      	mov	r2, r6
 80043b8:	4649      	mov	r1, r9
 80043ba:	4640      	mov	r0, r8
 80043bc:	47d0      	blx	sl
 80043be:	3001      	adds	r0, #1
 80043c0:	d09b      	beq.n	80042fa <_printf_i+0x166>
 80043c2:	3501      	adds	r5, #1
 80043c4:	68e3      	ldr	r3, [r4, #12]
 80043c6:	9903      	ldr	r1, [sp, #12]
 80043c8:	1a5b      	subs	r3, r3, r1
 80043ca:	42ab      	cmp	r3, r5
 80043cc:	dcf2      	bgt.n	80043b4 <_printf_i+0x220>
 80043ce:	e7eb      	b.n	80043a8 <_printf_i+0x214>
 80043d0:	2500      	movs	r5, #0
 80043d2:	f104 0619 	add.w	r6, r4, #25
 80043d6:	e7f5      	b.n	80043c4 <_printf_i+0x230>
 80043d8:	080046f9 	.word	0x080046f9
 80043dc:	0800470a 	.word	0x0800470a

080043e0 <_sbrk_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	2300      	movs	r3, #0
 80043e4:	4d05      	ldr	r5, [pc, #20]	; (80043fc <_sbrk_r+0x1c>)
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fc fbf0 	bl	8000bd0 <_sbrk>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_sbrk_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_sbrk_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000148 	.word	0x20000148

08004400 <__sread>:
 8004400:	b510      	push	{r4, lr}
 8004402:	460c      	mov	r4, r1
 8004404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004408:	f000 f8ae 	bl	8004568 <_read_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	bfab      	itete	ge
 8004410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004412:	89a3      	ldrhlt	r3, [r4, #12]
 8004414:	181b      	addge	r3, r3, r0
 8004416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800441a:	bfac      	ite	ge
 800441c:	6563      	strge	r3, [r4, #84]	; 0x54
 800441e:	81a3      	strhlt	r3, [r4, #12]
 8004420:	bd10      	pop	{r4, pc}

08004422 <__swrite>:
 8004422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004426:	461f      	mov	r7, r3
 8004428:	898b      	ldrh	r3, [r1, #12]
 800442a:	4605      	mov	r5, r0
 800442c:	05db      	lsls	r3, r3, #23
 800442e:	460c      	mov	r4, r1
 8004430:	4616      	mov	r6, r2
 8004432:	d505      	bpl.n	8004440 <__swrite+0x1e>
 8004434:	2302      	movs	r3, #2
 8004436:	2200      	movs	r2, #0
 8004438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443c:	f000 f868 	bl	8004510 <_lseek_r>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	4632      	mov	r2, r6
 8004444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004448:	81a3      	strh	r3, [r4, #12]
 800444a:	4628      	mov	r0, r5
 800444c:	463b      	mov	r3, r7
 800444e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	f000 b817 	b.w	8004488 <_write_r>

0800445a <__sseek>:
 800445a:	b510      	push	{r4, lr}
 800445c:	460c      	mov	r4, r1
 800445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004462:	f000 f855 	bl	8004510 <_lseek_r>
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	bf15      	itete	ne
 800446c:	6560      	strne	r0, [r4, #84]	; 0x54
 800446e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004476:	81a3      	strheq	r3, [r4, #12]
 8004478:	bf18      	it	ne
 800447a:	81a3      	strhne	r3, [r4, #12]
 800447c:	bd10      	pop	{r4, pc}

0800447e <__sclose>:
 800447e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004482:	f000 b813 	b.w	80044ac <_close_r>
	...

08004488 <_write_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4604      	mov	r4, r0
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	2200      	movs	r2, #0
 8004492:	4d05      	ldr	r5, [pc, #20]	; (80044a8 <_write_r+0x20>)
 8004494:	602a      	str	r2, [r5, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	f7fc fb4d 	bl	8000b36 <_write>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_write_r+0x1e>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_write_r+0x1e>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000148 	.word	0x20000148

080044ac <_close_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	2300      	movs	r3, #0
 80044b0:	4d05      	ldr	r5, [pc, #20]	; (80044c8 <_close_r+0x1c>)
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	f7fc fb59 	bl	8000b6e <_close>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_close_r+0x1a>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_close_r+0x1a>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20000148 	.word	0x20000148

080044cc <_fstat_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	2300      	movs	r3, #0
 80044d0:	4d06      	ldr	r5, [pc, #24]	; (80044ec <_fstat_r+0x20>)
 80044d2:	4604      	mov	r4, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	602b      	str	r3, [r5, #0]
 80044da:	f7fc fb53 	bl	8000b84 <_fstat>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d102      	bne.n	80044e8 <_fstat_r+0x1c>
 80044e2:	682b      	ldr	r3, [r5, #0]
 80044e4:	b103      	cbz	r3, 80044e8 <_fstat_r+0x1c>
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	bd38      	pop	{r3, r4, r5, pc}
 80044ea:	bf00      	nop
 80044ec:	20000148 	.word	0x20000148

080044f0 <_isatty_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	2300      	movs	r3, #0
 80044f4:	4d05      	ldr	r5, [pc, #20]	; (800450c <_isatty_r+0x1c>)
 80044f6:	4604      	mov	r4, r0
 80044f8:	4608      	mov	r0, r1
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	f7fc fb51 	bl	8000ba2 <_isatty>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d102      	bne.n	800450a <_isatty_r+0x1a>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	b103      	cbz	r3, 800450a <_isatty_r+0x1a>
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	20000148 	.word	0x20000148

08004510 <_lseek_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	2200      	movs	r2, #0
 800451a:	4d05      	ldr	r5, [pc, #20]	; (8004530 <_lseek_r+0x20>)
 800451c:	602a      	str	r2, [r5, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f7fc fb49 	bl	8000bb6 <_lseek>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_lseek_r+0x1e>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_lseek_r+0x1e>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000148 	.word	0x20000148

08004534 <memchr>:
 8004534:	4603      	mov	r3, r0
 8004536:	b510      	push	{r4, lr}
 8004538:	b2c9      	uxtb	r1, r1
 800453a:	4402      	add	r2, r0
 800453c:	4293      	cmp	r3, r2
 800453e:	4618      	mov	r0, r3
 8004540:	d101      	bne.n	8004546 <memchr+0x12>
 8004542:	2000      	movs	r0, #0
 8004544:	e003      	b.n	800454e <memchr+0x1a>
 8004546:	7804      	ldrb	r4, [r0, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	428c      	cmp	r4, r1
 800454c:	d1f6      	bne.n	800453c <memchr+0x8>
 800454e:	bd10      	pop	{r4, pc}

08004550 <__malloc_lock>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__malloc_lock+0x8>)
 8004552:	f7ff bb4b 	b.w	8003bec <__retarget_lock_acquire_recursive>
 8004556:	bf00      	nop
 8004558:	20000140 	.word	0x20000140

0800455c <__malloc_unlock>:
 800455c:	4801      	ldr	r0, [pc, #4]	; (8004564 <__malloc_unlock+0x8>)
 800455e:	f7ff bb46 	b.w	8003bee <__retarget_lock_release_recursive>
 8004562:	bf00      	nop
 8004564:	20000140 	.word	0x20000140

08004568 <_read_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4604      	mov	r4, r0
 800456c:	4608      	mov	r0, r1
 800456e:	4611      	mov	r1, r2
 8004570:	2200      	movs	r2, #0
 8004572:	4d05      	ldr	r5, [pc, #20]	; (8004588 <_read_r+0x20>)
 8004574:	602a      	str	r2, [r5, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	f7fc fac0 	bl	8000afc <_read>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_read_r+0x1e>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_read_r+0x1e>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000148 	.word	0x20000148

0800458c <_init>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr

08004598 <_fini>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr
